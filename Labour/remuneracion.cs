using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using DevExpress.XtraEditors;
using DevExpress.XtraReports.UI;
using System.Windows.Forms;
using System.Collections;
using System.Data;
using DevExpress.LookAndFeel;
using DevExpress.XtraReports.UserDesigner;
using DevExpress.XtraPrinting;
using System.Diagnostics;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraRichEdit;
using DevExpress.XtraRichEdit.API.Native;
using System.Threading;
using System.IO;
//ARCHIVOS ZIP
using DevExpress.Compression;

namespace Labour
{
    /// <summary>
    /// Clase que nos permite manipular los dias trabajados de una persona.
    /// </summary>
    class DiasEmpleado
    {
        /// <summary>
        /// Numero de contrato asociado a trabajador.
        /// </summary>
        private string Contrato = "";

        /// <summary>
        /// Periodo ficha consultada.
        /// </summary>
        private int Periodo = 0;

        /// <summary>
        /// Solo para obtener los dias domingo y festivos para semana corrida
        /// </summary>
        public int DiasFestivosRango = 0;

        //CONSTRUCTOR PARAMETRIZADO
        public DiasEmpleado(string Contrato, int periodo)
        {
            this.Contrato = Contrato;
            Periodo = periodo;          
        }

        //ORDEN DE CALCULO
        //---------------------------------------------------------------------------------------------------
        //@ OBTENER PERIODO DEL CONTRATO A REVISAR                                                          |
        //@ OBTENER LA FECHA DE INGRESO Y LA FECHA DE TERMINO PARA ESE PERIODO                              |
        //@ OBTENER LAS AUSENCIAS Y LICENCIAS PARA ESE PERIODO CON EL CONTRATO COMO VALOR DE ENTRADA        |
        //@ CALCULAR CANTIDAD DE DIAS TRABAJADOR                                                            |
        //---------------------------------------------------------------------------------------------------

            /// <summary>
            /// Realiza calculo de dias trabajados para un contrato determinado en un periodo determinado.
            /// </summary>
            /// <returns></returns>
        public decimal Calculo()
        {            
            double dLicActual = 0, dAusActual = 0, resultado = 0, diasSusAutoridad = 0, diasSusPacto = 0;
            List<DateTime> fechas = new List<DateTime>();
            DateTime FechaTermino = DateTime.Now.Date;
            DateTime FechaInicio = DateTime.Now.Date;

            Persona Person = new Persona();

            if (Contrato != "" && Periodo != 0)
            {
                //OBTENEMOS TODA LA INFORMACION DE LA PERSONA
                Person = Persona.GetInfo(Contrato, Periodo);

                if (Person != null)
                {
                    //VERIFICAR FECHA DE TERMINO                 
                    FechaTermino = FechaTerminoContrato(Periodo, Person.Salida);

                    //VERIFICAR FECHA DE INICIO (DE ACUERDO A PERIODO EN CURSO)            
                    FechaInicio = FechaInicioContrato(Periodo, Person.Ingreso);

                    //DIAS LICENCIA (PREGUNTAMOS POR EL PERIODO ACTUAL)                    
                    dLicActual = DiasLicenciaTrabajadorv2(Periodo, FechaInicio, FechaTermino, Person.Rut);
                    //dLicActual = DiasLicenciaV3(Periodo, Person.Rut);
                        
                    //DIAS AUSENTISMO (PREGUNTAMOS POR EL PERIODO ACTUAL)                    
                    dAusActual = DiasAusentismoTrabajadorv2(Periodo, FechaInicio, FechaTermino, Person.Rut);
                    //dAusActual = DiasAusentismoV3(Periodo, Person.Rut);

                    diasSusAutoridad = DiasSuspensionesActoAutoridad(Periodo, FechaInicio, FechaTermino, Person.Rut);
                    diasSusPacto = DiasSuspensionesporPacto(Periodo, FechaInicio, FechaTermino, Person.Rut);

                    //Dias de suspension
                    varSistema.ActualizarValorLista(diasSusAutoridad, "sysdiassp13");
                    varSistema.ActualizarValorLista(diasSusPacto, "sysdiassp14");

                    //DIAS DE LICENCIA
                    varSistema.ActualizarValorLista(dLicActual, "sysdiaslic");

                    //DIAS DE AUSENTISMO
                    varSistema.ActualizarValorLista(dAusActual, "sysdiasaus");

                    //DIAS TRABAJADOS                         
                    resultado = Convert.ToDouble(DiasTrabajados(FechaInicio, FechaTermino, Periodo, Convert.ToDecimal(dAusActual), Convert.ToDecimal(dLicActual), Convert.ToDecimal(diasSusAutoridad + diasSusPacto)));

                    //Entrega la cantidad de festivos y domingos que entre el rango de fechaas [inicio-termino]
                    DiasFestivosRango = DiasFestivos(FechaInicio, FechaTermino);
                }         
            }           

            varSistema.ActualizarValorLista(Convert.ToDouble(resultado), "sysdiastr");
            
            return Convert.ToDecimal(resultado);
        }           

        /// <summary>
        /// Retorna la cantidad de dias que tiene un determinado mes.
        /// </summary>
        /// <param name="pPeriodo">Periodo a consultar.</param>
        /// <returns></returns>
        private int NumDiasMesVariante(int pPeriodo)
        {
            //anomes --> 201701
            string cad = pPeriodo.ToString();
            string s1 = "", s2 = "";
            s1 = cad.Substring(0, 4);
            s2 = cad.Substring(4, 2);

            //OBTENER LA CANTIDAD DE DIAS QUE TIENE ESE MES
            int dias = DateTime.DaysInMonth(int.Parse(s1), int.Parse(s2));
            return dias;
        }       
        
        /// <summary>
        /// Retorna fecha de inicio dentro del periodo evaluado solo para fines de calculo de dias trabajados.
        /// </summary>
        /// <param name="pPeriodo">Periodo consultado</param>
        /// <param name="pFecha">Fecha de inicio de contrato</param>
        /// <returns></returns>
        private DateTime FechaInicioContrato(int pPeriodo, DateTime pFecha)
        {
            DateTime primerDia = DateTime.Now.Date;
            DateTime ultimoDia = DateTime.Now.Date;
            DateTime fechaFinal = DateTime.Now.Date;

            primerDia = fnSistema.PrimerDiaMes(pPeriodo);
            ultimoDia = fnSistema.UltimoDiaMes(pPeriodo);

            //SI LA FECHA ESTA DENTRO DEL PERIODO LA DEJAMOS TAL CUAL
            if (pFecha >= primerDia && pFecha <= ultimoDia)
            {
                fechaFinal = pFecha;
            }            

            //SI FECHA ES MENOR A PERIODO , CONSIDERAMOS FECHA PRIMER DIA DEL MES
            if (pFecha < primerDia)
            {
                fechaFinal = primerDia;
            }           

            return fechaFinal;
        }

        /// <summary>
        /// Retorna fecha de termino dentro del periodo evaluado solo para fines de calculo de dias trabajados.
        /// </summary>
        /// <param name="pPeriodo">Periodo consultado.</param>
        /// <param name="pFecha">Fecha de termino de contrato.</param>
        /// <returns></returns>
        private DateTime FechaTerminoContrato(int pPeriodo, DateTime pFecha)
        {
            DateTime primerDia = DateTime.Now.Date;
            DateTime ultimoDia = DateTime.Now.Date;
            DateTime fechaFinal = DateTime.Now.Date;

            primerDia = fnSistema.PrimerDiaMes(pPeriodo);
            ultimoDia = fnSistema.UltimoDiaMes(pPeriodo);

            //SI LA FECHA ESTA DENTRO DEL PERIODO LA DEJAMOS TAL CUAL
            if (pFecha >= primerDia && pFecha <= ultimoDia)
            {
                fechaFinal = pFecha;
                //SI LA FECHA ES 31 LA DEJAMOS COMO 30
                //if (fechaFinal.Day == 31)
                  //  fechaFinal = fechaFinal.AddDays(-1);
            }

            //SI LA FECHA DE TERMINO ES MAYOR AL PERIODO DEJAMOS ULTIMO DIA MES
            if (pFecha > ultimoDia)
            {
                fechaFinal = ultimoDia;
                //SI LA FECHA ES 31 LA DEJAMOS COMO 30
               // if (fechaFinal.Day == 31)
                 //   fechaFinal = fechaFinal.AddDays(-1);
            }

            return fechaFinal;
        }                            

        /// <summary>
        /// Obtiene los dias de ausentismo que tuvo la persona dentro de un periodo de fechas determinado.
        /// </summary>      
        /// <param name="pPeriodo">Periodo de consulta</param>
        /// <param name="FechaInicio">Fecha de inicio correspondiente al periodo a evaluar</param>
        /// <param name="Fechatermino">Fecha de termino correspondiente al periodo a evaluar</param>
        /// <param name="pRut">Rut persona</param>
        /// <returns></returns>
        private double DiasAusentismoTrabajadorv2(int pPeriodo, DateTime FechaInicio, DateTime Fechatermino, string pRut)
        {
            DateTime FechaEvento = DateTime.Now.Date;
            DateTime FechaFin = DateTime.Now.Date;

            double totalDias = 0;          

            //BUSCAR TODAS LOS REGISTROS QUE ESTEN DENTRO DEL RANGO (ENTRE EL PRIMER Y EL ULTIMO DIA DEL PERIODO)
            string sql = "select ausentismo.contrato, fechaEvento, fechaAplic, fecFin, fecFinApli, " +
                        " rebsueldo, periodoAnterior, diasAnterior, " +
                        " periodoSiguiente, diasSiguiente, numdias, motivo.licencia, motivo.ausencia " +
                        " FROM ausentismo " +
                        " INNER JOIN trabajador ON trabajador.contrato=ausentismo.contrato " +
                        " INNER JOIN motivo ON motivo.id = ausentismo.motivo " +
                        " where rut = @pRut AND motivo.licencia = 0 AND motivo.suspension = 0 AND rebSueldo = 1 AND anomes=@pPeriodo";

            SqlCommand cmd;
            SqlDataReader rd;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {                                
                                //OBTENEMOS LA FECHA DE EVENTO Y FIN DE CADA REGISTRO
                                FechaEvento = (DateTime)rd["fechaAplic"];
                                FechaFin = (DateTime)rd["fecFinApli"];

                                if (FechaEvento.CompareTo(FechaFin) == 0)
                                {
                                    if (FechaEvento >= FechaInicio && FechaEvento <= Fechatermino)
                                    {
                                        totalDias = totalDias + Convert.ToDouble(rd["diasAnterior"]);
                                        //SALTAMOS AL SIGUIENTE REGISTRO
                                        continue;
                                    }                                        
                                }

                                //SI LAS FECHAS ESTÁN DENTRO DEL PERIODO GUARDAMOS EL TOTAL DE DIAS
                                if ((FechaEvento >= FechaInicio && FechaEvento <= Fechatermino) && (FechaFin >= FechaInicio && FechaFin <= Fechatermino))
                                {
                                    totalDias = totalDias + Convert.ToDouble(rd["numdias"]);
                                    //SALTAMOS AL SIGUIENTE REGISTRO
                                    continue;
                                }


                                //ITERAMOS CADA FECHA ENTRE FECHA EVENTO Y FECHA FIN
                                while (FechaEvento <= FechaFin)
                                {
                                 
                                 //SEGUIMOS BUSCANDO FECHAS DENTRO DEL RANGO
                                 if (FechaEvento >= FechaInicio && FechaEvento <= Fechatermino)
                                 {
                                     totalDias++;
                                 }                                 

                                 //AUMENTAMOS UN DIA A LA FECHA DE EVENTO
                                  FechaEvento = FechaEvento.AddDays(1);
                                }                               
                            }
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //RETORNAMOS LA CANTIDAD DE DIAS ENCONTRADOS
            return totalDias;
        }        
      

        /// <summary>
        /// Retorna la cantidad de dias de licencia que tiene una persona en un determinado periodo.
        /// </summary>     
        /// <param name="pPeriodo">Periodo a consultar.</param>
        /// <param name="FechaInicio">Fecha de inicio correspondiente al periodo a evaluar</param>
        /// <param name="FechaTermino">Fecha de termino correspondiente al periodo a evaluar</param>
        /// <param name="pRut">Rut persona.</param>
        /// <returns></returns>
        private double DiasLicenciaTrabajadorv2(int pPeriodo, DateTime FechaInicio, DateTime FechaTermino, string pRut)
        {
            DateTime FechaEvento = DateTime.Now.Date;
            DateTime FechaFin = DateTime.Now.Date;

            double totalDias = 0;          

            //BUSCAR TODAS LOS REGISTROS QUE ESTEN DENTRO DEL RANGO (ENTRE EL PRIMER Y EL ULTIMO DIA DEL PERIODO)
            string sql = "select ausentismo.contrato, fechaEvento, fechaAplic, fecFin, fecFinApli, " +
                        " rebsueldo, periodoAnterior, diasAnterior, " +
                        " periodoSiguiente, diasSiguiente, numdias, motivo.licencia, motivo.ausencia " +
                        " FROM ausentismo " +
                        " INNER JOIN trabajador ON trabajador.contrato = ausentismo.contrato " +
                        " INNER JOIN motivo ON motivo.id = ausentismo.motivo " +
                        " where rut = @pRut AND motivo.licencia = 1 AND rebSueldo = 1 AND anomes=@pPeriodo";

            SqlCommand cmd;
            SqlDataReader rd;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //OBTENEMOS LA FECHA DE EVENTO Y FIN DE CADA REGISTRO
                                //FechaEvento = (DateTime)rd["fechaEvento"];
                                FechaEvento = (DateTime)rd["fechaaplic"];
                                FechaFin = (DateTime)rd["fecfinapli"];
                                //FechaFin = (DateTime)rd["fecFin"];

                                //SI LAS FECHAS SON IGUALES Y ESTAN DENTRO DEL RANGO EN EVALUACION GUARDAMOS EL VALOR DEL
                                //CAMPO DIASANTERIOR (PODRIA SER INFERIOR A 0 O DECIMAL)
                                if (FechaEvento.CompareTo(FechaFin) == 0)
                                {
                                    if (FechaEvento >= FechaInicio && FechaEvento <= FechaTermino)
                                    {
                                        totalDias = totalDias + Convert.ToDouble(rd["diasAnterior"]);
                                        //SALTAMOS AL SIGUIENTE REGISTRO
                                        continue;
                                    }                                        
                                }

                                //SI LAS FECHAS ESTÁN DENTRO DEL PERIODO GUARDAMOS EL TOTAL DE DIAS
                                if ((FechaEvento >= FechaInicio && FechaEvento <= FechaTermino) && (FechaFin >= FechaInicio && FechaFin <= FechaTermino))
                                {
                                    totalDias = totalDias + Convert.ToDouble(rd["numdias"]);
                                    //SALTAMOS AL SIGUIENTE REGISTRO
                                    continue;
                                }


                                //ITERAMOS CADA FECHA ENTRE FECHA EVENTO Y FECHA FIN
                                while (FechaEvento <= FechaFin)
                                {                                                                 
                                    //SEGUIMOS BUSCANDO FECHAS DENTRO DEL RANGO
                                    if (FechaEvento >= FechaInicio && FechaEvento <= FechaTermino)
                                    {                                        
                                         totalDias++;                                            
                                    }                                 

                                    //AUMENTAMOS UN DIA A LA FECHA DE EVENTO
                                    FechaEvento = FechaEvento.AddDays(1);                                      
                                    
                                }                              
                            }
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //if (totalDias == 31)
            //    totalDias = 30;

            //RETORNAMOS LA CANTIDAD DE DIAS ENCONTRADOS
 
            return totalDias;
        }

        /// <summary>
        /// Entrega los dias de suspensiones por acto de autoridad
        /// </summary>
        /// <param name="pPeriodo"></param>
        /// <param name="FechaInicio"></param>
        /// <param name="Fechatermino"></param>
        /// <param name="pRut"></param>
        /// <returns></returns>
        private double DiasSuspensionesActoAutoridad(int pPeriodo, DateTime FechaInicio, DateTime FechaTermino, string pRut)
        {
            DateTime FechaEvento = DateTime.Now.Date;
            DateTime FechaFin = DateTime.Now.Date;

            double totalDias = 0;

            //BUSCAR TODAS LOS REGISTROS QUE ESTEN DENTRO DEL RANGO (ENTRE EL PRIMER Y EL ULTIMO DIA DEL PERIODO)
            string sql = "select ausentismo.contrato, fechaEvento, fechaAplic, fecFin, fecFinApli, " +
                        " rebsueldo, periodoAnterior, diasAnterior, " +
                        " periodoSiguiente, diasSiguiente, numdias, motivo.licencia, motivo.ausencia " +
                        " FROM ausentismo " +
                        " INNER JOIN trabajador ON trabajador.contrato = ausentismo.contrato " +
                        " INNER JOIN motivo ON motivo.id = ausentismo.motivo " +
                        " where rut = @pRut AND motivo.suspension=1 AND anomes=@pPeriodo AND motivo.id=13";

            SqlCommand cmd;
            SqlDataReader rd;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //OBTENEMOS LA FECHA DE EVENTO Y FIN DE CADA REGISTRO
                                //FechaEvento = (DateTime)rd["fechaEvento"];
                                FechaEvento = (DateTime)rd["fechaaplic"];
                                FechaFin = (DateTime)rd["fecfinapli"];
                                //FechaFin = (DateTime)rd["fecFin"];

                                //SI LAS FECHAS SON IGUALES Y ESTAN DENTRO DEL RANGO EN EVALUACION GUARDAMOS EL VALOR DEL
                                //CAMPO DIASANTERIOR (PODRIA SER INFERIOR A 0 O DECIMAL)
                                if (FechaEvento.CompareTo(FechaFin) == 0)
                                {
                                    if (FechaEvento >= FechaInicio && FechaEvento <= FechaTermino)
                                    {
                                        totalDias = totalDias + Convert.ToDouble(rd["diasAnterior"]);
                                        //SALTAMOS AL SIGUIENTE REGISTRO
                                        continue;
                                    }
                                }

                                //SI LAS FECHAS ESTÁN DENTRO DEL PERIODO GUARDAMOS EL TOTAL DE DIAS
                                if ((FechaEvento >= FechaInicio && FechaEvento <= FechaTermino) && (FechaFin >= FechaInicio && FechaFin <= FechaTermino))
                                {
                                    totalDias = totalDias + Convert.ToDouble(rd["numdias"]);
                                    //SALTAMOS AL SIGUIENTE REGISTRO
                                    continue;
                                }


                                //ITERAMOS CADA FECHA ENTRE FECHA EVENTO Y FECHA FIN
                                while (FechaEvento <= FechaFin)
                                {
                                    //SEGUIMOS BUSCANDO FECHAS DENTRO DEL RANGO
                                    if (FechaEvento >= FechaInicio && FechaEvento <= FechaTermino)
                                    {
                                        totalDias++;
                                    }

                                    //AUMENTAMOS UN DIA A LA FECHA DE EVENTO
                                    FechaEvento = FechaEvento.AddDays(1);

                                }
                            }
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //if (totalDias == 31)
            //    totalDias = 30;

            //RETORNAMOS LA CANTIDAD DE DIAS ENCONTRADOS

            return totalDias;
        }

        /// <summary>
        /// Entrega los dias de suspensiones por acto de autoridad
        /// </summary>
        /// <param name="pPeriodo"></param>
        /// <param name="FechaInicio"></param>
        /// <param name="Fechatermino"></param>
        /// <param name="pRut"></param>
        /// <returns></returns>
        private double DiasSuspensionesporPacto(int pPeriodo, DateTime FechaInicio, DateTime FechaTermino, string pRut)
        {
            DateTime FechaEvento = DateTime.Now.Date;
            DateTime FechaFin = DateTime.Now.Date;

            double totalDias = 0;

            //BUSCAR TODAS LOS REGISTROS QUE ESTEN DENTRO DEL RANGO (ENTRE EL PRIMER Y EL ULTIMO DIA DEL PERIODO)
            string sql = "select ausentismo.contrato, fechaEvento, fechaAplic, fecFin, fecFinApli, " +
                        " rebsueldo, periodoAnterior, diasAnterior, " +
                        " periodoSiguiente, diasSiguiente, numdias, motivo.licencia, motivo.ausencia " +
                        " FROM ausentismo " +
                        " INNER JOIN trabajador ON trabajador.contrato = ausentismo.contrato " +
                        " INNER JOIN motivo ON motivo.id = ausentismo.motivo " +
                        " where rut = @pRut AND motivo.suspension=1 AND anomes=@pPeriodo AND motivo.id=14";

            SqlCommand cmd;
            SqlDataReader rd;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //OBTENEMOS LA FECHA DE EVENTO Y FIN DE CADA REGISTRO
                                //FechaEvento = (DateTime)rd["fechaEvento"];
                                FechaEvento = (DateTime)rd["fechaaplic"];
                                FechaFin = (DateTime)rd["fecfinapli"];
                                //FechaFin = (DateTime)rd["fecFin"];

                                //SI LAS FECHAS SON IGUALES Y ESTAN DENTRO DEL RANGO EN EVALUACION GUARDAMOS EL VALOR DEL
                                //CAMPO DIASANTERIOR (PODRIA SER INFERIOR A 0 O DECIMAL)
                                if (FechaEvento.CompareTo(FechaFin) == 0)
                                {
                                    if (FechaEvento >= FechaInicio && FechaEvento <= FechaTermino)
                                    {
                                        totalDias = totalDias + Convert.ToDouble(rd["diasAnterior"]);
                                        //SALTAMOS AL SIGUIENTE REGISTRO
                                        continue;
                                    }
                                }

                                //SI LAS FECHAS ESTÁN DENTRO DEL PERIODO GUARDAMOS EL TOTAL DE DIAS
                                if ((FechaEvento >= FechaInicio && FechaEvento <= FechaTermino) && (FechaFin >= FechaInicio && FechaFin <= FechaTermino))
                                {
                                    totalDias = totalDias + Convert.ToDouble(rd["numdias"]);
                                    //SALTAMOS AL SIGUIENTE REGISTRO
                                    continue;
                                }


                                //ITERAMOS CADA FECHA ENTRE FECHA EVENTO Y FECHA FIN
                                while (FechaEvento <= FechaFin)
                                {
                                    //SEGUIMOS BUSCANDO FECHAS DENTRO DEL RANGO
                                    if (FechaEvento >= FechaInicio && FechaEvento <= FechaTermino)
                                    {
                                        totalDias++;
                                    }

                                    //AUMENTAMOS UN DIA A LA FECHA DE EVENTO
                                    FechaEvento = FechaEvento.AddDays(1);

                                }
                            }
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //if (totalDias == 31)
            //    totalDias = 30;

            //RETORNAMOS LA CANTIDAD DE DIAS ENCONTRADOS

            return totalDias;
        }

        /// <summary>
        /// Retorna la cantidad de dias que hay entre una fecha de inicio y una fecha de termino.
        /// </summary>
        /// <param name="Ingreso">Fecha inicio</param>
        /// <param name="Termino">Fecha termino</param>
        /// <returns></returns>
        private int DiasEntreFechas(DateTime Ingreso, DateTime Termino)
        {
            int diasIngreso = 0, diasTermino = 0, diferencia = 0;
            diasIngreso = Ingreso.Day;
            diasTermino = Termino.Day;

            //SOLO SUMAR 1 A LA DIFERENCIA SI EL DIA DE TERMINO ES 30
            if (diasTermino <= 30)
                diferencia = (diasTermino - diasIngreso) + 1;
            else
                diferencia = (diasTermino - diasIngreso);

            return diferencia;
        }        
        
        /// <summary>
        /// Calcula la cantidad de dias trabajados
        /// </summary>
        /// <param name="Ingreso">Fecha de ingreso.</param>
        /// <param name="Termino">Fecha de termino.</param>
        /// <param name="anomes">Periodo evaluado.</param>
        /// <param name="DiasAusentismo">Dias de ausentismo en el mes.</param>
        /// <param name="DiasLicencia">Dias de licencia en el mes</param>
        /// <returns></returns>
        public decimal DiasTrabajados(DateTime Ingreso, DateTime Termino, int pPeriodo, decimal DiasAusentismo, decimal DiasLicencia, decimal pDiasSuspension)
        {
            decimal CalculoDias = 0;

            //ULTIMO DIA MES
            DateTime UltimoDiaMes = DateTime.Now.Date;
            DateTime PrimerDiaMes = DateTime.Now.Date; 

            UltimoDiaMes = fnSistema.UltimoDiaMes(pPeriodo);
            PrimerDiaMes = fnSistema.PrimerDiaMes(pPeriodo);

            int DiaInicio = 0;
            int DiaTermino = 0;                        

            //SI FECHA INGRESO ES MAYOR AL PRIMER DIA DEL MES
            if (Ingreso > PrimerDiaMes)
                DiaInicio = Ingreso.Day;
            else
                DiaInicio = 1;

            if (DiaInicio == 31)
                DiaInicio = 30;

            //SI FECHA DE TERMINO ES MENOR AL ULTIMO DIA DEL MES
            if (Termino < UltimoDiaMes)
                DiaTermino = Termino.Day;
            else if (UltimoDiaMes.Day > 30 && DiasLicencia > 0)
                DiaTermino = 31;
            //COMIENZA A TRABAJAR DESPUES DEL PRIMER DIA DEL MES Y EL MES TIENE 31 DIAS Y NO TIENE LICENCIAS
            else if ((UltimoDiaMes.Day > 30 && DiaInicio > 1) && DiasAusentismo == 0)
                DiaTermino = 31;
            else
                DiaTermino = 30;

            //Solo para est febrero
            //if ((DiaInicio > 1 && UltimoDiaMes.Day < 30) && FechaTerminoContrato==UltimoDiaMes)
            //    DiaTermino = UltimoDiaMes.Day;


      
            //DIAS TRABAJADOS
            CalculoDias = ((DiaTermino - DiaInicio) + 1) - DiasAusentismo - DiasLicencia - pDiasSuspension;

            //SI EL TOTAL DE LICENCIAS MAS AUSENTISMOS ES IGUAL A LOS DIAS DEL MES NO HAY DIAS TRABAJADOS
            if (((UltimoDiaMes.Day - PrimerDiaMes.Day) + 1) <= (DiasLicencia + DiasAusentismo + pDiasSuspension))
                CalculoDias = 0;
           
            return CalculoDias;
        }

        /// <summary>
        /// Entrega la cantidad de dias festivos que hay dentro de un rango de fechas
        /// Solo para semana corrida.
        /// </summary>
        /// <param name="Ingreso"></param>
        /// <param name="Termino"></param>
        public int DiasFestivos(DateTime Ingreso, DateTime Termino)
        {
            int days = 0;

            if (Ingreso <= Termino)
            {
                //Recorremos y buscamos domingos y festivos
                while (Ingreso <= Termino)
                {
                    if (vacaciones.EsFeriado(Ingreso) || Ingreso.DayOfWeek == DayOfWeek.Sunday)
                        days++;

                    Ingreso = Ingreso.AddDays(1);
                }
            }

            return days;
        }

        /// <summary>
        /// Entrega la cantidad de dias trabajados en base a la cantidad de horas trabajadas
        /// <para>Ej: 9 horas dias, 71 horas / 9 = 8 dias aprox</para>
        /// </summary>
        /// <param name="pHoras"></param>
        /// <param name="pHorasDia"></param>
        /// <returns></returns>
        public double DiasTrabHoras(int pHoras, int pHorasDia)
        {
            double dias = 0;

            dias = pHoras / pHorasDia;

            return dias;
        }

        /// <summary>
        /// Entrega la cantidad de dias legales que deberia trabajar una persona de acuerdo a su jornada laboral.
        /// </summary>
        /// <param name="pPerson"></param>
        /// <returns></returns>
        public int DiasLegalesJornada(Persona pPerson)
        {
            int dias = 0;
            if (pPerson != null)
            {
                if (pPerson.Jornada == 1)
                    dias = 5;
                else if (pPerson.Jornada == 2)
                    dias = 6;
                else
                    dias = 6;
            }

            return dias;
        }
    }
   
   /*
    * ---------------------------
    * ORDEN DE CALCULO          |
    * ---------------------------
    * HABERES                   |
    * HABER EXENTOS             |
    * LEYES SOCIALES            |
    * DESCUENTOS                |
    * APORTES PATRONALES        |
    * CALCULO FINAL             |
    * ---------------------------
    */
    /// <summary>
    /// Clase que nos permite manipular los items del trabajador y calcular liquidaciones.
    /// </summary>
    class Haberes
    {
        /// <summary>
        /// Numero de contrato asociado al trabajador.
        /// </summary>
        private string contrato = "";

        /// <summary>
        /// Periodo que se desea evaluar.
        /// </summary>
        private int periodo = 0;

        /// <summary>
        /// Nos indica si el trabajador tiene mas de un contrato en el mes.
        /// </summary>
        private bool VariosContratos = false;

        /// <summary>
        /// Rut del trabajador.
        /// </summary>
        private string RutTrabajador = "";

       /// <summary>
       /// Constructor
       /// </summary>
        public Haberes()
        {
            //...
        }
        public Haberes(string contrato, int periodo)
        {
            this.contrato = contrato;            
            this.periodo = periodo;

            //RESET VARSISTEMA
            varSistema.ResetVariables(varSistema.listado);

            RutTrabajador = Persona.GetRutPersona(contrato, periodo);
            //VER SI EL RUT TIENE MAS CONTRATO EN EL PERIODO
            VariosContratos = Persona.TieneMasContratos(RutTrabajador, periodo);           
        
        }

        #region "SET AND GET"
        /// <summary>
        /// Nos permite setear la variable contrato
        /// </summary>
        /// <param name="contrato">Contrato asociado al trabajador</param>
        public void setContrato(string contrato)
        {
            this.contrato = contrato;
        }
        /// <summary>
        /// Nos permite obtener o consultar el numero de contrato del trabajador.
        /// </summary>
        /// <returns></returns>
        public string getContrato()
        {
            return contrato;
        }
        /// <summary>
        /// Nos permite setear o almacenar el periodo
        /// </summary>
        /// <param name="per">Periodo a guardar</param>
        public void setPeriodo(int per)
        {
            periodo = per;
        }
        /// <summary>
        /// Nos permite consultar por el periodo
        /// </summary>
        /// <returns></returns>
        public int getPeriodo()
        {
            return periodo;
        }
        #endregion

        #region "ANEXO HABERES"       

        /// <summary>
        /// Devuelve el valor proporcional de acuerdo a dias trabajados en el mes.
        /// </summary>
        /// <param name="SueldoBase">Valor original del item</param>
        /// <param name="DiasTrabajados">Dias trabajados en el mes evaluado</param>
        /// <returns></returns>
        public double SueldoProporcional(double SueldoBase, double DiasTrabajados)
        {
            double Proporcional = 0;
            Proporcional = Math.Round((SueldoBase / 30) * DiasTrabajados, 2);

            if (Proporcional < 0)
                return 0;

            return Proporcional;
        }
        /// <summary>
        /// Devuelve el valor de un item calculado sin ausentismos ni licencias.
        /// </summary>
        /// <param name="Valor">Valor calculado del item</param>
        /// <returns></returns>
        public double ValorBaseCompleto(double Valor, double ImponibleParcial, double ImponibleCompleto)
        {
            double total = 0;

            //  342974 --> 85744
            //  388607 --> Total

            total = (ImponibleCompleto * Valor) / ImponibleParcial;

            return total;
        }

        /// <summary>
        /// Retorna el valor calculado de una formula para un item especifico.
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado</param>
        /// <param name="codItem">Codigo del item</param>
        /// <param name="periodo">Periodo a evaluar</param>
        /// <returns></returns>   

        /// <summary>
        /// Obtiene la expresion que representa una formula de calculo para un item específico.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="pItem">Codigo del item que tiene asociado la formula</param>
        /// <param name="pNum">Numero del item.</param>
        /// <param name="pPeriodo">Periodo al que corresponde el item de trabajador</param>
        /// <returns></returns>
        public string CadenaCalculo(string pContrato, string pItem, int pNum, int pPeriodo)
        {
            string cad = "";
            string sql = " SELECT formula.valor as 'valor' from itemTrabajador " +
                         " INNER JOIN formula ON formula.codFormula = itemTrabajador.formula " +
                         " WHERE contrato = @pContrato AND coditem = @pItem AND anomes=@pPeriodo " +
                         "AND numitem=@pNum";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNum));

                        cad = (string)cmd.ExecuteScalar();

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return cad;
        }

        /// <summary>
        /// Nos indica si un item de trabajador utiliza formula de cálculo o no.
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado</param>
        /// <param name="item">Codigo de item a evaluar</param>
        /// <param name="numitem">Numero de item a evaluar</param>
        /// <param name="periodo">Periodo al que pertenece el item</param>
        /// <returns></returns>
        private bool UtilizaFormula(string contrato, string item, int numitem, int periodo)
        {          
            string sql = "SELECT formula FROM itemtrabajador WHERE contrato=@pcontrato AND coditem=@pitem AND numitem=@pnumitem AND anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            bool usaFormula = false;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@pitem", item));
                        cmd.Parameters.Add(new SqlParameter("@pnumitem", numitem));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {                                
                                if ((string)rd["formula"] == "0")
                                {                                    
                                    //NO USA FORMULA
                                    usaFormula = false;
                                }
                                else
                                {
                                    //SI USA FORMULA
                                    usaFormula = true;
                                }
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

         
            return usaFormula;
        }       

        /// <summary>
        /// Devuelve el valor original o base de un item de trabajador
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado al trabajador</param>
        /// <param name="numitem">Numero de item asociado a item</param>
        /// <param name="orden">Numero de orden del item</param>
        /// <param name="periodo">Periodo al que corresponde el item</param>
        /// <returns></returns>
        private double HaberValor(string contrato, int numitem, int orden, int periodo)
        {
            string sql = "SELECT valor FROM itemtrabajador WHERE contrato=@pcontrato AND numitem=@numitem AND orden=@numorden AND anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            double valor = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@numitem", numitem));
                        cmd.Parameters.Add(new SqlParameter("@numorden", orden));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();

                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                valor = Convert.ToDouble((decimal)rd["valor"]);
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return valor;
        }

        /// <summary>
        /// Devuelve el valor calculado de item de trabajador.
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado al item</param>
        /// <param name="numitem">Numero de item</param>
        /// <param name="orden">Numero de orden del item evaluado</param>
        /// <param name="periodo">Periodo al que pertenece el item</param>
        /// <returns></returns>
        private double HaberValorCalculado(string contrato, int numitem, int orden, int periodo)
        {
            string sql = "SELECT valorcalculado FROM itemtrabajador WHERE contrato = @pcontrato AND numitem=@pnum AND orden=@orden AND anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            double valor = 0;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@pnum", numitem));
                        cmd.Parameters.Add(new SqlParameter("@orden", orden));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                valor = Convert.ToDouble((decimal)rd["valorcalculado"]);
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return valor;
        }

        /// <summary>
        /// Nos indica si un item de trabajador es proporcional o no.
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado al item</param>
        /// <param name="item">Código del item</param>
        /// <param name="periodo">Periodo al que pertenece el item</param>
        /// <returns></returns>
        private bool AplicaProporcional(string contrato, string item, int periodo)
        {
            string sql = " SELECT proporcional from itemTrabajador " +                       
                        " WHERE contrato = @pcontrato AND itemTrabajador.tipo = 1 " +
                        " AND itemTrabajador.coditem = @pitem AND itemtrabajador.anomes =@periodo";

            bool proporcional = false;
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@pitem", item));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //GUARDAMOS DATO
                                proporcional = (bool)rd["proporcional"];
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();                        
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            if (proporcional)
            {
                //APLICA PROPORCIONAL
                return true;
            }
            else
            {
                return false;
            }         
        }                     

        //CALCULO FINAL IMPONIBLE
        public double TotalHaberesImponibles(string contrato, int periodo)
        {
            double total = 0;
            //GENERAMOS LISTA DE ITEMS
            List<ItemTrabajador> items = new List<ItemTrabajador>();
            items = ItemHaber(contrato, periodo);

            //RECORREMOS
            foreach (var elemento in items)
            {
                //OBTENEMOS EL VALOR CALCULADO DEL ITEM
                total = total + HaberValorCalculado(contrato, elemento.NumeroItem, elemento.orden, periodo);
            }

            //RETORNAMOS LA SUMA FINAL
            return total;
        }

        /// <summary>
        /// Realiza el calculo del item con su respectiva formula de cálculo.
        /// </summary>
        /// <param name="cadena">Expresion matematica de cálculo</param>
        /// <param name="contrato">Numero de contrato asociado</param>
        /// <param name="item">Código del item</param>
        /// <param name="numitem">Numero del item</param>
        /// <returns></returns>
        private double CalculoFormula(string cadena, string contrato, string item, int numitem)
        {
            double resultado = 0;
            int anomes = 0;
            if (getPeriodo() != 0) anomes = getPeriodo();

            Expresion expres = new Expresion(cadena);
            expres.setContrato(contrato);          
            expres.setItemTrabajador(item);
            expres.setNumeroItem(numitem);
            expres.setPeriodoEmpleado(anomes);

            resultado = expres.CalculoSupremo();

            if (resultado < 0) resultado = 0;

          /*  if (cadena.Contains("MIN") || cadena.Contains("MAX"))
            {
                expres.SetParcialMinMax(cadena);
                valido = expres.EvaluarMinMax();
                if (valido)
                {
                    resultado = expres.CalculoFinalMinMaxV2();
                }
            }
            else
            {
                valido = expres.CalculoIf(cadena);
                if (valido)
                {
                    resultado = expres.EvaluaDatos();
                }
            }*/

            return Math.Round(resultado, MidpointRounding.AwayFromZero);
        }    

        /// <summary>
        /// Devuelve el valor en uf para en periodo determinado.
        /// </summary>
        /// <param name="periodo">Periodo a consultar</param>
        /// <returns></returns>
        private double ValorUf(int periodo)
        {
            double valor = 0;
            string sql = "SELECT UF FROM valoresmes WHERE anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                valor = Convert.ToDouble((decimal)rd["UF"]);
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return valor;
        }

        /// <summary>
        /// Obtiene el tipo de contrato del trabajador.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="periodo">Periodo que se desea evaluar</param>
        /// <returns></returns>
        private int TipoContrato(string pContrato, int periodo)
        {
            string sql = "SELECT tipocontrato FROM trabajador WHERE contrato=@pContrato AND anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;

            int tipo = -1;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                tipo = (int)rd["tipocontrato"];
                            }
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return tipo;
        }

        /// <summary>
        /// Obtiene informacion referente a un item de trabajador
        /// </summary>
        /// <param name="elemento">Codigo del item</param>
        /// <returns></returns>
        private ItemTrabajador InformacionItem(string elemento)
        {
            ItemTrabajador obj = new ItemTrabajador();
            string sql = "SELECT numitem, orden, tipo, coditem FROM itemtrabajador " +
                "WHERE contrato=@contrato AND anomes=@periodo AND coditem=@item";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@contrato", getContrato()));
                        cmd.Parameters.Add(new SqlParameter("@periodo", getPeriodo()));
                        cmd.Parameters.Add(new SqlParameter("@item", elemento));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                obj.item = (string)rd["coditem"];
                                obj.NumeroItem = (int)rd["numitem"];
                                obj.orden = (int)rd["orden"];
                                obj.tipo = (int)rd["tipo"];
                            }
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return obj;
        }
        #endregion

        #region "LISTADOS ITEMS"

        //OBTENER LISTADO CON ID Y NUMERO DE ITEM DE TIPO HABER     
        private List<ItemTrabajador> ItemHaber(string contrato, int periodo)
        {
            string sql = "SELECT numitem, orden, coditem FROM itemtrabajador WHERE contrato=@pcontrato AND anomes=@periodo AND tipo=1  ORDER BY orden";
            SqlCommand cmd;
            SqlDataReader rd;

            //CREAMOS UNA LISTA DE TIPO ITEMTRABAJADOR
            List<ItemTrabajador> lista = new List<ItemTrabajador>();

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();

                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS LISTA
                                lista.Add(new ItemTrabajador() { NumeroItem = (int)rd["numitem"], orden = (int)rd["orden"], item = (string)rd["coditem"] });
                            }
                        }
                    }
                    //LIBERAR RECURSOS 
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //RETORNAR LISTA CON TODOS LOS NUMEROS DE ORDEN
            return lista;
        }      

        //LISTADO ITEMS GENERICOS PARA HABERES - HABERES EXENTOS - ASIGNACION FAMILIAR
        private List<ItemTrabajador> ListadoHaberes(string contrato, int periodo)
        {
            List<ItemTrabajador> lista = new List<ItemTrabajador>();
            string sql = "SELECT itemtrabajador.contrato, itemtrabajador.coditem, numitem, itemtrabajador.orden," +
                " itemTrabajador.tipo, descripcion, itemtrabajador.formula, itemtrabajador.valorcalculado FROM itemtrabajador " +
                " INNER JOIN item ON item.coditem = itemTrabajador.coditem " +
                "WHERE contrato = @pcontrato AND anomes = @periodo AND suspendido=0 ORDER BY tipo, orden";

            string sql2 = "SELECT itemtrabajador.anomes, itemtrabajador.rut, itemtrabajador.contrato, itemtrabajador.coditem, numitem, itemtrabajador.orden, " +
                          "itemTrabajador.tipo, descripcion, itemtrabajador.formula,itemtrabajador.valor, itemtrabajador.valorcalculado, " +
                          "itemtrabajador.proporcional, uf, pesos, porc,  " +
                          "item.informacion as informacion, " +
                         "f.valor as ExpresionFormula, " +
                          "IIF(itemtrabajador.formula = '0', 0, 1) as 'usaformula', " +
                          "ISNULL((select top 1 systimp FROM calculomensual where contrato = @pcontrato AND sysdiastr >=30 ORDER BY anomes desc), 0) as ImponibleAnterior, " +
                          "IIF((select count(*) FROM itemtrabajador it where it.contrato = itemTrabajador.contrato AND it.anomes=itemTrabajador.anomes " +
                          "AND LOWER(itemTrabajador.coditem)= 'sbgiro') >0 , 1, 0) as ExisteSobreGiroMes, " +
                          "IIF((select count(*) FROM liquidacionHistorico liq WHERE liq.contrato = itemtrabajador.contrato AND liq.anomes = itemtrabajador.anomes AND sobregiro>0) >0, 1, 0) as ExisteSobAnterior, " +
                          "ISNULL((select sobregiro FROM liquidacionHistorico liq WHERE liq.contrato = itemtrabajador.contrato AND liq.anomes = itemtrabajador.anomes AND sobregiro>0), 0) as SobregiroAnterior, " +
                          "ISNULL((select sobregiro FROM liquidacionHistorico liq WHERE liq.contrato = itemtrabajador.contrato AND liq.anomes = itemtrabajador.anomes AND sobregiro>0), 0) as SobreAnterior, " +
                          "ISNULL((select MAX(numitem) FROM itemtrabajador it where it.contrato = itemtrabajador.contrato AND it.anomes=itemtrabajador.anomes), 0) as MaxNum, " +
                          "ISNULL((select monto FROM afc WHERE rut=itemtrabajador.rut AND mes=itemTrabajador.anomes), 0) as MontoAfc, " +
                          "(select count(*) FROM ausentismo  aus inner join trabajador t on aus.contrato = t.contrato AND t.rut = itemTrabajador.rut AND t.anomes = itemTrabajador.anomes AND aus.motivo=1 AND aus.rebsueldo=1) as Lic, " +
                          "(SELECT count(*) FROM datoscalculo d WHERE d.contrato = itemtrabajador.contrato) as ExisteImpAnterior, " +
                          "(SELECT TOP 1 codAfiliacion FROM empresa) as Afiliacion " +                          
                          "FROM itemtrabajador " +
                         "INNER JOIN item ON item.coditem = itemTrabajador.coditem " +
                         "INNER JOIN formula f on f.codFormula = itemtrabajador.formula " +
                         "WHERE contrato = @pcontrato AND anomes = @periodo AND suspendido = 0 AND (itemTrabajador.splab13 = 0 AND itemtrabajador.splab14 = 0)" +
                         "ORDER BY tipo, orden";

            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql2, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));
                        cmd.Parameters.Add(new SqlParameter("@PeriodoAnterior", fnSistema.fnObtenerPeriodoAnterior(periodo)));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS LISTA
                                lista.Add(new ItemTrabajador() { item = (string)rd["coditem"],
                                    NumeroItem = (int)rd["numitem"], orden = (int)rd["orden"],
                                    tipo = (int)rd["tipo"], Descripcion = (string)rd["descripcion"],
                                    contrato = (string)rd["contrato"],
                                    formula = (string)rd["formula"],
                                    calculado = Convert.ToDouble(rd["valorcalculado"]),
                                    valorOriginal = Convert.ToDouble(rd["valor"]),
                                    UsaFormula = Convert.ToBoolean(rd["usaformula"]),
                                    ExpresionFormula = Convert.ToString(rd["ExpresionFormula"]),
                                    proporcional = Convert.ToBoolean(rd["proporcional"]),
                                    AplicaUf = Convert.ToBoolean(rd["uf"]),
                                    AplicaPesos = Convert.ToBoolean(rd["pesos"]),
                                    AplicaPorcentaje = Convert.ToBoolean(rd["porc"]),
                                    Informativo = Convert.ToBoolean(rd["informacion"]),
                                    ExisteSobregiro = Convert.ToBoolean(rd["ExisteSobreGiroMes"]),
                                    ExisteSobreGiroAnterior = Convert.ToBoolean(rd["ExisteSobAnterior"]),
                                    MontoSobreGiroAnterior = Convert.ToDouble(rd["SobreAnterior"]),
                                    Rut = Convert.ToString(rd["rut"]),
                                    MaxNum = Convert.ToInt32(rd["MaxNum"]),
                                    periodo = Convert.ToInt32(rd["anomes"]),
                                    ImponibleAnterior = Convert.ToDouble(rd["ImponibleAnterior"]),
                                    MontoAfc = Convert.ToDouble(rd["MontoAfc"]),
                                    ExisteImpAnterior = Convert.ToDouble(rd["ExisteImpAnterior"]) > 0 ? true:false, 
                                    Afiliacion = Convert.ToInt32(rd["Afiliacion"])
                                    
                                });
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
          
            return lista;
        }

        //LISTADO ITEMS IMPONIBLES
        private List<ItemTrabajador> ListaItemsImponibles(string contrato, int periodo)
        {
            string sql = "SELECT contrato, coditem, valor, numitem, tipo, orden, formula, proporcional FROM itemtrabajador" +
                " WHERE tipo = 1 AND contrato=@pContrato AND anomes=@pPeriodo ORDER BY orden";
            SqlCommand cmd;
            SqlDataReader rd;
            List<ItemTrabajador> Listado = new List<ItemTrabajador>();
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS LISTADO
                                Listado.Add(new ItemTrabajador() { contrato = (string)rd["contrato"],
                                formula = (string)rd["formula"], item = (string)rd["coditem"],
                                NumeroItem = Convert.ToInt32(rd["numitem"]), orden = Convert.ToInt32(rd["orden"]),
                                tipo = Convert.ToInt32(rd["tipo"]), valorOriginal = Convert.ToInt32(rd["valor"])});

                            }
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return Listado;
        }

        //LISTADO ITEMS IMPONIBLES (ORDEN MENOR A GRATIFICACION )
        private List<ItemTrabajador> ListaItemsGratificacion(string contrato, int periodo)
        {
            string sql = "SELECT contrato, coditem, valor, numitem, tipo, orden, formula FROM itemtrabajador" +
                " WHERE tipo = 1 AND contrato=@pContrato AND anomes=@pPeriodo AND orden <= " +
                " (SELECT orden FROM item WHERE coditem='GRATIFI') ORDER BY orden";
            SqlCommand cmd;
            SqlDataReader rd;
            List<ItemTrabajador> Listado = new List<ItemTrabajador>();

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS LISTADO
                                Listado.Add(new ItemTrabajador()
                                {
                                    contrato = (string)rd["contrato"],
                                    formula = (string)rd["formula"],
                                    item = (string)rd["coditem"],
                                    NumeroItem = Convert.ToInt32(rd["numitem"]),
                                    orden = Convert.ToInt32(rd["orden"]),
                                    tipo = Convert.ToInt32(rd["tipo"]),
                                    valorOriginal = Convert.ToInt32(rd["valor"])
                                });
                            }
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return Listado;
        }

        #endregion

        #region "AFP"
        /// <summary>
        /// Retorna el codigo de la afp asociada al trabajador
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado</param>
        /// <param name="periodo">Periodo a evaluar</param>
        /// <returns></returns>
        private int AfpEmpleado(string contrato, int periodo)
        {
            string sql = "SELECT afp FROM trabajador WHERE contrato=@pContrato AND anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            int afp = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                afp = (int)rd["afp"];
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //RETORNAMOS EL VALOR DEL PARAMETRO AFP DE LA FICHA EMPLEADO
            return afp;
        }

        /// <summary>
        /// Calcula el porcentaje en pesos, correspondiente al administrado por las afp.
        /// </summary>
        /// <param name="codeAfp">Codigo afp asociado con contrato</param>
        /// <param name="TotalImponible">Valor imponible periodo evaluado</param>
        /// <returns></returns>
        private double PorcentajeAdministrado(int codeAfp, double TotalImponible)
        {
            string sql = "SELECT porcAdmin FROM afp WHERE id=@pAfp";
            double Administrado = 0, total = 0;
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pAfp", codeAfp));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                Administrado = Convert.ToDouble((decimal)rd["porcAdmin"]);
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            if (TotalImponible > varSistema.ObtenerValorLista("systopeafp"))
                TotalImponible = varSistema.ObtenerValorLista("systopeafp");           

            //AHORA CALCULAMOS EL PORCENTAJE ADMINISTRADO POR AFP DE ACUERDO A VALOR OBTENIDO DESDE BD
            total = Math.Round((Administrado / 100) * TotalImponible);

            return total;
        }

        /// <summary>
        /// Corresponde al porcentaje que cobra el afp por administrar los fondos.
        /// </summary>
        /// <param name="codeAfp">Codigo que representa la afp asociada al contrato.</param>
        private void AdminAfp(int codeAfp)
        {
            string sql = "SELECT porcAdmin FROM afp WHERE id=@pAfp";
            double Administrado = 0;
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pAfp", codeAfp));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                Administrado = Convert.ToDouble((decimal)rd["porcAdmin"]);
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            varSistema.ActualizarValorLista(Administrado, "sysporcadmafp");
            //SETEAMOS VARIABLE SISTEMA
            Administrado = Administrado / 100;
            varSistema.ActualizarValorLista(Administrado, "syscomafp");
            
        }        

        /// <summary>
        /// Devuelve el valor en pesos correspondiente al tope legal para el calculo de la cotizacion afp.
        /// </summary>
        /// <param name="uf">Valor en uf para periodo evaluado.</param>
        /// <param name="factor">Factor en uf para tope descuento legal.</param>
        /// <returns></returns>
        private double TopeAfp(double uf, double factor)
        {
            double tope = 0;

            tope = factor * uf;

            return tope;
        }
        #endregion

        #region "SEGURO CESANTIA"    
        /// <summary>
        /// Retorna el imponible de un trabajador como si este hubiese trabajado el mes completo.
        /// </summary>
        /// <param name="contrato">Contrato asociado al trabajador.</param>
        /// <param name="periodo">Periodo o Mes del cual se desea obtener la información.</param>
        /// <returns></returns>
        private double ImponibleMesCompleto(string contrato, int periodo)
        {
            double total = 0, ValorCalculado = 0;
            string ExpresionFormula = "";
            bool UsaFormula = false, Proporcional = false;

            List<ItemTrabajador> Imponibles = new List<ItemTrabajador>();
            Imponibles = ListaItemsImponibles(contrato, periodo);

            if (Imponibles.Count > 0)
            {
                //RECORREMOS LISTADO
                foreach (var elemento in Imponibles)
                {
                    //PREGUNTAMOS SI USA FORMULA
                    UsaFormula = UtilizaFormula(contrato, elemento.item, elemento.NumeroItem, periodo);                    
                    
                    //PARA EL RESTO SOLO CONSIDERAMOS EL VALOR ORIGINAL                    
                        if (UsaFormula)
                        {
                            //CALCULAMOS EN BASE A FORMULA
                            ExpresionFormula = CadenaCalculo(contrato, elemento.item, elemento.NumeroItem, periodo);
                            ValorCalculado = CalculoFormula(ExpresionFormula, contrato, elemento.item, elemento.NumeroItem);
                        }
                        else
                        {
                            ValorCalculado = elemento.valorOriginal;
                        }                                     

                    //ACTUALIZAMOS IMPONIBLE
                    total = total + Math.Round(ValorCalculado);
                    varSistema.ActualizarValorLista(total, "systimp");
                }
            }          

            return total;
        }
        
        /// <summary>
        /// Retorna el valor de la gratificacion como si el trabajador hubiese trabajado el mes completo.
        /// </summary>
        /// <param name="contrato">Contrato asociado al trabajador.</param>
        /// <param name="periodo">Periodo o Mes del que se desea obtener la información</param>
        /// <returns></returns>
        private double GratificacionMesCompleto(string contrato, int periodo)
        {
            double total = 0, ValorCalculado = 0;
            string ExpresionFormula = "";
            bool UsaFormula = false, proporcional = false;

            List<ItemTrabajador> Imponibles = new List<ItemTrabajador>();
            Imponibles = ListaItemsGratificacion(contrato, periodo);

            //DEJAMOS TEMPORALMENTE EN 30 LOS DIAS TRABAJADOS
            varSistema.ActualizarValorLista(30, "sysdiastr");

            if (Imponibles.Count > 0)
            {
                //RECORREMOS LISTADO
                foreach (var elemento in Imponibles)
                {
                    //PREGUNTAMOS SI USA FORMULA
                    UsaFormula = UtilizaFormula(contrato, elemento.item, elemento.NumeroItem, periodo);
                    proporcional = AplicaProporcional(contrato, elemento.item, periodo);

                    //CALCULAMOS TODO COMO SI HUBIERA TRABAJADO 30 DIAS
                    if (proporcional)
                    {
                        ValorCalculado = SueldoProporcional(elemento.valorOriginal, 30);
                    }
                    else
                    {
                        if (UsaFormula)
                        {
                            //CALCULAMOS EN BASE A FORMULA
                            ExpresionFormula = CadenaCalculo(contrato, elemento.item, elemento.NumeroItem, periodo);
                            ValorCalculado = CalculoFormula(ExpresionFormula, contrato, elemento.item, elemento.NumeroItem);
                        }
                        else
                        {
                            ValorCalculado = elemento.valorOriginal;
                        }
                    }

                    //ACTUALIZAMOS IMPONIBLE
                    
                    total = total + Math.Round(ValorCalculado);
                    varSistema.ActualizarValorLista(total, "systimp");

                    if (elemento.item == "GRATIFI")
                        total = Math.Round(ValorCalculado, 0, MidpointRounding.AwayFromZero);
                                   
                }
            }

            return total;
        }

        /// <summary>
        /// Retorna la sumatoria de todos los imponibles asociados al trabajador, considerando el caso de que
        /// el trabajador tenga mas de un contrato.
        /// </summary>
        /// <param name="pRut"></param>
        /// <param name="pPeriodo"></param>
        /// <returns></returns>
        private double ImponibleMesCompletoVarios(string pRut, int pPeriodo)
        {
            double total = 0;
            string sql = "SELECT contrato FROM trabajador WHERE rut=@pRut AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlDataReader rd;
            List<string> Contratos = new List<string>();
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                Contratos.Add((string)rd["contrato"]);
                            }
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //RECORREMOS LOS CONTRATOS
            if (Contratos.Count>0)
            {
                foreach (var contrato in Contratos)
                {
                    //CALCULAMOS DATA PARA CADA CONTRATO
                    total = total + ImponibleMesCompleto(contrato, pPeriodo);
                }
            }
            return total;
        }    

        /// <summary>
        /// Obtiene o consulta en el historico, el mes en el cual el trabajador haya laburado el mes completo y obtiene el valor
        /// imponible que obtuvo en ese mes. Esto se utiliza para el calculo de liquidaciones cuando el trabajador
        /// tiene licencias en el mes.
        /// </summary>
        /// <param name="contrato">Contrato asociado al trabajador</param>
        /// <param name="Actual">Corresponde al periodo o mes que se desea consultar</param>
        /// <param name="varios">Valor booleano que indica si el trabajador tiene uno o varios contratos en el mismo periodo.</param>
        /// <returns></returns>
        public double ImponibleAnteriorGenerico(string contrato, int Actual, bool? varios = false)
        {
            string sql = "SELECT anomes FROM trabajador WHERE contrato=@pcontrato AND anomes < @periodo ORDER BY anomes desc";
            SqlCommand cmd;
            SqlDataReader rd;
            //LISTA PARA GUARDAR TODOS LOS PERIODOS ENCONTRADOS QUE CUMPLAN LA CONDICION DE LA CONSULTA
            List<int> periodos = new List<int>();
            double imponible = 0;
            double diasTr = 0;            

            //OBTENEMOS TODOS LOS PERIODOS ANTERIORES PARA BUSCAR EN CADA UNO LA SUMATORIA DE LOS IMPONIBLES
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", Actual));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS LISTA CON PERIODOS ENCONTRADOS
                                periodos.Add((int)rd["anomes"]);
                            }
                        }
                        else
                        {
                            //NO SE ENCONTRARON PERIODOS ANTERIORES PARA EL MISMO CONTRATO :-(
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //UNA VEZ LLENADA LA LISTA CON TODOS LOS PERIODOS QUE CUMPLEN LA CONDICION (DE MAYOR A MENOR)
            //VOLVEMOS A PREGUNTAR A LA BD PARA ENCONTRAR UN MES COMPLETO (30 DIAS)
            //RECORREMOS LISTA...

            if (periodos.Count > 0)
            {
                foreach (var anomes in periodos)
                {
                    //PREGUNTAR SI TRABJÓ EL MES COMPLETO
                    diasTr = Calculo.GetValueFromCalculoMensaul(contrato, anomes, "sysdiastr");                    
                    
                    //SI LOS DIAS TRABAJADOS SON 30, TRABAJÓ EL MES COMPLETO
                    if (diasTr == 30)
                    {
                        imponible = Calculo.GetValueFromCalculoMensaul(contrato, anomes, "systimp");
                        //imponible = ImponibleAnterior(contrato, anomes);                        
                        break;
                    }
                }
            }

            //SI IMPONIBLE SIGUE SIENDO 0 ES PORQUE TODOS LOS PERIODOS ANTERIORES NO SE TRABAJÓ EL MES COMPLETO
            //EN ESTE CASO EL IMPONIBLE A USAR SERA LA SUMATORIA DE LOS VALORES ORIGINALES (HABERES IMPONIBLES)
            //PARA EL PERIODO EN CURSO...
            if (imponible == 0)
            {
                //imponible = ImponibleOriginal(contrato, Actual);
                if (varios == false)
                    imponible = ImponibleMesCompleto(contrato, Actual);
                else
                    //PARA VARIOS CONTRATOS
                    imponible = ImponibleMesCompletoVarios(Persona.GetRutPersona(contrato, Actual), Actual);
            }

            //RETORNAMOS VALOR IMPONIBLE CUALQUIERA SEA EL CASO
            return imponible;
        }

        /// <summary>
        /// Retorna el valor expresado en pesos, correspondiente al valor de tope legal para el cálculo del seguro
        /// de cesantía.
        /// </summary>
        /// <param name="uf">Corresponde al valor de la uf en el periodo consultado</param>
        /// <param name="factor">Corresponde al factor de tope asignado para el periodo evaluado</param>
        /// <returns></returns>
        private double TopeSeguro(double uf, double factor)
        {
            double topeSeg = 0;
            topeSeg = uf * factor;

            return topeSeg;
        }

        /// <summary>
        /// Retorna un valor bolean que indica si el trabajador ya cumplió o no 11 años de servicio en la misma empresa.
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado al trabajador.</param>
        /// <param name="periodo">Periodo o Mes que se desea consultar.</param>
        /// <returns></returns>
        private bool CantidadPeriodos(string contrato, int periodo)
        {
            string sql = "SELECT ingreso, salida, fechasegces, tipocontrato FROM trabajador WHERE contrato = @pcontrato AND anomes=@periodo";
            int progresivo = 0;
            SqlCommand cmd;
            SqlDataReader rd;

            DateTime ingreso = DateTime.Now.Date;
            DateTime hoy = DateTime.Now.Date;
            DateTime fechaTope = DateTime.Now.Date;
            int tipocon = 0;
            bool tiene = false;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                ingreso = (DateTime)rd["fechasegces"];
                                //FECHA TOPE A 11 AÑOS
                                fechaTope = ingreso.AddYears(11); 
                                tipocon = (int)rd["tipocontrato"];

                                if (tipocon == 0)
                                {
                                    //INDEFINIDO
                                    //SI LA FECHA DE HOY ES MAYOR A LA FECHA TOPE(11 AÑOS)
                                    if (hoy > fechaTope)
                                        tiene = true;

                                    progresivo = hoy.Year - ingreso.Year;
                                }
                                else
                                {
                                    progresivo = 0;
                                }
                            }
                        }

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //return progresivo;
            return tiene;
        }

        /// <summary>
        /// Retorna un valor bolean que indica si el trabajador ya cumplió o no 11 años de servicio en la misma empresa.
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado al trabajador.</param>
        /// <param name="periodo">Periodo o Mes que se desea consultar.</param>
        /// <returns></returns>
        private bool CantidadPeriodosV2(Persona pPerson)
        {            
            int progresivo = 0;

            DateTime ingreso = DateTime.Now.Date;
            DateTime hoy = DateTime.Now.Date;
            DateTime fechaTope = DateTime.Now.Date;
            int tipocon = 0;
            bool tiene = false;

            //ingreso = (DateTime)rd["fechasegces"];
            ingreso = pPerson.FechaSeguroCes;
            //FECHA TOPE A 11 AÑOS
            fechaTope = ingreso.AddYears(11);
            tipocon = pPerson.Tipocontrato;

            if (tipocon == 0)
            {
                //INDEFINIDO
                //SI LA FECHA DE HOY ES MAYOR A LA FECHA TOPE(11 AÑOS)
                if (hoy > fechaTope)
                    tiene = true;

                progresivo = hoy.Year - ingreso.Year;
            }
            else
            {
                progresivo = 0;
            }

            //return progresivo;
            return tiene;
        }

        /// <summary>
        /// Retorna el valor en uf del tope legal para el periodo consultado
        /// </summary>
        /// <param name="periodo">Periodo o mes que se desea consultar.</param>
        /// <returns></returns>
        private double FactorTopeSeguro(int periodo)
        {
            double factor = 0;
            string sql = "SELECT topeSEC FROM valoresMes WHERE anomes = @periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //GUARDAR VALOR 
                                factor = Convert.ToDouble((decimal)rd["topeSEC"]);
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return factor;
        }        

        /// <summary>
        /// Calcula y retorna el valor correspondiente al seguro de cesantia para el caso de las personas cuyo años
        /// de servicio superan o son iguales a 11 años.
        /// </summary>
        /// <param name="TopeSeg">Corresponde al tope legal expresado en pesos para el calculo del seguro.</param>
        /// <param name="ImponibleHoy">Corresponde al imponible del trabajador del periodo evaluado.</param>
        /// <param name="item">Corresponde al codigo del item en evaluación. En este caso representa al item correspondiente al seguro de cesantía</param>
        /// <param name="impAnterior">Corresponde al imponible histórico, cuyo mes se haya trabajo en su totalidad (30 días)</param>
        /// <param name="dias">Corresponde a los dias de licencia en el mes.</param>
        /// <returns></returns>
        private double CalculoSeguroMayor(double TopeSeg, double ImponibleHoy, double impAnterior, int dias, ItemTrabajador pObjeto, double pDiasTrab)
        {
            double valorEmpleador = 0, valorEmpleadorAnterior = 0, proporcional = 0, total = 0;
            string formula = "";

            //PARA OBTENER LOS DIAS QUE TIENE EL MES
            DateTime Fecha = DateTime.Now.Date;
            int DiasMes = 0;
            Fecha = fnSistema.PrimerDiaMes(getPeriodo());
            
            DiasMes = DateTime.DaysInMonth(Fecha.Year, Fecha.Month);

            //ItemTrabajador objeto = new ItemTrabajador();
            //objeto = InformacionItem(item);            

            //GUARDAR VALOR EN VARIABLE SYS
            varSistema.ActualizarValorLista(TopeSeg, "systopeseg");

            //0.008
            varSistema.ActualizarValorLista(0.008, "syscicese");

            //OBTENER FORMULA
      
            //formula = CadenaCalculo(pContrato, objeto.item, objeto.NumeroItem, getPeriodo());
            formula = pObjeto.ExpresionFormula;
            //INDEFINIDO           
            //VALOR CON IMPONIBLE ACTUAL
            if (pDiasTrab > 0)
                valorEmpleador = CalculoFormula(formula, pObjeto.contrato, pObjeto.item, pObjeto.NumeroItem);
            else
                valorEmpleador = 0;

                //PREGUNTAMOS SI TIENE LICENCIAS
                if (dias != 0)
                {
                    //VALOR CON IMPONIBLE ANTERIOR
                    //SI LOS DIASMES ES IGUAL DIAS DE LICENCIA DEJAMOS PROPORCIONAL IGUAL IMPONIBLE ANTERIOR
                    if(dias == DiasMes)
                        proporcional = impAnterior;
                    else
                        proporcional = Math.Round((impAnterior / 30) * dias);
                    //SETEAMOS TOTAL IMPONIBLE CON VARIABLE PROPORCIONAL
                    varSistema.ActualizarValorLista(proporcional, "systimp");
                    valorEmpleadorAnterior = CalculoFormula(formula, pObjeto.contrato, pObjeto.item, pObjeto.NumeroItem);

                    total = valorEmpleador + valorEmpleadorAnterior;

                    //RESET IMPONIBLE TOTAL
                    varSistema.ActualizarValorLista(ImponibleHoy, "systimp");
                }
                else
                {
                    total = valorEmpleador;
                }        

            //RETORNAMOS TOTAL
            return total;
           
        }

        /// <summary>
        /// Calcula el seguro de cesantía. corresponde a la parte que paga el trabajador,
        /// es decir, cotización cuenta individual
        /// </summary>
        /// <param name="item">Corresponde al codigo del item en evaluacion.</param>
        /// <param name="topeseg">Corresponde al valor en pesos del tope legal para el calculo del seguro.</param>
        /// <param name="numeroItem">Corresponde al numero del item en evaluacion</param>
        /// <param name="pContrato">Numero de contrato asociado al trabajador.</param>
        /// <returns></returns>
        private double SeguroTrabajador(string item, double topeseg, int numeroItem, string pContrato, string pExpresionFormula)
        {
            string formula = "";
            double calculo = 0, porcentaje = 0.006;          

            varSistema.ActualizarValorLista(topeseg, "systopeseg");            

            //OBTENER FORMULA            
            //formula = CadenaCalculo(pContrato, item, numeroItem, getPeriodo());
            formula = pExpresionFormula;

            //ASUMIMOS QUE ES CONTRATO INDEFINIDO 
            //CALCULO EN BASE A IMPONIBLE ACTUAL
            varSistema.ActualizarValorLista(porcentaje, "syscicest");
            calculo = CalculoFormula(formula, pContrato, item, numeroItem);

            //RETORNAMOS CALCULO
            return calculo;
        }

        /// <summary>
        /// Calcula el seguro de cesantía. corresponde al aporte que realiza la empresa al Fondo solidario.
        /// </summary>
        /// <param name="item">Codigo del item en evaluación.</param>
        /// <param name="numItem">Numero del item en evaluacion</param>
        /// <param name="licencias">Nos indica si el trabajador tiene licencias en el mes evaluado.</param>
        /// <param name="imponibleActual">Corresponde al imponible obtenido del periodo en evaluacion.</param>
        /// <param name="impAnterior">Corresponde al imponible histórico en cuyo mes el trabajador a trabajado el mes completo. Se utiliza cuando hay licencias en el periodo evaluado.</param>
        /// <param name="tipoContrato">Corresponde al tipo de contrato que tiene el numero de contrato asociado.</param>
        /// <param name="dias">Corresponde a la cantidad de dias de licencias que tenga el trabajador.</param>
        /// <param name="tope">Corresponde al valor en pesos correspondiente al tope legal para calculo de seguro.</param>
        /// <param name="pContrato">Numero de contrat0 asociado al trabajador.</param>
        /// <returns></returns>
        private double SeguroEmpresaSolidario(string item,int numItem, bool licencias, double imponibleActual, double impAnterior, int tipoContrato, int dias, double tope, string pContrato)
        {
            string formula = "";
            double total = 0, SolidarioAnterior = 0, SolidarioActual = 0, proporcional = 0;

            //PARA OBTENER LOS DIAS QUE TIENE EL MES
            DateTime Fecha = DateTime.Now.Date;
            int DiasMes = 0;
            Fecha = fnSistema.PrimerDiaMes(getPeriodo());

            DiasMes = DateTime.DaysInMonth(Fecha.Year, Fecha.Month);

            //PLACZO FIJO --> fs: 0.20% && ci: 2.8%
            //INDEFINIDO --> fs:0.80% && ci:1.6%
            varSistema.ActualizarValorLista(tope, "systopeseg");
            //OBTENER EXPRESION FORMULA         
            formula = CadenaCalculo(pContrato, item, numItem, getPeriodo());

            if (tipoContrato == 0)
            {
                //SETEAMOS PORCENTAJE CORRESPONDIENTE...
                varSistema.ActualizarValorLista(0.008, "syscicese");

                //0.8% FONDO SOLIDARIO (IMP ACTUAL)
                SolidarioActual = CalculoFormula(formula, pContrato, item, numItem);
               
                //INDEFINIDO
                if (licencias)
                {
                    //CALCULO EN BASE A IMPONIBLE ANTERIOR

                    //SI DIASMES ES IGUAL A LOS DIAS DE LICENCIA EL PROPORCIONAL ES IGUAL AL IMPONIBLE ANTERIOR
                    if (dias == DiasMes)
                        proporcional = impAnterior;
                    else
                        proporcional = Math.Round((impAnterior / 30) * dias);

                    varSistema.ActualizarValorLista(proporcional, "systimp");
             
                    //SOLIDARIO (IMP ANTERIOR)
                    SolidarioAnterior = CalculoFormula(formula, pContrato, item, numItem);
                    
                    //RESET IMPONIBLE
                    varSistema.ActualizarValorLista(imponibleActual, "systimp");

                    total = SolidarioActual + SolidarioAnterior;                    
                }
                else
                {
                    total = SolidarioActual;  
                }
            }
            else if (tipoContrato == 1 || tipoContrato == 2)
            {
                //FIJO O FAENA
                //FONDO SOLIDARIO --> 0.2%
                varSistema.ActualizarValorLista(0.002, "syscicese");
                //double imponible = varSistema.ObtenerValorLista("systimp");
                //double topeSeg = varSistema.ObtenerValorLista("systopeseg");
                SolidarioActual = CalculoFormula(formula, pContrato, item, numItem);
                
                if (licencias)
                {
                    //CALCULO EN BASE A IMPONIBLE ANTERIOR
                    if (dias == DiasMes)
                        proporcional = impAnterior;
                    else
                        proporcional = Math.Round((impAnterior / 30) * dias);

                    varSistema.ActualizarValorLista(proporcional, "systimp");

                    //SOLIDARIO (IMP ANTERIOR)
                    SolidarioAnterior = CalculoFormula(formula, pContrato, item, numItem);

                    //RESET IMPONIBLE
                    varSistema.ActualizarValorLista(imponibleActual, "systimp");

                    total =  SolidarioAnterior + SolidarioActual;
                }
                else
                {
                    //NO TIENE LICENCIAS
                    total = SolidarioActual;
                }
            }

            //RETORNAMOS TOTAL
            return total;
        }

        /// <summary>
        /// Calcula el seguro de cesantia correspondiente al aporte que realiza la Empresa 
        /// a la cuenta individual.
        /// </summary>
        /// <param name="item">Codigo del item en evaluacion</param>
        /// <param name="numItem">Numero del item en evaluacion</param>
        /// <param name="licencias">Nos indica si el trabajador tuvo licencias en el mes.</param>
        /// <param name="imponibleActual">Corresponde al valor imponible obtenido en el periodo evaluado.</param>
        /// <param name="impAnterior">Corresponde al imponible historico en el cual el trabajador a trabajado el mes completo. Se utiliza en el caso de que el trabajador tenga licencias</param>
        /// <param name="tipoContrato">Corresponde al tipo de contrato asociado al trabajador.</param>
        /// <param name="dias">Corresponde a los dias de licencias.</param>
        /// <param name="tope">Corresponde al valor en peso correspondiente al tope legal establecido para el calculo del seguro.</param>
        /// <param name="pContrato">Numero de contrato asociado al trabajador.</param>
        /// <returns></returns>
        private double SeguroEmpresaIndividual(string item,int numItem, bool licencias, double imponibleActual, 
            double impAnterior,int tipoContrato, int dias, double tope, string pContrato, double pPorcInd, string pExpresionFormula)
        {
            double total = 0, individualAnterior = 0, individualActual = 0, proporcional = 0;
            string formula = "";

            //PARA OBTENER LOS DIAS QUE TIENE EL MES
            DateTime Fecha = DateTime.Now.Date;
            int DiasMes = 0;
            Fecha = fnSistema.PrimerDiaMes(getPeriodo());

            double ImpActualComp = 0;

            DiasMes = DateTime.DaysInMonth(Fecha.Year, Fecha.Month);

            varSistema.ActualizarValorLista(tope, "systopeseg");

            //OBTENEMOS EXPRESION FORMULA     
            //formula = CadenaCalculo(pContrato, item, numItem, getPeriodo());
            formula = pExpresionFormula;

            //ImpActualComp = (imponibleActual * 30) / dias;

            if (tipoContrato == 0)
            {
                //INDEFINIDO
                //CUENTIA INDIVIDUAL --> 1.6%
                varSistema.ActualizarValorLista(pPorcInd, "syscicese");
                if (varSistema.ObtenerValorLista("sysdiastr") > 0)
                    individualActual = CalculoFormula(formula, pContrato, item, numItem);
                else
                    individualActual = 0;

                double i = varSistema.ObtenerValorLista("systimp");

                if (licencias)
                {
                    //CALCULAMOS EN BASE A IMPONIBLE ANTERIOR
                    if (DiasMes == dias)
                        //proporcional = impAnterior;
                        proporcional = impAnterior;
                    else
                        proporcional = Math.Round((impAnterior / 30) * dias);

                    varSistema.ActualizarValorLista(proporcional, "systimp");
                   individualAnterior = CalculoFormula(formula, pContrato, item, numItem);

                    //ACTUALIZAMOS VALOR SYS
                    total = individualActual + individualAnterior;                   

                    //RESETEAMOS VALOR TOTAL IMPONIBLE
                    varSistema.ActualizarValorLista(imponibleActual, "systimp");
                }
                else
                {
                    //NO TIENE LICENCIAS
                    total = individualActual;
                }
                
            }
            else if (tipoContrato == 1 || tipoContrato == 2)
            {
                //FIJO O FAENA
                //2.8% CUENTA INDIVIDUAL
                varSistema.ActualizarValorLista(0.028, "syscicese");
                individualActual = CalculoFormula(formula, pContrato, item, numItem);
                if (licencias)
                {
                    //CALCULAMOS EN BASE A IMPONIBLE ANTERIOR
                    //SI DIASMES ES IGUAL A DIAS LICENCIA EL PROPORCIONAL ES IGUAL A IMPONIBLE ANTERIOR
                    if (DiasMes == dias)
                        proporcional = Math.Round(impAnterior);
                    else
                        proporcional = Math.Round((impAnterior / 30) * dias);

                    varSistema.ActualizarValorLista(proporcional, "systimp");
                    individualAnterior = CalculoFormula(formula, pContrato, item, numItem);

                    total = individualActual + individualAnterior;

                    //RESETEAMOS IMPONIBLE ACTUAL
                    varSistema.ActualizarValorLista(imponibleActual, "systimp");
                }
                else
                {
                    total = individualActual;
                }
            }

            return total;
        }

        /// <summary>
        /// Calcula el seguro de censatia como una sumatoria correspondiente 
        /// a la parte fondo solidario y parte cuenta individual.
        /// </summary>
        /// <param name="item"></param>
        /// <param name="numItem"></param>
        /// <param name="licencias"></param>
        /// <param name="imponibleActual"></param>
        /// <param name="impAnterior"></param>
        /// <param name="tipoContrato"></param>
        /// <param name="dias">Dias de licencias</param>
        /// <param name="tope"></param>
        /// <param name="pContrato"></param>
        /// <param name="pPorcFijo"></param>
        /// <param name="pPorcIndef"></param>
        /// <returns></returns>
        private double SeguroEmpresaTotal(string item, int numItem, bool licencias, double imponibleActual, double impAnterior, int tipoContrato, int dias, double tope, string pContrato, double pPorcFijo, double pPorcIndef, string pExpresionFormula)
        {
            double total = 0, individualAnterior = 0, individualActual = 0, proporcional = 0;
            string formula = "";

            //PARA OBTENER LOS DIAS QUE TIENE EL MES
            DateTime Fecha = DateTime.Now.Date;
            int DiasMes = 0;
            Fecha = fnSistema.PrimerDiaMes(getPeriodo());

            DiasMes = DateTime.DaysInMonth(Fecha.Year, Fecha.Month);

            varSistema.ActualizarValorLista(tope, "systopeseg");

            //OBTENEMOS EXPRESION FORMULA     
            //formula = CadenaCalculo(pContrato, item, numItem, getPeriodo());
            formula = pExpresionFormula;
                
            if (tipoContrato == 0)
            {
                //INDEFINIDO
                //CUENTIA INDIVIDUAL -->
                varSistema.ActualizarValorLista(pPorcIndef, "syscicese");
                if (varSistema.ObtenerValorLista("sysdiastr") > 0)
                    individualActual = CalculoFormula(formula, pContrato, item, numItem);
                else
                    individualActual = 0;

                if (licencias)
                {
                    //CALCULAMOS EN BASE A IMPONIBLE ANTERIOR
                    if (DiasMes == dias)
                        proporcional = impAnterior;
                    else
                        //Se obtiene el valor por dia para los dias de licencia
                        proporcional = Math.Round((impAnterior / 30) * dias);                        

                    varSistema.ActualizarValorLista(proporcional, "systimp");                    
                    individualAnterior = CalculoFormula(formula, pContrato, item, numItem);

                    //ACTUALIZAMOS VALOR SYS
                    total = individualActual + individualAnterior;

                    //RESETEAMOS VALOR TOTAL IMPONIBLE
                    varSistema.ActualizarValorLista(imponibleActual, "systimp");
                }
                else
                {
                    //NO TIENE LICENCIAS
                    total = individualActual;
                }

            }
            else if (tipoContrato == 1 || tipoContrato == 2)
            {
                //FIJO O FAENA
                //2.8% CUENTA INDIVIDUAL
                varSistema.ActualizarValorLista(pPorcFijo, "syscicese");
                individualActual = CalculoFormula(formula, pContrato, item, numItem);
                if (licencias)
                {
                    //CALCULAMOS EN BASE A IMPONIBLE ANTERIOR
                    //SI DIASMES ES IGUAL A DIAS LICENCIA EL PROPORCIONAL ES IGUAL A IMPONIBLE ANTERIOR
                    if (DiasMes == dias)
                        proporcional = Math.Round(impAnterior);                        
                    else
                        proporcional = Math.Round((impAnterior / 30) * dias);                        

                    varSistema.ActualizarValorLista(proporcional, "systimp");
                    individualAnterior = CalculoFormula(formula, pContrato, item, numItem);

                    total = individualActual + individualAnterior;

                    //RESETEAMOS IMPONIBLE ACTUAL
                    varSistema.ActualizarValorLista(imponibleActual, "systimp");
                }
                else
                {
                    total = individualActual;
                }
            }

            return total;
        }

        /// <summary>
        /// Monto por seguro de cesantia como si hubiera trabajado el mes completo.
        /// </summary>
        /// <param name="pElemento"></param>
        /// <param name="pImponibleNormal"></param>
        /// <param name="pImponibleA30"></param>
        /// <param name="pTipoContrato"></param>
        /// <param name="pTope"></param>
        /// <param name="pContrato"></param>
        /// <param name="pDiasTrab"></param>
        /// <param name="pMontoActual"></param>
        /// <param name="pTipo"></param>
        /// <returns></returns>
        private double SeguroEmpresaMesCompleto(ItemTrabajador pElemento, double pImponibleNormal, double pImponibleA30, int pTipoContrato, double pTope, string pContrato, double pDiasTrab, double pMontoActual, int pTipo, bool? Mayor = false)
        {
            double total = 0;
            string formula = "";    

            varSistema.ActualizarValorLista(pTope, "systopeseg");

            //OBTENEMOS EXPRESION FORMULA     
            //formula = CadenaCalculo(pContrato, pElemento.item, pElemento.NumeroItem, getPeriodo());
            formula = pElemento.ExpresionFormula;

            // -------------------------------------------------------------
            // PORCION QUE SE PAGA A LA CUENTA INDIVIDUAL Y FONDO SOLIDARIO
            // -------------------------------------------------------------

            if (pDiasTrab < 30)
            {
                varSistema.ActualizarValorLista(pImponibleA30, "systimp");
                varSistema.ActualizarValorLista(30, "sysdiastr");

                //Mas de 11 años??
                if ((bool)Mayor)
                {
                    //Solo 0.8%
                    varSistema.ActualizarValorLista(0.008, "syscicese");
                    total = CalculoFormula(formula, pContrato, pElemento.item, pElemento.NumeroItem);
                    return total;
                }

                //CUENTA INDIVIDUAL
                if (pTipo == 1)
                {

                    if (pTipoContrato == 0)
                    {
                        //CUENTA INDIVIDUAL --> 1.6%
                        varSistema.ActualizarValorLista(0.016, "syscicese");
                        total = CalculoFormula(formula, pContrato, pElemento.item, pElemento.NumeroItem);

                    }
                    else if (pTipoContrato == 1 || pTipoContrato == 2)
                    {
                        //OBRA O FAENA
                        //2.8% CUENTA INDIVIDUAL
                        varSistema.ActualizarValorLista(0.028, "syscicese");
                        total = CalculoFormula(formula, pContrato, pElemento.item, pElemento.NumeroItem);
                    }
                }
                //FONDO SOLIDARIO
                else if (pTipo == 2)
                {
                    if (pTipoContrato == 0)
                    {
                        //0.8%
                        varSistema.ActualizarValorLista(0.008, "syscicese");
                        total = CalculoFormula(formula, pContrato, pElemento.item, pElemento.NumeroItem);
                    }
                    else if (pTipoContrato == 1 || pTipoContrato == 2)
                    {
                        //OBRA O FAENA
                        //0.2%
                        varSistema.ActualizarValorLista(0.002, "syscicese");
                        total = CalculoFormula(formula, pContrato, pElemento.item, pElemento.NumeroItem);
                    }
                }

                varSistema.ActualizarValorLista(pImponibleNormal, "systimp");
                varSistema.ActualizarValorLista(pDiasTrab, "sysdiastr");
            }
            else {
                total = pMontoActual;
            }


            return total;
        }

        #endregion

        #region "SALUD"
        /// <summary>
        /// Obtiene el tipo de salud que tiene el contrato asociado
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado</param>
        /// <param name="periodo">Periodo que se desea evaluar</param>
        /// <returns></returns>
        private int TipoSalud(string contrato, int periodo)
        {
            int salud = 0;
            string sql = "SELECT salud FROM trabajador WHERE contrato=@pcontrato AND anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //GUARDAR TIPO SALUD
                                salud = (int)rd["salud"];
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return salud;
        }

        /// <summary>
        /// Devuelve el valor en pesos correspondiente al tope legal de calculo.
        /// </summary>
        /// <param name="uf">Valor en uf para periodo evaluado</param>
        /// <param name="factor">Factor de descuento en uf</param>
        /// <returns></returns>
        private double TopeSalud(double uf, double factor)
        {
            double tope = 0;
            tope = factor * uf;

            return tope;
        }

        /// <summary>
        /// Valida que un numero de entrada tenga el formato correcto
        /// </summary>
        /// <param name="value">Valor a evaluar</param>
        /// <returns></returns>
        private bool fnDecimal(double value)
        {
            string cadena = "";
            int number = 0;
            cadena = value.ToString();
            if (cadena.Length == 0) return false;

            //recorrer cadena y verificar que tenga solo una coma
            int coma = 0;
            for (int position = 0; position < cadena.Length; position++)
            {
                if (cadena[position] == ',') coma++;
            }

            if (coma > 1) return false;

            string[] subcadena = new string[2];
            if (coma == 1)
            {
                subcadena = cadena.Split(',');
                number = Convert.ToInt32(subcadena[0]);

                //SI DESPUES DE LA CADENA TIENE MAS DE DOS DIGITOS NO ES CORRECTO
                if (subcadena[1].Length > 4) return false;
                if (subcadena[0].Length > 2) return false;
                //if (number > 10) return false;
                if (subcadena[1].Length == 0) return false;
                if (subcadena[0].Length == 0) return false;

                return true;
            }
            else
            {
                //SI NO TIENE COMAS SOLO ES UN NUMERO
                if (cadena.Length > 2) return false;

              //  number = Convert.ToInt32(cadena);
              //  if (number > 10) return false;

                return true;
            }

        }

        /// <summary>
        /// Devuelve el valor en uf correspondiente al tope legal para calculo salud de un periodo especificado.
        /// </summary>
        /// <param name="periodo">Periodo a evaluar</param>
        /// <returns></returns>
        private double FactorTopeSaludAfp(int periodo)
        {
            double factor = 0;
            string sql = "SELECT topeAFP FROM valoresmes WHERE anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                factor = Convert.ToDouble((decimal)rd["topeAFP"]);
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return factor;
        }

        /// <summary>
        /// Calcula el valor de la cotizacion de salud
        /// </summary>
        /// <param name="TipoSalud">Si es fonasa o isapre.</param>
        /// <param name="TotalImponible">Corresponde al valor imponible del mes en evaluacion.</param>
        /// <param name="objeto">Objeto itemtrabajador que representa un item del trabajador.</param>
        /// <param name="contrato">Numero de contrato asociado.</param>
        /// <param name="periodo">Perido o mes que se desea evaluar</param>
        /// <param name="ValorUf">Valor en pesos de la uf para el periodo evaluado</param>
        /// <param name="tipo"></param>
        /// <param name="topeSalud">Corresponde al tope legal para el calculo de la cotizacion salud.</param>        
        private void CalculoFonasa(int TipoSalud, double TotalImponible, ItemTrabajador objeto, string pContrato, int periodo, double ValorUf, double topeSalud, double AcumSalud)
        {
            double valorSalud = 0, valorItem = 0, UfProporcional = 0;
            double valorCalculo = 0, salud = 0, finalIsapre = 0;
            string formula = "";
            bool valido = false, AplicaPorc = false;
            int tipoConvenio = 0, jubilado = 0;

            //SETEAR VARIABLE SYS            
            varSistema.ActualizarValorLista(topeSalud, "systopesalud");

            if (objeto.AplicaUf)
                tipoConvenio = 1;
            if (objeto.AplicaPesos)
                tipoConvenio = 2;
            if (objeto.AplicaPorcentaje)
                tipoConvenio = 3;

            //tipoConvenio = ItemTrabajador.PlanIsapre(pContrato, periodo, objeto.item, objeto.NumeroItem);
            //AplicaPorc = ItemTrabajador.AplicaPorcFonasa(pContrato, periodo, objeto.item, objeto.NumeroItem);

            if (objeto.AplicaPorcentaje)
                AplicaPorc = true;

            //OBTENER VALOR ITEM
            //valorItem = HaberValor(pContrato, objeto.NumeroItem, objeto.orden, periodo);
            valorItem = objeto.valorOriginal;

            if (TipoSalud == 1)
            {
                //SI APLICA PORCENTAJE CALCULAMOS EN BASE A PORCENTAJE (VALOR ORIGINAL)                

                //TIPO 1 --> uf                

                if (AplicaPorc)
                {
                    //OBTENER FORMULA                    
                    //formula = CadenaCalculo(pContrato, objeto.item, objeto.NumeroItem, periodo);
                    formula = objeto.ExpresionFormula;
                    valorSalud = CalculoFormula(formula, pContrato, objeto.item, objeto.NumeroItem);
                    //ES FONASA        

                    //GUARDAMOS VALOR EN VARIABLE SYS
                    varSistema.ActualizarValorLista(Math.Round(valorSalud), "sysfonasa");
                    varSistema.ActualizarValorLista(0, "sysisapre");

                    //valorItem = Math.Round(valorSalud);
                }
                //UF
                else if (tipoConvenio == 1)
                {
                    //VALIDAR QUE EL VALOR ITEM ES UN VALOR VALIDO
                    valido = fnDecimal(valorItem);

                    //SI RETORNA FALSE NO ES VALIDO
                    if (valido)
                    {
                        //CALCULO UF AL TOTAL DEL MES (30 DIAS)

                        valorSalud = valorItem * ValorUf;

                        //VERIFICAR QUE IMPONIBLE NO SUPERE EL TOPE
                        if (varSistema.ObtenerValorLista("systimp") > varSistema.ObtenerValorLista("systopesalud"))
                            valorCalculo = varSistema.ObtenerValorLista("systopesalud");
                        else if (varSistema.ObtenerValorLista("systimp") < varSistema.ObtenerValorLista("systopesalud"))
                            valorCalculo = varSistema.ObtenerValorLista("systimp");
                        else
                            valorCalculo = varSistema.ObtenerValorLista("systimp");

                        //DEBEMOS PROPORCIONAR IMPONIBLE SI HAY LICENCIAS
                        if (varSistema.ObtenerValorLista("sysdiaslic") > 0)
                        {
                            if(valorCalculo == varSistema.ObtenerValorLista("systopesalud"))
                                valorCalculo = (varSistema.ObtenerValorLista("sysdiastr") * valorCalculo) / 30;
                        }
                            

                        //AHORA OBTENEMOS EL 7% SALUD EN BASE A VALORCALCULO
                        salud = 0.07 * valorCalculo;

                        //SI VALOR ISAPRE ES MENOR AL 7% OBLIGATORIO MINIMO SE CONSIDERA EL 7%  (IMPONIBLE O TOPE)  

                        if (valorSalud < salud)
                            finalIsapre = salud;
                        else if (valorSalud > salud)
                            finalIsapre = valorSalud;
                        else
                            finalIsapre = valorSalud;

                        //PREGUNTAR SI TIENE LICENCIAS
                        if (varSistema.ObtenerValorLista("sysdiaslic") != 0 || varSistema.ObtenerValorLista("sysdiasaus") > 0)
                        {
                            //SI ES DISTINTO DE CERO ES PORQUE TIENE LICENCIAS!!!
                            //CALCULAMOS VALOR UF PROPORCIONAL A CANTIDAD DE DIAS TRABAJADOS
                            UfProporcional = (finalIsapre / 30) * varSistema.ObtenerValorLista("sysdiastr");
                            valorSalud = Math.Round(UfProporcional);

                            //SI EL MENOSR AL 7% CONSIDERAMOS EL 7%
                            if (valorSalud < salud)
                                valorSalud = salud;

                            //GUARDAMOS PROPORCIONAL EN VARSISTEMA
                            varSistema.ActualizarValorLista(Math.Round(valorSalud), "sysfonasa");
                            varSistema.ActualizarValorLista(0, "sysisapre");
                        }
                        else
                        {
                            //NO TIENE AUSENTISMOS DE TIPO LICENCIA  
                            if (Math.Round(valorSalud) == AcumSalud)
                            {
                                varSistema.ActualizarValorLista(0, "sysfonasa");
                                varSistema.ActualizarValorLista(0, "sysisapre");

                                valorSalud = 0;
                            }
                            else
                            {

                                varSistema.ActualizarValorLista(Math.Round(finalIsapre), "sysfonasa");
                                varSistema.ActualizarValorLista(0, "sysisapre");

                                valorSalud = finalIsapre;
                            }

                        }
                    }
                    else
                    {
                        //XtraMessageBox.Show("Verifica el valor y vuelve a intentarlo", "Informacion", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        varSistema.ActualizarValorLista(0, "sysisapre");
                        varSistema.ActualizarValorLista(0, "sysfonasa");

                        valorItem = 0;
                        //GUARDAR VALOR EN CALCULOTEMPORAL
                        //Calculo.NuevoParcial(contrato, objeto.orden, objeto.item, valorItem,0, periodo);
                        //Calculo.ActualizarCalculoItem(contrato, objeto.orden, objeto.NumeroItem, objeto.item, 0, 0, periodo);
                    }
                }
                //PESOS
                else if (tipoConvenio == 2)
                {
                    //EL VALOR INGRESADO ES EL VALOR TOTAL
                    //VERIFICAR QUE IMPONIBLE NO SUPERE EL TOPE
                    if (varSistema.ObtenerValorLista("systimp") > varSistema.ObtenerValorLista("systopesalud"))
                        valorCalculo = varSistema.ObtenerValorLista("systopesalud");
                    else if (varSistema.ObtenerValorLista("systimp") < varSistema.ObtenerValorLista("systopesalud"))
                        valorCalculo = varSistema.ObtenerValorLista("systimp");
                    else
                        valorCalculo = varSistema.ObtenerValorLista("systimp");

                    //AHORA OBTENEMOS EL 7% SALUD EN BASE A VALORCALCULO
                    salud = 0.07 * valorCalculo;

                    //SI VALOR ISAPRE ES MENOR AL 7% OBLIGATORIO MINIMO SE CONSIDERA EL 7%  (IMPONIBLE O TOPE)  
                    if (valorItem < salud)
                        finalIsapre = salud;
                    else if (valorItem > salud)
                        finalIsapre = valorItem;
                    else
                        finalIsapre = valorItem;

                    //PREGUNTAR SI TIENE LICENCIAS
                    if (varSistema.ObtenerValorLista("sysdiaslic") != 0)
                    {
                        //SI ES DISTINTO DE CERO ES PORQUE TIENE LICENCIAS!!!
                        //CALCULAMOS VALOR UF PROPORCIONAL A CANTIDAD DE DIAS TRABAJADOS
                        UfProporcional = (finalIsapre / 30) * varSistema.ObtenerValorLista("sysdiastr");
                        valorSalud = Math.Round(UfProporcional);

                        //SI ES MENOR AL 7% CONSIDERAMOS EL 7%
                        if (valorSalud < salud)
                            valorSalud = salud;

                        //GUARDAMOS PROPORCIONAL EN VARSISTEMA
                        varSistema.ActualizarValorLista(Math.Round(valorSalud), "sysfonasa");
                        varSistema.ActualizarValorLista(0, "sysisapre");
                    }
                    else
                    {
                        //NO TIENE AUSENTISMOS DE TIPO LICENCIA                                           

                        varSistema.ActualizarValorLista(Math.Round(finalIsapre), "sysfonasa");
                        varSistema.ActualizarValorLista(0, "sysisapre");

                        valorSalud = finalIsapre;
                    }
                }
                else
                {
                    //CALCULAMOS EN BASE AL 7%
                    if (varSistema.ObtenerValorLista("systimp") > topeSalud)
                        valorSalud = topeSalud;
                    else
                        valorSalud = varSistema.ObtenerValorLista("systimp");

                    valorSalud = valorSalud * 0.07;
                    varSistema.ActualizarValorLista(Math.Round(valorSalud, 0, MidpointRounding.AwayFromZero), "sysfonasa");
                    varSistema.ActualizarValorLista(0, "sysisapre");

                    //GUARDAMOS EN VALOR ORIGINAL EL VALOR DE ENTRADA.
                    valorItem = Math.Round(valorSalud, 0, MidpointRounding.AwayFromZero);
                    //Y EN CALCULADO "VALORSALUD"
                  
                }               
            }
            else if (TipoSalud >= 2)
            {
                //ES ISAPRE                        

                //CONVENIO EN UF
                if (tipoConvenio == 1)
                {
                    //VALIDAR QUE EL VALOR ITEM ES UN VALOR VALIDO
                    valido = fnDecimal(valorItem);

                    //SI RETORNA FALSE NO ES VALIDO
                    if (valido)
                    {
                        //CALCULO UF AL TOTAL DEL MES (30 DIAS)

                        valorSalud = valorItem * ValorUf;

                        //VERIFICAR QUE IMPONIBLE NO SUPERE EL TOPE
                        if (varSistema.ObtenerValorLista("systimp") > varSistema.ObtenerValorLista("systopesalud"))
                            valorCalculo = varSistema.ObtenerValorLista("systopesalud");
                        else if (varSistema.ObtenerValorLista("systimp") < varSistema.ObtenerValorLista("systopesalud"))
                            valorCalculo = varSistema.ObtenerValorLista("systimp");
                        else
                            valorCalculo = varSistema.ObtenerValorLista("systimp");

                        //DEBEMOS PROPORCIONAR IMPONIBLE SI HAY LICENCIAS
                        if (varSistema.ObtenerValorLista("sysdiaslic") > 0)
                        {
                            if(valorCalculo == varSistema.ObtenerValorLista("systopesalud"))
                                valorCalculo = (varSistema.ObtenerValorLista("sysdiastr") * valorCalculo) / 30;
                        }                      


                        //AHORA OBTENEMOS EL 7% SALUD EN BASE A VALORCALCULO
                        salud = Math.Round(0.07 * valorCalculo, MidpointRounding.AwayFromZero);

                        //SI VALOR ISAPRE ES MENOR AL 7% OBLIGATORIO MINIMO SE CONSIDERA EL 7%  (IMPONIBLE O TOPE)  

                        if (valorSalud < salud)
                            finalIsapre = salud;
                        else if (valorSalud > salud)
                            finalIsapre = valorSalud;
                        else
                            finalIsapre = valorSalud;

                        //PREGUNTAR SI TIENE LICENCIAS
                        //varSistema.ObtenerValorLista("sysdiaslic") != 0 || varSistema.ObtenerValorLista("sysdiastr") < 30
                        if (varSistema.ObtenerValorLista("sysdiaslic") != 0  || varSistema.ObtenerValorLista("sysdiastr") < 30)
                        {
                            //SI ES DISTINTO DE CERO ES PORQUE TIENE LICENCIAS!!!
                            //CALCULAMOS VALOR UF PROPORCIONAL A CANTIDAD DE DIAS TRABAJADOS
                            UfProporcional = (finalIsapre / 30) * varSistema.ObtenerValorLista("sysdiastr");
                            valorSalud = Math.Round(UfProporcional);

                            ////SI EL VALOR ES MENOR AL 7% CONSIDERAMOS EL 7%
                            if (valorSalud < salud)
                                valorSalud = salud;

                            ////GUARDAMOS PROPORCIONAL EN VARSISTEMA
                            varSistema.ActualizarValorLista(Math.Round(valorSalud), "sysisapre");
                            varSistema.ActualizarValorLista(0, "sysfonasa");

                            //varSistema.ActualizarValorLista(Math.Round(finalIsapre), "sysisapre");
                            //varSistema.ActualizarValorLista(0, "sysfonasa");

                            //valorSalud = finalIsapre;


                        }
                        else
                        {
                            //NO TIENE AUSENTISMOS DE TIPO LICENCIA   O AUSENTISMO
                            //varSistema.ActualizarValorLista(Math.Round(finalIsapre), "sysisapre");
                            //varSistema.ActualizarValorLista(0, "sysfonasa");

                            //valorSalud = finalIsapre;

                            //if (Math.Round(valorSalud) == AcumSalud)
                            //{
                            //    varSistema.ActualizarValorLista(0, "sysisapre");
                            //    varSistema.ActualizarValorLista(0, "sysfonasa");

                            //    valorSalud = 0;
                            //}
                            //else
                            //{
                                varSistema.ActualizarValorLista(Math.Round(finalIsapre, MidpointRounding.AwayFromZero), "sysisapre");
                                varSistema.ActualizarValorLista(0, "sysfonasa");

                                valorSalud = finalIsapre;
                           //}                           

                           
                        }
                    }
                    else
                    {
                        //XtraMessageBox.Show("Verifica el valor y vuelve a intentarlo", "Informacion", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        varSistema.ActualizarValorLista(0, "sysisapre");
                        varSistema.ActualizarValorLista(0, "sysfonasa");

                        valorItem = 0;                        
                    }
                }
                //CONVENIO PESOS
                else if (tipoConvenio == 2)
                {
                    
                    //EL VALOR INGRESADO ES EL VALOR TOTAL
                    //VERIFICAR QUE IMPONIBLE NO SUPERE EL TOPE
                    if (varSistema.ObtenerValorLista("systimp") > varSistema.ObtenerValorLista("systopesalud"))
                        valorCalculo = varSistema.ObtenerValorLista("systopesalud");
                    else if (varSistema.ObtenerValorLista("systimp") < varSistema.ObtenerValorLista("systopesalud"))
                        valorCalculo = varSistema.ObtenerValorLista("systimp");
                    else
                        valorCalculo = varSistema.ObtenerValorLista("systimp");

                    //AHORA OBTENEMOS EL 7% SALUD EN BASE A VALORCALCULO
                    salud = 0.07 * valorCalculo;

                    //SI VALOR ISAPRE ES MENOR AL 7% OBLIGATORIO MINIMO SE CONSIDERA EL 7%  (IMPONIBLE O TOPE)  
                    if (valorItem < salud)
                        finalIsapre = salud;
                    else if (valorItem > salud)
                        finalIsapre = valorItem;
                    else
                        finalIsapre = valorItem;

                    //PREGUNTAR SI TIENE LICENCIAS
                    if (varSistema.ObtenerValorLista("sysdiaslic") != 0)
                    {
                        //SI ES DISTINTO DE CERO ES PORQUE TIENE LICENCIAS!!!
                        //CALCULAMOS VALOR UF PROPORCIONAL A CANTIDAD DE DIAS TRABAJADOS
                        UfProporcional = (finalIsapre / 30) * varSistema.ObtenerValorLista("sysdiastr");
                        valorSalud = Math.Round(UfProporcional);

                        //VOLVEMOS A PREGUNTAR SI EL VALOR ES MENOR AL 7% CONSIDERAMOS EL 7%
                        if (valorSalud < salud)
                            valorSalud = salud;

                        //GUARDAMOS PROPORCIONAL EN VARSISTEMA
                        varSistema.ActualizarValorLista(Math.Round(valorSalud), "sysisapre");
                        varSistema.ActualizarValorLista(0, "sysfonasa");
                    }
                    else
                    {
                        //NO TIENE AUSENTISMOS DE TIPO LICENCIA                                           

                        varSistema.ActualizarValorLista(Math.Round(finalIsapre), "sysisapre");
                        varSistema.ActualizarValorLista(0, "sysfonasa");

                        valorSalud = finalIsapre;


                    }

                }
                // PORCENTAJE
                else if (tipoConvenio == 3)
                {
                    //OBTENER FORMULA                    
                    //formula = CadenaCalculo(pContrato, objeto.item, objeto.NumeroItem, periodo);
                    formula = objeto.ExpresionFormula;
                    valorSalud = CalculoFormula(formula, pContrato, objeto.item, objeto.NumeroItem);
                    //ES FONASA        

                    //GUARDAMOS VALOR EN VARIABLE SYS
                    varSistema.ActualizarValorLista(Math.Round(valorSalud), "sysfonasa");
                    varSistema.ActualizarValorLista(0, "sysisapre");
                }
                else
                {
                    //CALCULAMOS EN BASE AL 7%
                    if (varSistema.ObtenerValorLista("systimp") > topeSalud)
                        valorSalud = topeSalud;
                    else
                        valorSalud = varSistema.ObtenerValorLista("systimp");

                    valorSalud = valorSalud * 0.07;
                    varSistema.ActualizarValorLista(Math.Round(valorSalud), "sysfonasa");
                    varSistema.ActualizarValorLista(0, "sysisapre");

                    //GUARDAMOS EN VALOR ORIGINAL EL VALOR DE ENTRADA.
                    valorItem = Math.Round(valorSalud);
                }             
            }
            else if (TipoSalud == 0)
            {
                //NO UTILIZA NINGUN TIPO DE SALUD
                varSistema.ActualizarValorLista(0, "sysisapre");
                varSistema.ActualizarValorLista(0, "sysfonasa");

                valorSalud = 0;
                valorItem = 0;           
            }
            

           //ACTUALIZACION TABLA ITEMTRABAJADOR
           Calculo.ActualizarCalculoItem(pContrato, objeto.orden, objeto.NumeroItem, objeto.item, valorItem, Math.Round(valorSalud, 0, MidpointRounding.AwayFromZero), periodo);               
        
        }
    
        #endregion

        #region "IMPUESTO"
        /// <summary>
        /// Permite obtener el tramo al cual pertenece el trabajador.
        /// </summary>
        /// <param name="Tributario">Corresponde al valor tributario, base de calculo para obtener el tramo.</param>
        /// <returns></returns>
        private double TramoImpuesto(double Tributario, double pUtm)
        {
            double imponible = 0, tope = 0, inicio = 0, termino = 0, utm = 0, rebaja = 0, valorFinal = 0;
            int cantidad = 0, anomes = 0;
            imponible = varSistema.ObtenerValorLista("systimp");

            List<Impuesto> listado = new List<Impuesto>();
            Impuesto Imp = new Impuesto();
            listado = ListadoImpuesto();

            if (getPeriodo() != 0) anomes = getPeriodo();

            //OBTENER EL VALOR DE UTM
            //utm = valorUtm(anomes);
            utm = pUtm;

            if (listado.Count > 0)
            {
                //RECORRER LISTADO Y EXTRAER TOPE
                foreach (var elemento in listado)
                {
                    tope = elemento.tope;
                    if (cantidad == 0)
                    {
                        //ES EL PRIMER ELEMENTO DE LA LISTA
                        inicio = 0;
                        //TERMINO = TOPE * VALOR UTM
                        termino = tope * utm;
                      
                        if (Tributario > inicio && Tributario <= termino)
                        {
                            //SI EL VALOR DE IMPONIBLE ESTA DENTRO DE ESTE RANGO ES VALIDO
                            //AHORA BIEN, SI EL TRAMO ES 1 (EXCENTO DE IMPUESTO)
                            if (elemento.tramo == 1)
                            {
                                //EXCENTO IMPUESTO
                                Imp = null;
                                valorFinal = -1;
                            }
                            else
                            {
                                //OBTENEMOS EL FACTOR Y LA REBAJA
                                Imp = elemento;
                                break;
                            }
                        }
                    }
                    else
                    {
                        //SEGUNDO ELEMENTO EN ADELANTE
                        inicio = (listado[cantidad - 1].tope) * utm;
                        //TERMINO = TOPE * VALOR UTM;
                        termino = tope * utm;
                        if (Tributario > inicio && Tributario <= termino)
                        {
                            //SI EL VALOR DE IMPONIBLE ESTA DENTRO DE ESTE RANGO ES VALIDO
                            //AHORA BIEN, SI EL TRAMO ES 1 (EXCENTO DE IMPUESTO)
                            if (elemento.tramo == 1)
                            {
                                //EXCENTO IMPUESTO
                                Imp = null;
                                valorFinal = -1;
                            }
                            else
                            {
                                //OBTENEMOS EL FACTOR Y LA REBAJA
                                Imp = elemento;
                                break;
                            }
                        }
                    }
                    cantidad++;
                }

                //UNA VEZ RECORRIDA LA CADENA Y ENCONTRADO EL REGISTRO AL QUE PERTENECE EL IMPONIBLE
                //OBTENEMOS EL VALOR DE REBAJA Y PORCENTAJE

                if (Imp != null)
                {
                    //GUARDAR FACTOR(PORCENTAJE) Y VALOR REBAJA EN VARIABLES DE SISTEMA
                    double d = Imp.factor / 100;
                    varSistema.ActualizarValorLista((Imp.factor / 100), "sysfactorimpto");
                    //porcentaje = (Imp.factor/100) * valorTributario;     
            
                    rebaja = Imp.rebaja * utm;                    

                    //GUARDAR REBAJA
                    varSistema.ActualizarValorLista(rebaja, "sysrebimpto");

                    //valorFinal = porcentaje - rebaja;

                    return valorFinal;
                }
            }
            return valorFinal;
        }

        private double TramoImpuestov2(double Tributario, double pUtm, Hashtable pDataTramo)
        {
            double valorFinal = 0, rebaja = 0;         
            
            try
            {
                if (pDataTramo.Count > 0)
                {
                    //GUARDAR FACTOR(PORCENTAJE) Y VALOR REBAJA EN VARIABLES DE SISTEMA
                    //double d = Imp.factor / 100;
                    varSistema.ActualizarValorLista((Convert.ToDouble(pDataTramo["factor"]) / 100), "sysfactorimpto");
                    //porcentaje = (Imp.factor/100) * valorTributario;     

                    rebaja = Convert.ToDouble(pDataTramo["rebaja"]) * pUtm;

                    //GUARDAR REBAJA
                    varSistema.ActualizarValorLista(rebaja, "sysrebimpto");

                    if (Convert.ToDouble(pDataTramo["rebaja"]) == 0)
                        valorFinal = -1;
                }
                else
                {
                    valorFinal = -1;
                }
            }
            catch (Exception ex)
            {
                valorFinal = -1;
            }      

            
            return valorFinal;
        }

        /// <summary>
        /// Retorna el valor en utm correspondiente a un mes o periodo específico
        /// </summary>
        /// <param name="periodo">Periodo o mes que se desea consultar</param>
        /// <returns></returns>
        private double valorUtm(int periodo)
        {
            double valor = 0;
            string sql = "SELECT utm FROM valoresmes WHERE anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                valor = Convert.ToDouble((decimal)rd["utm"]);
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return valor;
        }

        /// <summary>
        /// Genera un listado con todos los tramos para el calculo del impuesto.
        /// </summary>
        /// <returns>Retorna un listado de objetos Impuesto</returns>
        private List<Impuesto> ListadoImpuesto()
        {
            List<Impuesto> listado = new List<Impuesto>();
            string sql = "SELECT idimptounico, tramo, tope, factor, rebaja, inicio, hasta FROM impunico order by tramo";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                listado.Add(new Impuesto()
                                {
                                    id = (int)rd["idimptounico"],
                                    tramo = (int)rd["tramo"],
                                    tope = Convert.ToDouble((decimal)rd["tope"]),
                                    factor = Convert.ToDouble((decimal)rd["factor"]),
                                    rebaja = Convert.ToDouble((decimal)rd["rebaja"]),
                                    inicio = (int)rd["inicio"],
                                    hasta = (int)rd["hasta"]
                                });
                            }
                        }

                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return listado;
        }

        /// <summary>
        /// Calcula el impuesto a la renta.
        /// </summary>
        /// <param name="obj">Representa un objeto item de trabajador con todas sus propiedades</param>
        private void CalculoImpuesto(ItemTrabajador obj, double pUtm,  double? AcumSalud=0, double? AcumSeg=0, double? AcumAfp=0, double? AcumApre=0, double? ImpGlobal = 0, bool? VariosContratos = false)
        {
            double Imponible = 0, valorTributario = 0, salud = 0, afp = 0, seguro = 0, impuesto = 0, tramo = 0;
            double saludImponible = 0, saludTope = 0, ValApv = 0;
            string formula = "";
            Hashtable dataTramo = new Hashtable();

            if ((bool)VariosContratos)
            {
                //TOTAL IMPONIBLE
                Imponible = Convert.ToDouble(ImpGlobal);

                saludImponible = Convert.ToDouble(AcumSalud);
                //7% del tope
                saludTope = 0.07 * varSistema.ObtenerValorLista("systopesalud");

                //CONSIDERAMOS EL MENOR DE LOS DOS
                if (saludImponible < saludTope)
                    salud = saludImponible;
                else if (saludTope < saludImponible)
                    salud = saludTope;
                else
                    salud = saludImponible;

                afp = Convert.ToDouble(AcumAfp);

                seguro = Convert.ToDouble(AcumSeg);

                ValApv = Convert.ToDouble(AcumApre);

                //Valor tributario
                /*Imponible acumulado - afp - seguro empleado - 7% de salud*/

                valorTributario = Imponible - (salud + afp + seguro + ValApv);
                varSistema.ActualizarValorLista(valorTributario, "systributo");

                //GUARDAR VALOR EN VARIABLE SISTEMA
                varSistema.ActualizarValorLista(valorTributario, "sysbcimpto");

                //VER EL TRAMO AL QUE PERTENECE EL TRABAJADOR (TABLA IMPUESTO )
                tramo = TramoImpuesto(varSistema.ObtenerValorLista("systributo"), pUtm);

                //OBTENER FORMULA QUE USA EL IMPUESTO            
                //formula = CadenaCalculo(obj.contrato, obj.item, obj.NumeroItem, getPeriodo());
                formula = obj.ExpresionFormula;
                impuesto = CalculoFormula(formula, obj.contrato, obj.item, obj.NumeroItem);

                if (tramo == -1) impuesto = 0;

                //GUARDAR VALOR EN VARIABLE SYS
                varSistema.ActualizarValorLista(impuesto, "sysimpto");
            }
            else
            {
                //TOTAL IMPONIBLE
                Imponible = varSistema.ObtenerValorLista("systimp");

                //VALOR SALUD IMPONIBLE
                saludImponible = varSistema.ObtenerValorLista("sysfonasa") + varSistema.ObtenerValorLista("sysisapre");

                //VALOR DESCUENTO SALUD 7% EN BASE A L TOPE
                saludTope = 0.07 * varSistema.ObtenerValorLista("systopesalud");

                //CONSIDERAMOS EL MENOR DE LOS DOS
                if (saludImponible < saludTope)
                    salud = saludImponible;
                else if (saludTope < saludImponible)
                    salud = saludTope;
                else
                    salud = saludImponible;

                afp = varSistema.ObtenerValorLista("syscomafp") + varSistema.ObtenerValorLista("sysciafp");

                seguro = varSistema.ObtenerValorLista("syscicest") + varSistema.ObtenerValorLista("sysfscest");

                ValApv = varSistema.ObtenerValorLista("sysaprevol");

                //Valor tributarrio = imponible - salud - afp - seguro - apv
                valorTributario = Imponible - (salud + afp + seguro + ValApv);
                varSistema.ActualizarValorLista(valorTributario, "systributo");

                //Entrega hashtable con datos del tramo al que pertence
                dataTramo = Calculo.GetTramoImpuesto(getPeriodo(), valorTributario);
                //setea la rebaja que se debe hacer para el impuesto
                tramo = TramoImpuestov2(valorTributario, pUtm, dataTramo);

                //GUARDAR VALOR EN VARIABLE SISTEMA
                varSistema.ActualizarValorLista(valorTributario, "sysbcimpto");

                //VER EL TRAMO AL QUE PERTENECE EL TRABAJADOR (TABLA IMPUESTO )
                //tramo = TramoImpuesto(varSistema.ObtenerValorLista("systributo"), pUtm);

                //OBTENER FORMULA QUE USA EL IMPUESTO            
                //formula = CadenaCalculo(obj.contrato, obj.item, obj.NumeroItem, getPeriodo());
                if (tramo != -1)
                {
                    formula = obj.ExpresionFormula;
                    impuesto = CalculoFormula(formula, obj.contrato, obj.item, obj.NumeroItem);
                }
                else
                {
                    impuesto = 0;
                }                

                //if (tramo == -1) impuesto = 0;

                //GUARDAR VALOR EN VARIABLE SYS
                varSistema.ActualizarValorLista(impuesto, "sysimpto");
            }
        }  

        #endregion

        #region "SEGURO INVALIDEZ"
        /// <summary>
        /// Calcula el seguro de invalidez y sobrevivencia
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado al trabajador.</param>
        /// <param name="obj">Representa un objeto de tipo Itemtrabajador, corresponde a un item</param>
        /// <param name="ImponibleActual">Corresponde al imponible obtenido del calculo del periodo evaluado.</param>
        /// <param name="PeriodoActual">Corresponde al periodo o mes en evaluacion</param>
        /// <param name="impAnterior">Corresponde al imponible historico en cuyo mes el trabajador haya laburado el mes completo. Se utiliza para el caso de meses con licencias.</param>
        private void CalculoSis(string pContrato, ItemTrabajador obj, double ImponibleActual, int PeriodoActual, double impAnterior)
        {
            double sisActual = 0, sisAnterior = 0, totalSis = 0, dias = 0, propanterior = 0;
            string cadenaFormula = "";

            //PARA OBTENER LOS DIAS QUE TIENE EL MES
            DateTime Fecha = DateTime.Now.Date;
            int DiasMes = 0;
            Fecha = fnSistema.PrimerDiaMes(PeriodoActual);
            double TopeAfp = 0;
            
            DiasMes = DateTime.DaysInMonth(Fecha.Year, Fecha.Month);

            //OBTENER FORMULA            
            //cadenaFormula = CadenaCalculo(pContrato, obj.item, obj.NumeroItem, PeriodoActual);
            cadenaFormula = obj.ExpresionFormula;
         
            if (varSistema.ObtenerValorLista("sysdiaslic") != 0)
            {
                //----------------------------------*
                // CALCULO EN BASE A DIAS LICENCIA  |
                //----------------------------------*

                TopeAfp = varSistema.ObtenerValorLista("systopeafp");
                if (varSistema.ObtenerValorLista("systimp") > varSistema.ObtenerValorLista("systopeafp"))
                {
                    if (varSistema.ObtenerValorLista("sysdiaslic") > 0)
                        varSistema.ActualizarValorLista((TopeAfp/30) * varSistema.ObtenerValorLista("sysdiastr"),"systopeafp");
                }

                //CALCULAMOS SIS CON IMPONIBLE PERIODO EN CURSO (si hay dias trabajados)  
                if (varSistema.ObtenerValorLista("sysdiastr") > 0)
                    sisActual = CalculoFormula(cadenaFormula, pContrato, obj.item, obj.NumeroItem);
                else
                    sisActual = 0;

                //VOLVEMOS A DEJAR CON EL VALOR ORIGINAL EL TOPE AFP
                varSistema.ActualizarValorLista(TopeAfp, "systopeafp");

                //DIAS LICENCIA
                //dias = varSistema.ObtenerValorLista("sysdiaslic");
                //CALCULO LOS DIAS DE LICENCIA COMO SI HUBIESE TRABAJADO EL MES COMPLETO
                dias = varSistema.ObtenerValorLista("sysdiaslic");

                //IMPONIBLE ANTERIOR ES SUPERIOR AL TOPE?                
                if (impAnterior > varSistema.ObtenerValorLista("systopeafp"))
                    impAnterior = varSistema.ObtenerValorLista("systopeafp");

                //SI DIAS DE LICENCIA ES IGUAL A LOS DIAS DEL MES
                //Dias corresponde a los dias de licencia
                if(dias == DiasMes)
                    propanterior = impAnterior;
                else
                    propanterior = (impAnterior / 30) * dias;

                //CALCULAMOS SIS PERIODO ANTERIOR
                //SETEAMOS VALOR IMPONIBLE COMO PROPANTERIOR
                varSistema.ActualizarValorLista(propanterior, "systimp");
                sisAnterior = CalculoFormula(cadenaFormula, pContrato, obj.item, obj.NumeroItem);

                //SUMAMOS AMBOS VALORES
                totalSis = sisAnterior + sisActual;

                //GUARDAMOS EN VARIABLE SYS
                varSistema.ActualizarValorLista(totalSis, "syssis");

                //RESETEAMOS VALOR TOTAL IMPONIBLE AL VALOR NORMAL
                varSistema.ActualizarValorLista(ImponibleActual, "systimp");
            }
            else
            {
                //SINO TIENE LICENCIAS

                //CALCULAMOS SIS CON IMPONIBLE PERIODO EN CURSO
                
                sisActual = CalculoFormula(cadenaFormula, pContrato, obj.item, obj.NumeroItem);
                //sisActual = 0.0141 * imponibleActual;

                //GUARDAMOS EN VARIABLE SYS
                varSistema.ActualizarValorLista(sisActual, "syssis");
            } 
        }
        
        #endregion

        #region "MANEJO DE DATOS PATRONALES"      

        /// <summary>
        /// Retorna el codigo correspondiente al tipo de afiliacion que tiene la empresa. 
        /// <para>1--> Solo inp.</para>
        /// <para>2--> Solo caja.</para>
        /// <para>3--> Caja y Mutual.</para>
        /// <para>4--> Solo Mutual.</para>
        /// </summary>     
        /// <returns></returns>
        private int AfiliacionEmpresa()
        {
            int code = 0;
            string sql = "SELECT codAfiliacion FROM empresa";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                code = (int)rd["codAfiliacion"];
                            }
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return code;
        }       

        /// <summary>
        /// Retorna el valor en % correspondiente a la cotización que se realiza en la mutual que tiene asociada 
        /// la empresa.
        /// </summary>
        /// <returns></returns>
        private double CotMutualValue()
        {
            string sql = "SELECT cotMut FROM empresa";
            SqlCommand cmd;
            SqlDataReader rd;
            double valor = 0;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {                                
                                valor = (Convert.ToDouble((decimal)rd["cotMut"])) / 100;
                            }
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return valor;
        }

        /// <summary>
        /// Retorna el valor que se descuenta por cotizacion en caja.
        /// Tomar en consideracion que las personas que están en FONASA no cotizan.
        /// </summary>
        /// <param name="codAfiliacion">Corresponde al codigo que representa el tipo de afiliacion que tiene la empresa.</param>
        /// <param name="tipoSalud">Indica si el trabajador está en fonasa o en isapre.</param>
        /// <returns></returns>
        private double CajaCompensacion(int codAfiliacion, int tipoSalud, double pTopeSalud)
        {
            double valor = 0;
            double tope = 0;

            if (varSistema.ObtenerValorLista("systimp") > pTopeSalud)
                tope = pTopeSalud;
            else
                tope = varSistema.ObtenerValorLista("systimp");

            if (codAfiliacion == 2 && tipoSalud == 1)
            {
                //SOLO CAJA
                valor = 0.006 * tope;
            }
            else if (codAfiliacion == 3 && tipoSalud == 1)
            {
                //SOLO CAJA Y MUTUAL
                valor = 0.006 * tope;
            }
            else
            {
                //NO USA CAJA COMO POR EJEMPLO EN EL CASO DE LAS ISAPRES
                valor = 0;
            }

            return Math.Round(valor);
        }      
        #endregion

        #region "LIQUIDO"

        /// <summary>
        /// Devuelve el alcance liquido
        /// </summary>
        /// <param name="SumaLeyes">Suma total de items de tipo leyes sociales</param>
        private void AlcanceLiquido(double SumaLeyes)
        {
            double totalLs = 0, liquido = 0;
            totalLs = SumaLeyes;            
            //OBTENER LIQUIDO 

            liquido = varSistema.ObtenerValorLista("systhab") - totalLs;
            if (liquido < 0)
                liquido = 0;
            
            //GUARDAR VALOR EN VARIABLE SYS
            varSistema.ActualizarValorLista(Math.Round(liquido, MidpointRounding.AwayFromZero), "sysliq");
        }

        /// <summary>
        /// Calcula el liquido a pago (Valor final a pagar al trabajador).
        /// </summary>
        private void LiquidoPago()
        {
            //OBTENER EL TOTAL DE HABERES
            double tHab = 0, tDesc = 0, pago = 0;

            tHab = varSistema.ObtenerValorLista("systhab");          
            tDesc = varSistema.ObtenerValorLista("systdctos");         

            pago = tHab - tDesc;

            if (pago < 0)
                pago = 0;

            //GUARDAR EN VARIABLE SYS
            varSistema.ActualizarValorLista(Math.Round(pago, MidpointRounding.AwayFromZero), "syspago");
        }

        /// <summary>
        /// Calculo valor original como si hubiese trabajado el mes completo.
        /// </summary>
        /// <param name="pDiasTrabOrigi">Dias trabajados originales</param>
        /// <param name="pImpOrigi">Imponible original</param>
        /// <param name="pDiastrab30">Dias trabajados a 30 dias</param>
        /// <param name="pImp30">Imponible como mes completo</param>
        /// <param name="pFormula">Expresion de formula de cálculo</param>
        /// <param name="pElemento">objeto itemtrabajador.</param>
        /// <param name="pMontoCalculado">Valor monto calculado</param>
        /// <param name="pContratoEva">Numero de contrato asociado al trabajador.</param>
        private double CalculoMesCompleto(double pDiasTrabOrigi, double pImpOrigi, double pDiastrab30, double pImp30, string pFormula, ItemTrabajador pElemento, double pMontoCalculado, string pContratoEva, double pTope)
        {
            double ValorItem = 0;

            try
            {
                if (pImpOrigi == pImp30)
                    ValorItem = pMontoCalculado;
                else
                {
                    //Valor original llevado a 30 dias o mes completo
                    if (pImp30 > pTope)
                        varSistema.ActualizarValorLista(pTope, "systimp");
                    else
                        varSistema.ActualizarValorLista(pImp30, "systimp");

                    varSistema.ActualizarValorLista(pDiastrab30, "sysdiastr");

                    ValorItem = CalculoFormula(pFormula, pContratoEva, pElemento.item, pElemento.NumeroItem);
                    //RESET IMPONIBLE
                    varSistema.ActualizarValorLista(pImpOrigi, "systimp");
                    varSistema.ActualizarValorLista(pDiasTrabOrigi, "sysdiastr");

                }
            }
            catch (Exception ex)
            {
                ValorItem = 0;                
            }

            return ValorItem;
        }
        #endregion

        #region "CALCULO GENERICO GLOBAL"      

        /// <summary>
        /// Corresponde al calculo de la liquidación del trabajador. Calcula cada item asociado al trabajador.
        /// Recibe como parametros de entrada el Numero de contrato y el periodo a evaluar.
        /// </summary>
        public void CalculoLiquidacion()
        {
            double valorCalculado = 0, valorItem = 0, diasTrabajados = 0;
            double SumaParcialImp = 0, SumaParcialExentos = 0, SumaFam = 0, sumaParcialLeyes = 0;
            double SumaParcialDctos = 0, ImpTemp = 0, topeSalud = 0, Uf = 0, FactorTope = 0;
            double SumaGlobalImp = 0;
            double DiasTrabajadosTotales = 0, DiasLicenciaTotales = 0, ImpAnterior = 0, SumaImpGrat = 0;
            double segTrabCi = 0, FactorTopSeg = 0, segFsTrab = 0, segEmpFs = 0, segEmpCi = 0, segTotal = 0;
            double TotalHaberes = 0, TopePrevision = 0, topeGratif = 0, sumaGratificacion = 0;
            double LeySanna = 0, Sobregiro = 0, ImpCompleto = 0, cal = 0, SumApv = 0;            
            int codAfiCaja = 0, typeSalud = 0, RegimenTrabajador = 0, tipoAfp = 0, ContratoTipo = 0, Sexo = 0;
            int count = 0, jubilado = 0;
            //int OrdenGrat = 0;
            DateTime Nacimiento = DateTime.Now.Date;
            bool Proporcional = false, UsaFormula = false, NumeroPeriodos = false, tieneLicencias = false;
            bool ExisteimpAnterior = false, EsIps = false;
            string ExpresionFormula = "";
            int number = 0;

            //PARA OBTENER INFORMACION ITEM
            ItemBase InfoItem;
            int NumSobre = 0;
            double SobreAnt = 0;
            double AcumulaCorrida = 0, diasLegales = 0, HorasTrabajadas = 0, ImpuestoAcumulado = 0;
            double AcumSalud = 0, AcumAfp = 0, AcumSeg = 0, AcumAprevol = 0;
            double ValorSobreGiroActual = 0, ImponibleAnteriorSuspension = 0, PorcentajeCotizacion =0;
            double PorcentajeCotizacionAfc = 0;
            int CountBuilder = 0;
            double MontoAfc = 0;
            int countImpLic = 0;

            //Solo para regimen Antiguo
            CajaPrevision RegimenAntiguo = new CajaPrevision();

            //LISTADO PARA GUARDAR DATOS SOBRE ITEMS TIPO HABER
            List<ItemTrabajador> listadoHab = new List<ItemTrabajador>();

            //CONTRATOS ASOCIADOS AL RUT
            List<string> Contratos = new List<string>();
            Contratos = Persona.GetContratos(RutTrabajador, getPeriodo());

            //Para los indices Mensuales.
            IndiceMensual Indice = new IndiceMensual();
            Indice.SetInfoMes(getPeriodo());
            
            //Uf = ValorUf(getPeriodo());
            Uf = Indice.Uf;            

            //FactorTope = FactorTopeSaludAfp(getPeriodo());            
            //FactorTopSeg = FactorTopeSeguro(getPeriodo());
            //FactorTopSeg = TopeSeguro(Uf, FactorTopSeg);
            FactorTopSeg = Indice.TopeSecPesos;            

            //PORCENTAJE LEY SANNA
            //LeySanna = Calculo.PorcentajeSanna(getPeriodo());
            LeySanna = Indice.Sanna;

            //OBTENER TOPE SALUD
            //topeSalud = TopeSalud(Uf, FactorTope);
            topeSalud = Indice.TopeAfpPesos;

            varSistema.ActualizarValorLista(Math.Round(topeSalud), "systopesalud");
            //OrdenGrat = ItemTrabajador.GetOrdenFromItem("GRATIFI");                     

            if (Contratos.Count > 0)
            {
                foreach (var contrato in Contratos)
                {
                    Persona Trabajador = new Persona();
                    Trabajador = Persona.GetInfo(contrato, getPeriodo());

                    StringBuilder BuilderSuspension = new StringBuilder();
                    
                    ImpCompleto = 0;
                    EsIps = false;

                    //Calculo.ResetCalculoParcial(contrato, getPeriodo());
                    //ExisteimpAnterior = Calculo.ExisteImpAnterior(contrato);

                    //TIPO CONTRATO
                    ContratoTipo = Trabajador.Tipocontrato;

                    //PRIMER CONTRATO LO CONSIDERAMOS COMO LIQUIDACION PARA MOSTRAR TODA LA INFO
                    listadoHab = ListadoHaberes(contrato, getPeriodo());

                    CountBuilder = listadoHab.Count == 0 ? 1 : (listadoHab[0].MaxNum) +1;
                    ImponibleAnteriorSuspension = listadoHab.Count == 0 ? 0 : (listadoHab[0].ImponibleAnterior);
                    //ImponibleAnteriorSuspension = 557500;

                    if (ImponibleAnteriorSuspension > 0)
                    {
                        if (ImponibleAnteriorSuspension > Indice.TopeAfpPesos)
                            ImponibleAnteriorSuspension = Math.Round(Indice.TopeAfpPesos);

                        PorcentajeCotizacion = Math.Round((Configuracion.ConfiguracionGlobal.PorcentajeSuspension * ImponibleAnteriorSuspension) / 100);
                    }

                    if (listadoHab.Count > 0)
                    {
                        ExisteimpAnterior = listadoHab[0].ExisteImpAnterior;
                    }

                    MontoAfc = listadoHab.Count == 0 ? 0 : (listadoHab[0].MontoAfc);
                    if (MontoAfc > 0)
                    {
                        if (MontoAfc > Indice.TopeSecPesos)
                            MontoAfc = Math.Round(Indice.TopeSecPesos);

                        PorcentajeCotizacionAfc = Math.Round((Configuracion.ConfiguracionGlobal.PorcentajeSuspension * MontoAfc) / 100);
                    }

                    //OBTENEMOS LOS DIAS TRABAJADOS
                    DiasEmpleado dias = new DiasEmpleado(contrato, getPeriodo());
                    diasTrabajados = Convert.ToDouble(dias.Calculo());
                    
                    diasLegales = dias.DiasLegalesJornada(Trabajador);                    

                    //ACUMULADOS DIAS TRABAJADOS Y DIAS DE LICENCIA TOTALES DEL MES...
                    DiasTrabajadosTotales = DiasTrabajadosTotales + diasTrabajados;
                    DiasLicenciaTotales = DiasLicenciaTotales + varSistema.ObtenerValorLista("sysdiaslic");

                    //PARA CALCULO CARGAS FAMILIARES...
                    Familiar fam = new Familiar(contrato, getPeriodo());

                    //CODIGO AFILIACION CAJA COMPENSACION
                    //codAfiCaja = AfiliacionEmpresa();                   
                    codAfiCaja = listadoHab.Count > 0 ? listadoHab[0].Afiliacion : 0;

                    typeSalud = Trabajador.codSalud;
                    jubilado = Trabajador.Jubilado;
                    RegimenTrabajador = Trabajador.Regimen;
                    Nacimiento = Trabajador.Nacimiento;

                    //SI EL TRABAJADOR TIENE LICENCIAS Y NO HAY IMPONIBLE ANTERIOR, LO CALCULAMOS...
                    //if (varSistema.ObtenerValorLista("sysdiaslic") > 0 && ExisteimpAnterior == false)
                    //    ImpAnterior = ImponibleAnteriorGenerico(contrato, getPeriodo());
                    ////SI HAY LICENCIAS PERO HAY IMPONIBLE ANTERIOR SOLO OBTENEMOS SU VALOR
                    //else if (varSistema.ObtenerValorLista("sysdiaslic") > 0 && ExisteimpAnterior)
                    //    ImpAnterior = Calculo.ConsultaImpAnterior(contrato);

                    //CALCULAR EL TOPE DE GRATIFICACION
                    //topeGratif = Calculo.GetTopeGratificacion(getPeriodo());
                    topeGratif = Math.Round((Indice.IngresoMinimo * 4.75) / 12);

                    //PARA SABER SI TIENE 11 AÑOS
                    //NumeroPeriodos = CantidadPeriodos(contrato, getPeriodo());
                    NumeroPeriodos = CantidadPeriodosV2(Trabajador);

                    countImpLic = 0;
 
                        //RECORREMOS ITEMS DE ACUERDO A CONTRATO DE LISTA...
                    if (listadoHab.Count > 0)
                    {                                              
                        foreach (var elemento in listadoHab)
                        {
                            //ItemTrabajador ItemHistorico = new ItemTrabajador();
                            //ItemHistorico = ItemTrabajador.GetInfo(elemento.item, contrato, getPeriodo(), elemento.NumeroItem);                            

                            //Informacion de item base.
                            //InfoItem = new ItemBase(elemento.item);
                            //InfoItem.Setinfo();

                            //VERIFICAR SI USA FORMULA
                            //UsaFormula = UtilizaFormula(contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                            UsaFormula = elemento.UsaFormula;
                            //UsaFormula = ItemHistorico.formula == "0" ? false: true;
                            
                            //APLICA PROPORCIONAL
                            //Proporcional = AplicaProporcional(contrato, elemento.item, getPeriodo());
                            //Proporcional = ItemHistorico.proporcional;
                            Proporcional = elemento.proporcional;

                            //VALOR ORIGINAL ITEM
                            //valorItem = HaberValor(contrato, elemento.NumeroItem, elemento.orden, getPeriodo());
                            valorItem = elemento.valorOriginal;
                            //valorItem = ItemHistorico.valorOriginal;                            

                            SumApv = 0;
                            

                            //-------------------------
                            // HABERES IMPONIBLES    //
                            //------------------------
                            if (elemento.tipo == 1)
                            {
                                //USA FORMULA?
                                if (UsaFormula)
                                {
                                    //CALCULAMOS EN BASE A FORMULA
                                    ExpresionFormula = elemento.ExpresionFormula;
                                    //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                    valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                    //GUARDAR VALOR EM VARIABLE PARA IMPONIBLE MES COMPLETO
                                    if (diasTrabajados < 30 || (ImpCompleto != SumaParcialImp) || elemento.item.ToLower().Equals("gratifi"))
                                    {
                                        //Solo aplicarlo si la formula usa imponible como variable
                                        if (ExpresionFormula.ToLower().Contains("systimp"))
                                        {
                                            //SETEAR TEMPORALMENTE EL IMPONIBLE CON EL IMPONIBLE COMPLETO
                                            varSistema.ActualizarValorLista(ImpCompleto, "systimp");
                                            varSistema.ActualizarValorLista(30, "sysdiastr");
                                            cal = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                            //RESET
                                            varSistema.ActualizarValorLista(SumaParcialImp, "systimp");
                                            varSistema.ActualizarValorLista(diasTrabajados, "sysdiastr");

                                            ImpCompleto = ImpCompleto + cal;
                                        }
                                        else
                                        {
                                            ImpCompleto = ImpCompleto + valorItem;
                                        }
                                       
                                        //valorItem = cal;
                                    }
                                    else
                                    {
                                        ImpCompleto = ImpCompleto + valorItem;
                                        //cal = valorItem;
                                    }

                                    //PROPOCIONAL?
                                    if (Proporcional)
                                        valorCalculado = SueldoProporcional(valorCalculado, diasTrabajados);

                                    if (valorItem == 0)
                                        valorItem = valorCalculado;

                                }
                                else
                                {
                                    //ES PROPORCIONAL?
                                    //CALCULAMOS EL PROPORCIONAL EN BASE AL VALOR BASE DEL ITEM
                                    if (Proporcional)
                                        valorCalculado = SueldoProporcional(valorItem, diasTrabajados);
                                    else
                                        valorCalculado = valorItem;

                                    //SUMANDO EL VALOR BASE U ORIGINAL
                                    ImpCompleto = ImpCompleto + valorItem;
                                }

                                if (elemento.item == "GRATIFI" && Contratos.Count > 1)
                                {
                                    //SI LA GRATIFICACION ES MENOR AL TOPE, SEGUIMOS CALCULANDO...                                    
                                    //SI LA GRATIFICACION ACUMULADA ES MAYOR AL TOPE LA DEJAMOS EN CERO
                                    if (sumaGratificacion > topeGratif)
                                    {
                                        valorItem = 0;
                                        valorCalculado = 0;
                                    }
                                    else
                                    {
                                        if ((sumaGratificacion + valorCalculado) > topeGratif)
                                        {
                                            valorItem = Math.Round(topeGratif - sumaGratificacion, 0, MidpointRounding.AwayFromZero);
                                            valorCalculado = Math.Round(topeGratif - sumaGratificacion, 0, MidpointRounding.AwayFromZero);
                                        }
                                        //else
                                        //{
                                        //    //valorItem = Math.Round(valorCalculado, 0, MidpointRounding.AwayFromZero);                                            
                                        //    valorItem = GratificacionMesCompleto(elemento.contrato, getPeriodo());
                                        //    varSistema.ActualizarValorLista(SumaParcialImp, "systimp");
                                        //    varSistema.ActualizarValorLista(diasTrabajados, "sysdiastr");
                                        //}                                        

                                        sumaGratificacion = sumaGratificacion + Math.Round(valorCalculado, 0, MidpointRounding.AwayFromZero);
                                    }
                                }

                                //SI SOLAMENTE ES UN CONTRATO...
                                if (elemento.item == "GRATIFI" && Contratos.Count == 1)
                                {
                                    if(diasTrabajados < 30 || (SumaParcialImp != ImpCompleto))
                                        valorItem = cal;
                                    //valorItem = GratificacionMesCompleto(contrato, getPeriodo());
                                    //varSistema.ActualizarValorLista(SumaParcialImp, "systimp");
                                    //varSistema.ActualizarValorLista(diasTrabajados, "sysdiastr");
                                    sumaGratificacion = sumaGratificacion + Math.Round(valorCalculado, MidpointRounding.AwayFromZero);
                                }

                                if (elemento.item == "HORPAG")
                                    HorasTrabajadas = valorItem;

                                if (elemento.item == "SEMCOR")
                                {
                                    //Obtener la cantidad de dias festivos encontrados.
                                    //valorItem = dias.DiasFestivosRango;
                                    //valorCalculado = Calculo.GetSemanaCorridaMonto(dias.DiasFestivosRango, AcumulaCorrida, diasLegales);
                                    if (UsaFormula)
                                    {
                                        ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                        valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);
                                        valorItem = valorCalculado;
                                    }
                                    else
                                    {
                                        valorCalculado = valorItem;
                                    }

                                    //Actualizamos dias trabajados
                                    if (HorasTrabajadas > 0)
                                    {
                                        diasTrabajados = Math.Round(HorasTrabajadas / 9, 1);
                                        varSistema.ActualizarValorLista(diasTrabajados, "sysdiastr");
                                    }
                                }

                                //SUMAMOS VALORES PARCIALES
                                if (elemento.Informativo == false)
                                {
                                    SumaParcialImp = SumaParcialImp + Math.Round(valorCalculado, MidpointRounding.AwayFromZero);
                                    SumaGlobalImp = SumaGlobalImp + Math.Round(valorCalculado, MidpointRounding.AwayFromZero);
                                }

                                //if (elemento.orden < OrdenGrat)
                                //{
                                //    if(elemento.Informativo == false)
                                //        SumaImpGrat = SumaImpGrat + Math.Round(valorCalculado);
                                //}                                   

                                //LA GRATIFICACION LA CALCULAREMOS AL FINAL DE REVISAR TODOS LOS CONTRATOS ASOCIADOS AL RUT...

                                //ACTUALIZAMOS TOTAL IMPONIBLE
                                varSistema.ActualizarValorLista(SumaParcialImp, "systimp");
                                //Imponible completo
                                varSistema.ActualizarValorLista(ImpCompleto, "systimp30");

                                //ACTUALIZAMOS VALOR EN TABLA ITEM TRABAJADOR
                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado, MidpointRounding.AwayFromZero), getPeriodo());
                                //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                            }
                            //-------------------------
                            // HABERES EXENTOS      //
                            //-------------------------
                            if (elemento.tipo == 2)
                            {
                                //USA FORMULA?
                                if (UsaFormula)
                                {
                                    //OBTENEMOS EL VALOR DESDE FORMULA MATEMATICA                                     
                                    //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                    ExpresionFormula = elemento.ExpresionFormula;
                                    valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                    //PROPORCIONAL?
                                    if (Proporcional)
                                        valorCalculado = SueldoProporcional(valorCalculado, diasTrabajados);
                                }
                                else
                                {
                                    //PROPORCIONAL
                                    if (Proporcional)
                                        valorCalculado = SueldoProporcional(valorItem, diasTrabajados);
                                    else
                                        valorCalculado = valorItem;
                                }                          

                                //SUMAMOS VALORES                
                                if(elemento.Informativo == false)
                                     SumaParcialExentos = SumaParcialExentos + Math.Round(valorCalculado);

                                //ACTUALIZAR VALOR EN VARIABLE SYS
                                varSistema.ActualizarValorLista(Math.Round(SumaParcialExentos), "systexe");

                                //ACTUALIZAMOS VALOR EN TABLA ITEMTRABAJADOR...
                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                            }
                            //-----------------------
                            // FAMILIARES          //
                            //-----------------------
                            if (elemento.tipo == 3)
                            {
                               /*
                               *  TIPOS DE ASIGNACIONES FAMILIARES:
                               *  ASIGNACION FAMILIAR SIMPLE --> ASIGFAM
                               *  ASIGNACION FAMILIAR RETROACTIVA --> ASIFAR
                               *  ASIGNACION FAMILIAR MATERNAL --> ASIGMAT
                               *  ASIGNACION FAMILIAR INVALIDEZ --> ASIGINV
                               */

                                //SYSVALORTRAMO --> VALOR TRAMO ASIGNACION FAMILIAR
                                //SYSCARGASSIMPLES --> CANTIDAD DE CARGAS SIMPLES
                                //SYSCARGASMAT --> CANTIDAD DE CARGAS MATERNALES
                                //SYSCARGASINV --> CANTIDAD DE CARGAS INVALIDAS

                                //SOLO CALCULAMOS PARA EL PRIMER CONTRATO
                                //if (count == 0)
                                // {
                                    varSistema.ActualizarValorLista(fam.GetNumCargasSimplesV2(), "syscargassimple");
                                    varSistema.ActualizarValorLista(fam.GetValTramo(), "sysvalortramo");
                                    varSistema.ActualizarValorLista(fam.GetNumCargasMaternal(), "syscargasmat");
                                    varSistema.ActualizarValorLista(fam.GetNumCargasInvalidezV2(), "syscargasinv");

                                    //LAS ASIGANCIONES FAMILIARES SE PUEDEN PAGAR DE FORMA PROPORCIONAL
                                    //A los dias trabajados
                                    //SI SE TRABAJA 25 DIAS O MAS SE PAGA EL MONTO TOTAL                            

                                    //PREGUNTAMOS SI USA FORMULA                            
                                    if (UsaFormula)
                                    {
                                        //OBTENEMOS EL VALOR DE FORMULA         
                                        ExpresionFormula = elemento.ExpresionFormula;
                                        //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                        valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                        //VALOR ITEM ES LA CANTIDAD DE CARGAS FAMILIARES
                                        if (elemento.item == "ASIGFAM")
                                            valorItem = varSistema.ObtenerValorLista("syscargassimple");
                                        if (elemento.item == "ASIGMAT")
                                            valorItem = varSistema.ObtenerValorLista("syscargasmat");
                                        if (elemento.item == "ASIGINV")
                                            valorItem = varSistema.ObtenerValorLista("syscargasinv");

                                        //SI TRABAJO MENOS DE 25 DIAS SE DEBE PAGAR PROPORCIONAL
                                        //SE CONSIDERAN LOS DIAS TRABAJADOS + LOS DIAS DE LICENCIA
                                        //if (diasTrabajados < 25)
                                        //{
                                        //    if ((diasTrabajados + varSistema.ObtenerValorLista("sysdiaslic")) > 30)
                                        //        valorCalculado = Math.Round(SueldoProporcional(valorCalculado, 30));
                                        //    else
                                        //        valorCalculado = Math.Round(SueldoProporcional(valorCalculado, (diasTrabajados + varSistema.ObtenerValorLista("sysdiaslic"))));
                                        //}

                                        //PROPORCIONAL?
                                        if (Proporcional)
                                            valorCalculado = Math.Round(SueldoProporcional(valorCalculado, (diasTrabajados + varSistema.ObtenerValorLista("sysdiaslic"))));
                                    }
                                    else
                                    {

                                        if (diasTrabajados < 25 && elemento.item != "ASIFAR")
                                        {
                                            if ((diasTrabajados + varSistema.ObtenerValorLista("sysdiaslic")) > 30)
                                                valorCalculado = Math.Round(SueldoProporcional(valorCalculado, 30));
                                            else
                                                valorCalculado = Math.Round(SueldoProporcional(valorCalculado, (diasTrabajados + varSistema.ObtenerValorLista("sysdiaslic"))));
                                        }                                            
                                        else
                                            valorCalculado = valorItem;
                                    }

                                    //SUMAMOS VALORES CALCULADOS...
                                    if(elemento.Informativo == false)
                                        SumaFam = SumaFam + Math.Round(valorCalculado);

                                    //GUARDAR VALOR EN VARIABLE SISTEMA
                                    varSistema.ActualizarValorLista(Math.Round(SumaFam), "systfam");

                                    //ACTUALIZAMOS VALOR EN TABLA ITEMTRABAJADOR
                                    Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                    //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                //}                                                              
                            }
                            //----------------------
                            // LEYES SOCIALES     //
                            //----------------------
                            if (elemento.tipo == 4)
                            {
                                //double implic2 = ImpAnterior;
                                //double impLic = Calculo.GetImpLicencia(elemento.periodo, Trabajador.Rut, elemento.contrato);

                                //SI EL TRABAJADOR TIENE LICENCIAS Y NO HAY IMPONIBLE ANTERIOR, LO CALCULAMOS...
                                if (countImpLic == 0 && varSistema.ObtenerValorLista("sysdiaslic") > 0)
                                {
                                    if (varSistema.ObtenerValorLista("sysdiaslic") > 0 && ExisteimpAnterior == false)
                                        ImpAnterior = Calculo.GetImpLicencia(elemento.periodo, Trabajador.Rut, elemento.contrato);
                                    //SI HAY LICENCIAS PERO HAY IMPONIBLE ANTERIOR SOLO OBTENEMOS SU VALOR
                                    else if (varSistema.ObtenerValorLista("sysdiaslic") > 0 && ExisteimpAnterior)
                                        ImpAnterior = Calculo.ConsultaImpAnterior(contrato);

                                    countImpLic = 1;
                                }


                                //SI HAY MAS DE UN CONTRATO...
                                if (Contratos.Count > 1)
                                {
                                    if (elemento.item == "PREVISI")
                                    {
                                        //tipoAfp = AfpEmpleado(elemento.contrato, getPeriodo());
                                        tipoAfp = Trabajador.codAfp;

                                        //TopePrevision = TopeAfp(Uf, FactorTope);
                                        TopePrevision = Indice.TopeAfpPesos;

                                        //PORCENTAJE ADMINISTRADO AFP
                                        AdminAfp(tipoAfp);

                                        //ACTUALIZAMOS VALOR TOPE AFP...
                                        varSistema.ActualizarValorLista(TopePrevision, "systopeafp");

                                        double TopeTemp = varSistema.ObtenerValorLista("systopeafp");

                                        if (varSistema.ObtenerValorLista("systimp") > varSistema.ObtenerValorLista("systopeafp"))
                                        {
                                            if (varSistema.ObtenerValorLista("sysdiaslic") > 0)
                                                varSistema.ActualizarValorLista((TopeTemp / 30) * varSistema.ObtenerValorLista("sysdiastr"), "systopeafp");

                                        }

                                        //AFP-SALUD (COTIZA LAS 2)
                                        //SI JUBILADO ES 1 (JUBILADO, NO COTIZA)
                                        if (RegimenTrabajador == 1 && jubilado != 1)
                                        {
                                            if (tipoAfp != 0)
                                            {
                                                //PREGUNTAMOS SI USA FORMULA
                                                if (UsaFormula)
                                                {
                                                    //OBTENEMOS EL VALOR DE LA FORMULA    
                                                    ExpresionFormula = elemento.ExpresionFormula;
                                                    //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());

                                                    if(diasTrabajados < 30)
                                                        valorItem = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                        30, ImpCompleto, ExpresionFormula, elemento, valorCalculado, contrato,
                                                        varSistema.ObtenerValorLista("systopeafp"));

                                                    valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                                    //VALOR ITEM BASE A MES COMPLETO
                                                    // valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);
                                                    //valorItem = valorCalculado;

                                                    if (diasTrabajados >= 30)
                                                        valorItem = valorCalculado;

                                                    if (varSistema.ObtenerValorLista("sysdiassp13") > 0 || varSistema.ObtenerValorLista("sysdiassp14") >0)
                                                    {
                                                        if (MontoAfc == 0)
                                                            SetAfp(valorItem, varSistema.ObtenerValorLista("sysdiassp13"), varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"), BuilderSuspension, elemento, CountBuilder++);
                                                        else
                                                        {
                                                            //Recalcular imponible con el imponible del mes anterior
                                                            double mo = 0;
                                                            mo = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                            30, PorcentajeCotizacionAfc, ExpresionFormula, elemento, valorCalculado, contrato,
                                                            varSistema.ObtenerValorLista("systopeafp"));

                                                            SetAfp(mo, varSistema.ObtenerValorLista("sysdiassp13"), varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"), BuilderSuspension, elemento, CountBuilder++);
                                                        } 
                                                    }

                                                }
                                                else
                                                {
                                                    valorCalculado = valorItem;
                                                }

                                                //RECALCULAR SYSCOMAFP
                                                varSistema.ActualizarValorLista(PorcentajeAdministrado(tipoAfp, varSistema.ObtenerValorLista("systimp")), "syscomafp");

                                                //VALOR CUENTA INDIVIDUAL
                                                varSistema.ActualizarValorLista(valorCalculado - varSistema.ObtenerValorLista("syscomafp"), "sysciafp");
                                            }
                                            else
                                            {
                                                //NO APLICA
                                                valorCalculado = 0;
                                                valorItem = 0;
                                            }

                                            //GUARDAR VALOR EN BD
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());

                                            AcumAfp = AcumAfp + valorCalculado;
                                           // Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                        }
                                        else
                                        {
                                            //PERTENECE AL REGIMEN ANTIGUO?
                                            /*
                                             * 4 --> Regimen Antiguo - Salud (SALUD Y PREVISION)
                                             * 5 --> Regimen Antiguo - Solo Salud (SOLO SALUD)
                                             */

                                            if (RegimenTrabajador == 4)
                                            {
                                                EsIps = true;

                                                //Obtenemos informacion regimen.
                                                RegimenAntiguo.SetInfo(contrato, getPeriodo());

                                                ExpresionFormula = FormulaSistema.GetValueFormula("FREGANT");

                                                //Pasamos a la formula el total a cotizar.                                                
                                                varSistema.ActualizarValorLista(RegimenAntiguo.TotalCotizacion, "sysporcadmafp");

                                                //El tope afp debemos cambiarlo por el tope ips
                                                double topeparcial = varSistema.ObtenerValorLista("systopeafp");
                                                varSistema.ActualizarValorLista(Indice.TopeIpsPesos, "systopeafp");

                                                if (diasTrabajados < 30)
                                                    valorItem = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                    30, ImpCompleto, ExpresionFormula, elemento, valorCalculado, elemento.contrato,
                                                    varSistema.ObtenerValorLista("systopeafp"));
                                               
                                                if (ExpresionFormula != "")
                                                    valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);
                                                else
                                                    valorCalculado = 0;

                                                if (diasTrabajados >= 30)
                                                    valorItem = valorCalculado;

                                                if (varSistema.ObtenerValorLista("sysdiassp13") > 0 || varSistema.ObtenerValorLista("sysdiassp14") > 0)
                                                {
                                                    if (MontoAfc == 0)
                                                    {
                                                        SetAfp(valorItem, varSistema.ObtenerValorLista("sysdiassp13"), varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"), BuilderSuspension, elemento, CountBuilder++, true);
                                                    }
                                                    else
                                                    {
                                                        double m = 0;
                                                        m = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                    30, PorcentajeCotizacionAfc, ExpresionFormula, elemento, valorCalculado, elemento.contrato,
                                                    varSistema.ObtenerValorLista("systopeafp"));

                                                        SetAfp(valorItem, varSistema.ObtenerValorLista("sysdiassp13"), varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"), BuilderSuspension, elemento, CountBuilder++, true);
                                                    }
                                                }                                                

                                                //valorItem = valorCalculado;
                                                varSistema.ActualizarValorLista(topeparcial, "systopeafp");

                                                //Valor en pesos comision afp (La dejamos en cero)
                                                varSistema.ActualizarValorLista(0, "syscomafp");

                                                //VALOR A PAGAR
                                                varSistema.ActualizarValorLista(valorCalculado, "sysciafp");

                                                //Guardamos porcentaje
                                                varSistema.ActualizarValorLista(RegimenAntiguo.TotalCotizacion * 100, "sysporcadmafp");


                                                //GUARDAR VALOR EN BD
                                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());

                                                AcumAfp = AcumAfp + valorCalculado;
                                            }
                                            else
                                            {
                                                //CUALQUIER OTRO CASO NO SE CALCULA PREVISION
                                                valorItem = 0;
                                                valorCalculado = 0;

                                                //GUARDAR VALOR EN BD
                                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());

                                                AcumAfp = AcumAfp + valorCalculado;
                                            }                                          
                                        }


                                        //VOLVER AL VALOR ORIGINAL EL SYSTOPEAFP
                                        varSistema.ActualizarValorLista(TopeTemp, "systopeafp");
                                    }
                                    else if (elemento.item == "SALUD")
                                    {
                                        //OBTENER EL TIPO DE SALUD (FONASA O ISAPRE O NINGUNA)
                                        //typeSalud = TipoSalud(elemento.contrato, getPeriodo());
                                        typeSalud = Trabajador.codSalud;
                                        double valcom = -1;

                                        //REGIMEN EN LOS QUE SE CALCULA SALUD
                                        // CODES --> 1, 2
                                        //CODES 4 Y 5 SON DEL REGIMEN ANTIGUO EN EL CUAL LA COTIZACION DE SALUD ESTA INCLUIDA EN LA CAJA PREVISION.
                                        if (RegimenTrabajador == 1 || RegimenTrabajador == 2)
                                        {

                                            if (diasTrabajados < 30)
                                            {
                                                double parcial = varSistema.ObtenerValorLista("systimp");
                                                double c = varSistema.ObtenerValorLista("systimp30");
                                                double aus = varSistema.ObtenerValorLista("sysdiasaus");
                                                double lic = varSistema.ObtenerValorLista("sysdiaslic");
                                                double d = varSistema.ObtenerValorLista("sysdiastr");
                                                varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                varSistema.ActualizarValorLista(0, "sysdiasaus");
                                                varSistema.ActualizarValorLista(30, "sysdiastr");
                                                //Calcular a la mitad del imponible completo
                                                varSistema.ActualizarValorLista(Math.Round(varSistema.ObtenerValorLista("systimp30")), "systimp");
                                                CalculoFonasa(typeSalud, varSistema.ObtenerValorLista("systimp"), elemento, elemento.contrato, getPeriodo(), Uf, topeSalud, 0);
                                                varSistema.ActualizarValorLista(parcial, "systimp");
                                                varSistema.ActualizarValorLista(lic, "sysdiaslic");
                                                varSistema.ActualizarValorLista(aus, "sysdiasaus");
                                                varSistema.ActualizarValorLista(d, "sysdiastr");

                                                valcom = Math.Round(varSistema.ObtenerValorLista("sysfonasa") + varSistema.ObtenerValorLista("sysisapre"));

                                            }                                            


                                            if (varSistema.ObtenerValorLista("sysdiassp13") > 0 || varSistema.ObtenerValorLista("sysdiassp14") > 0)
                                            {
                                                if (ImponibleAnteriorSuspension == 0)
                                                {
                                                    SetSalud(valcom == -1 ? Math.Round(valorCalculado) : Math.Round(valcom),
                                                   varSistema.ObtenerValorLista("sysdiassp13"),
                                                   varSistema.ObtenerValorLista("sysdiassp14"),
                                                   varSistema.ObtenerValorLista("sysdiassp15"),
                                                   BuilderSuspension, elemento, CountBuilder++);
                                                }
                                                else
                                                {
                                                    double parcial = varSistema.ObtenerValorLista("systimp");
                                                    double c = varSistema.ObtenerValorLista("systimp30");
                                                    double aus = varSistema.ObtenerValorLista("sysdiasaus");
                                                    double lic = varSistema.ObtenerValorLista("sysdiaslic");
                                                    double d = varSistema.ObtenerValorLista("sysdiastr");
                                                    varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                    varSistema.ActualizarValorLista(0, "sysdiasaus");
                                                    varSistema.ActualizarValorLista(30, "sysdiastr");
                                                    //Calcular a la mitad del imponible completo
                                                    varSistema.ActualizarValorLista(PorcentajeCotizacion, "systimp");
                                                    CalculoFonasa(typeSalud, varSistema.ObtenerValorLista("systimp"), elemento, elemento.contrato, getPeriodo(), Uf, topeSalud, 0);
                                                    varSistema.ActualizarValorLista(parcial, "systimp");
                                                    varSistema.ActualizarValorLista(lic, "sysdiaslic");
                                                    varSistema.ActualizarValorLista(aus, "sysdiasaus");
                                                    varSistema.ActualizarValorLista(d, "sysdiastr");

                                                    valcom = Math.Round(varSistema.ObtenerValorLista("sysfonasa") + varSistema.ObtenerValorLista("sysisapre"));

                                                    SetSalud(valcom,
                                                   varSistema.ObtenerValorLista("sysdiassp13"),
                                                   varSistema.ObtenerValorLista("sysdiassp14"),
                                                   varSistema.ObtenerValorLista("sysdiassp15"),
                                                   BuilderSuspension, elemento, CountBuilder++);
                                                } 
                                            }


                                            //CODE 1 --> JUBILADO, NO COTIZA
                                            //CALCULAR SALUd
                                            CalculoFonasa(typeSalud, varSistema.ObtenerValorLista("systimp"), elemento, elemento.contrato, getPeriodo(), Uf, topeSalud, AcumSalud);

                                            //SOLO PARA SUMATORIA
                                            double dss = varSistema.ObtenerValorLista("sysisapre");
                                            valorCalculado = Math.Round(varSistema.ObtenerValorLista("sysfonasa") + varSistema.ObtenerValorLista("sysisapre"), 0, MidpointRounding.AwayFromZero);

                                            AcumSalud = AcumSalud + valorCalculado;

                                        }
                                        else
                                        {
                                            valorCalculado = 0;
                                            valorItem = 0;

                                            varSistema.ActualizarValorLista(0, "sysisapre");
                                            varSistema.ActualizarValorLista(0, "sysfonasa");
                                            
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());

                                            AcumSalud = AcumSalud + valorCalculado;
                                        }
                                    }
                                    else if (elemento.item == "SCEMPLE")
                                    {
                                        //FECHA EN QUE SE CUMPLIRIAN LOS 11 AÑOS DE ACUERDO A FECHA DE SEGURO CESANTIA INGRESADA
                                        DateTime dat = Trabajador.FechaSeguroCes.AddYears(11);
                                        DateTime last = fnSistema.UltimoDiaMes(getPeriodo());

                                        if (jubilado == 0 || jubilado == 2)
                                        {
                                            //NO SE CALCULA SEGURO PARA CONTRATOS FIJOS
                                            if (Trabajador.Tipocontrato == 0)
                                            {
                                                //SE CALCULA SIEMPRE Y CUANDO NO SUPERE LOS 11 AÑOS DE ANTIGUEDAD
                                                if (NumeroPeriodos == false || dat > last)
                                                {
                                                    ExpresionFormula = elemento.ExpresionFormula;

                                                    segTrabCi = SeguroTrabajador(elemento.item, FactorTopSeg, elemento.NumeroItem, elemento.contrato, elemento.ExpresionFormula);
                                                    segFsTrab = 0;

                                                    valorCalculado = segTrabCi;

                                                    if (diasTrabajados < 30)
                                                        valorItem = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                         30, ImpCompleto, ExpresionFormula, elemento, valorCalculado, getContrato(),
                                                         varSistema.ObtenerValorLista("systopeafp"));
                                                    else
                                                        valorItem = valorCalculado;

                                                    if (varSistema.ObtenerValorLista("sysdiassp14") > 0 || varSistema.ObtenerValorLista("sysdiassp13") > 0)
                                                    {
                                                        if (ImponibleAnteriorSuspension == 0)
                                                        {
                                                            //Set scemple trabajador
                                                            SetScemple(valorItem, varSistema.ObtenerValorLista("sysdiassp13"),
                                                                varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                                BuilderSuspension, elemento, CountBuilder++);
                                                        }
                                                        else
                                                        {
                                                            double m = 0;
                                                            m = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                          30, ImponibleAnteriorSuspension, ExpresionFormula, elemento, valorCalculado, getContrato(),
                                                          varSistema.ObtenerValorLista("systopeafp"));

                                                            SetScemple(m, varSistema.ObtenerValorLista("sysdiassp13"),
                                                                varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                                BuilderSuspension, elemento, CountBuilder++);
                                                        }
                                                    }

                                                    //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());



                                                    //VARIABLES SYSTEMA
                                                    varSistema.ActualizarValorLista(segTrabCi, "syscicest");
                                                    varSistema.ActualizarValorLista(segFsTrab, "sysfscest");

                                                    ////VARIABLES SYSTEMA
                                                    //varSistema.ActualizarValorLista(segTrabCi, "syscicest");
                                                    //varSistema.ActualizarValorLista(segFsTrab, "sysfscest");

                                                    //valorCalculado = segTrabCi;
                                                    //VALOR BASE A MES COMPLETO
                                                    //valorItem = valorCalculado;
                                                    //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);

                                                    //Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                                    //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                                }
                                                else
                                                {
                                                    //NO SE CALCULA SEGURO CESANTIA EMPLEADO
                                                    varSistema.ActualizarValorLista(0, "syscicest");

                                                    //RESETEAMOS VALOR CALCULADO
                                                    valorCalculado = 0;
                                                    valorItem = 0;
                                                }

                                                AcumSeg = AcumSeg + valorCalculado;
                                            }
                                            else
                                            {
                                                //NO SE CALCULA SEGURO CESANTIA EMPLEADO
                                                varSistema.ActualizarValorLista(0, "syscicest");

                                                //RESETEAMOS VALOR CALCULADO
                                                valorCalculado = 0;
                                                valorItem = 0;

                                                AcumSeg = AcumSeg + valorCalculado;
                                            }
                                        }
                                        else
                                        {
                                            //NO SE CALCULA SEGURO CESANTIA EMPLEADO
                                            varSistema.ActualizarValorLista(0, "syscicest");

                                            //RESETEAMOS VALOR CALCULADO
                                            valorCalculado = 0;
                                            valorItem = 0;

                                            AcumSeg = AcumSeg + valorCalculado;
                                        }                                                                             

                                        //MENOR DE EDAD
                                        if (Trabajador.Nacimiento.AddYears(18) > DateTime.Now.Date)
                                        {
                                            //NO SE CALCULA SEGURO CESANTIA EMPLEADO
                                            varSistema.ActualizarValorLista(0, "syscicest");

                                            //RESETEAMOS VALOR CALCULADO
                                            valorCalculado = 0;

                                            valorItem = 0;

                                            AcumSeg = AcumSeg + valorCalculado;
                                        }

                                        Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                        //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                    }
                                    else if (elemento.item == "SCEMPRE")
                                    {
                                        if (varSistema.ObtenerValorLista("sysdiaslic") != 0)
                                            tieneLicencias = true;

                                        if (jubilado == 0 || jubilado == 2)
                                        {
                                            //SIEMPRE Y CUANDO NO SUPERE LOS 11 AÑOS DE ANTIGUEDAD
                                            //O LA FECHA DE SEGURO CESANTIA SUMADO 11 AÑOS SEA MAYOR AL ULTIMO DIA DEL MES (ES DECIR TODAVÍA NO CUMPLE LOS 11 AÑOS)
                                            DateTime dat = Trabajador.FechaSeguroCes.AddYears(11);
                                            DateTime last = fnSistema.UltimoDiaMes(getPeriodo());
                                            DateTime menorEdad = Trabajador.Nacimiento.AddYears(18);
                                            if (NumeroPeriodos == false || dat > last)
                                            {
                                                //Si la fecha en que cumple los 18 años es mayor al ultimo dia del mes en curso no se calcula seguro de cesantia
                                                if (menorEdad > last)
                                                {
                                                    varSistema.ActualizarValorLista(0, "sysfscese");
                                                    varSistema.ActualizarValorLista(0, "syscicese");
                                                }
                                                else
                                                {

                                                    if (diasTrabajados < 30)
                                                    {
                                                        valorItem = SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), ImpCompleto, ContratoTipo,
                                                        FactorTopSeg, elemento.contrato, diasTrabajados, segEmpFs, 2);
                                                        valorItem = valorItem + SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), ImpCompleto, ContratoTipo,
                                                            FactorTopSeg, elemento.contrato, diasTrabajados, segEmpCi, 1);
                                                    }

                                                    //CALCULAMOS EL PORCENTAJE COMPLETO DE LOS DOS (FONDO SOLIDARIO + FONDO INDIVIDUAL)
                                                    segTotal = SeguroEmpresaTotal(elemento.item, elemento.NumeroItem, tieneLicencias, varSistema.ObtenerValorLista("systimp"), ImpAnterior, ContratoTipo, Convert.ToInt32(varSistema.ObtenerValorLista("sysdiaslic")), FactorTopSeg, elemento.contrato, 0.03, 0.024, elemento.ExpresionFormula);

                                                    //SEGURO CESANTIA FONDO SOLIDARIO
                                                    //segEmpFs = SeguroEmpresaSolidario(elemento.item, elemento.NumeroItem, tieneLicencias, varSistema.ObtenerValorLista("systimp"), ImpAnterior, ContratoTipo, Convert.ToInt32(varSistema.ObtenerValorLista("sysdiaslic")), FactorTopSeg, elemento.contrato);
                                                    //SEGURO CESANTIA CUENTA INDIVIDUAL
                                                    segEmpCi = SeguroEmpresaIndividual(elemento.item, elemento.NumeroItem, tieneLicencias, varSistema.ObtenerValorLista("systimp"), ImpAnterior, ContratoTipo, Convert.ToInt32(varSistema.ObtenerValorLista("sysdiaslic")), FactorTopSeg, elemento.contrato, 0.016, elemento.ExpresionFormula);

                                                    segEmpFs = segTotal - segEmpCi;
                                                    valorCalculado = segEmpFs + segEmpCi;

                                                    //valorItem = valorCalculado;
                                                    //valorItem = SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), ImpCompleto, ContratoTipo,
                                                    //    FactorTopSeg, elemento.contrato, diasTrabajados, segEmpFs, 2);
                                                    //valorItem = valorItem + SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), ImpCompleto, ContratoTipo,
                                                    //    FactorTopSeg, elemento.contrato, diasTrabajados, segEmpCi, 1);

                                                    if (varSistema.ObtenerValorLista("sysdiassp13") > 0 || varSistema.ObtenerValorLista("sysdiassp14") > 0)
                                                    {
                                                        if (ImponibleAnteriorSuspension == 0)
                                                        {
                                                            SetSCempre(Math.Round(valorItem), varSistema.ObtenerValorLista("sysdiassp13"),
                                                            varSistema.ObtenerValorLista("sysdiassp14"),
                                                            varSistema.ObtenerValorLista("sysdiassp15"),
                                                            BuilderSuspension, elemento, CountBuilder++);
                                                        }
                                                        else
                                                        {
                                                            double m = 0;
                                                            m = SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), PorcentajeCotizacion, ContratoTipo,
                                                        FactorTopSeg, elemento.contrato, diasTrabajados, segEmpFs, 2);
                                                            m = m + SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), PorcentajeCotizacion, ContratoTipo,
                                                                FactorTopSeg, elemento.contrato, diasTrabajados, segEmpCi, 1);

                                                            SetSCempre(Math.Round(m), varSistema.ObtenerValorLista("sysdiassp13"),
                                                        varSistema.ObtenerValorLista("sysdiassp14"),
                                                        varSistema.ObtenerValorLista("sysdiassp15"),
                                                        BuilderSuspension, elemento, CountBuilder++);
                                                        }
                                                    }

                                                    //SETEAMOS VARIABLE SYS
                                                    varSistema.ActualizarValorLista(segEmpFs, "sysfscese");
                                                    varSistema.ActualizarValorLista(segEmpCi, "syscicese");
                                                }
                                            
                                               
                                                //VALOR BASE MES COMPLETO
                                                //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);                                               

                                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());
                                                //contadorSeguro++;
                                            }
                                            else
                                            {

                                                if (diasTrabajados < 30)
                                                {
                                                    double parcial = varSistema.ObtenerValorLista("systimp");
                                                    varSistema.ActualizarValorLista(varSistema.ObtenerValorLista("systimp30"), "systimp");
                                                    valorItem = CalculoSeguroMayor(FactorTopSeg, varSistema.ObtenerValorLista("systimp"), ImpAnterior, 0, elemento, 30);
                                                    varSistema.ActualizarValorLista(parcial, "systimp");
                                                }
                                                //SOLO SE CALCULA FONDO SOLIDARIO --> 0.008
                                                //SOLO SE CALCULA FONDO SOLIDARIO EQUIVALENTE AL 0.008 DEL IMPONIBLE (FONDO SOLIDARIO)
                                                segEmpCi = 0;
                                                segEmpFs = CalculoSeguroMayor(FactorTopSeg, varSistema.ObtenerValorLista("systimp"), ImpAnterior, Convert.ToInt32(varSistema.ObtenerValorLista("sysdiaslic")), elemento, varSistema.ObtenerValorLista("sysdiastr"));

                                               

                                                valorCalculado = segEmpFs;

                                                if (diasTrabajados >= 30)
                                                    valorItem = valorCalculado;

                                                if (varSistema.ObtenerValorLista("sysdiassp14") > 0 || varSistema.ObtenerValorLista("sysdiassp15") > 0)
                                                {
                                                    if (ImponibleAnteriorSuspension == 0)
                                                    {
                                                        SetSCempre(Math.Round(valorItem), varSistema.ObtenerValorLista("sysdiassp13"),
                                                        varSistema.ObtenerValorLista("sysdiassp14"),
                                                        varSistema.ObtenerValorLista("sysdiassp15"),
                                                        BuilderSuspension, elemento, CountBuilder++);
                                                    }
                                                    else
                                                    {
                                                        double parcial = varSistema.ObtenerValorLista("systimp");
                                                        varSistema.ActualizarValorLista(PorcentajeCotizacion, "systimp");
                                                        double mo = 0;
                                                        mo = CalculoSeguroMayor(FactorTopSeg, varSistema.ObtenerValorLista("systimp"), ImpAnterior, 0, elemento, 30);
                                                        varSistema.ActualizarValorLista(parcial, "systimp");

                                                        SetSCempre(mo, varSistema.ObtenerValorLista("sysdiassp13"),
                                                        varSistema.ObtenerValorLista("sysdiassp14"),
                                                        varSistema.ObtenerValorLista("sysdiassp15"),
                                                        BuilderSuspension, elemento, CountBuilder++);
                                                    }
                                                }

                                                //SETEAMOS VARIABLES SIS
                                                varSistema.ActualizarValorLista(segEmpCi, "syscicese");
                                                varSistema.ActualizarValorLista(segEmpFs, "sysfscese");



                                                //VALOR BASE MES COMPLETO
                                                //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);
                                                //valorItem = valorCalculado;

                                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());
                                            }
                                        }
                                        else
                                        {
                                            valorCalculado = 0;
                                            valorItem = 0;
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());
                                        }


                                       // Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                    }
                                    else if (elemento.item == "SEGINV")
                                    {
                                        //NO SE DEBE PAGAR SEGURO DE INVALIDEZ SI ES HOMBRE > 65
                                        //NO SE DEBE PAGAR SEGURO DE INVALIDEZ SI ES MUJER > 64
                                        double valcom = -1;
                                        if (jubilado == 0)
                                        {
                                            DateTime mayor = Nacimiento.AddYears(65);
                                            DateTime mayorMujer = Nacimiento.AddYears(64);
                                            if ((Sexo == 0 && (mayor <= DateTime.Now.Date)) || (Sexo == 1 && mayorMujer <= DateTime.Now.Date))
                                            {
                                                valorItem = 0;
                                                valorCalculado = 0;
                                            }
                                            else if (Trabajador.codAfp == 0)
                                            {
                                                valorItem = 0;
                                                valorCalculado = 0;
                                            }
                                            else
                                            {
                                                if (diasTrabajados < 30)
                                                {
                                                    double parcial = varSistema.ObtenerValorLista("systimp");
                                                    double pl = varSistema.ObtenerValorLista("sysdiaslic");
                                                    varSistema.ActualizarValorLista(varSistema.ObtenerValorLista("systimp30"), "systimp");
                                                    varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                    CalculoSis(elemento.contrato, elemento, varSistema.ObtenerValorLista("systimp"), getPeriodo(), ImpAnterior);
                                                    varSistema.ActualizarValorLista(pl, "sysdiaslic");
                                                    varSistema.ActualizarValorLista(parcial, "systimp");

                                                    valcom = varSistema.ObtenerValorLista("syssis");
                                                }                                        

                                                if (varSistema.ObtenerValorLista("sysdiassp14") >0 || varSistema.ObtenerValorLista("sysdiassp13") > 0)
                                                {
                                                    if (MontoAfc == 0)
                                                    {
                                                        SetSeginv(valcom == -1 ? Math.Round(valorCalculado) : Math.Round(valcom), varSistema.ObtenerValorLista("sysdiassp13"),
                                                        varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                        BuilderSuspension, elemento, CountBuilder++);
                                                    }
                                                    else
                                                    {
                                                        double parcial = varSistema.ObtenerValorLista("systimp");
                                                        double lic = varSistema.ObtenerValorLista("sysdiaslic");
                                                        varSistema.ActualizarValorLista(PorcentajeCotizacionAfc, "systimp");
                                                        varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                        CalculoSis(elemento.contrato, elemento, varSistema.ObtenerValorLista("systimp"), getPeriodo(), ImpAnterior);
                                                        varSistema.ActualizarValorLista(parcial, "systimp");
                                                        varSistema.ActualizarValorLista(lic, "sysdiaslic");

                                                        valcom = varSistema.ObtenerValorLista("syssis");

                                                        SetSeginv(valcom, varSistema.ObtenerValorLista("sysdiassp13"),
                                                        varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                        BuilderSuspension, elemento, CountBuilder++);
                                                    } 
                                                }

                                                //CALCULO SEGURO DE INVALIDEZ (valor para el mes)
                                                CalculoSis(elemento.contrato, elemento, varSistema.ObtenerValorLista("systimp"), getPeriodo(), ImpAnterior);

                                                //OBTENER EL VALOR SIS                                               
                                                valorCalculado = varSistema.ObtenerValorLista("syssis");

                                                if (valcom == -1)
                                                    valorItem = valorCalculado;
                                                else
                                                    valorItem = valcom;

                                                //VALOR BASE MES COMPLETO
                                                //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);
                                                //valorItem = valorCalculado;
                                            }
                                        }
                                        else
                                        {
                                            valorCalculado = 0;
                                            valorItem = 0;
                                        }


                                        Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());
                                       // Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                    }
                                    else if (elemento.item == "APREVOL")
                                    {
                                        //USA FORMULA?
                                        if (UsaFormula)
                                        {
                                            //OBTENEMOS EL VALOR DESDE FORMULA MATEMATICA                                     
                                            //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                            ExpresionFormula = elemento.ExpresionFormula;
                                            valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                            //PROPORCIONAL?
                                            if (Proporcional)
                                                valorCalculado = SueldoProporcional(valorCalculado, diasTrabajados);
                                        }
                                        else
                                        {
                                            //PROPORCIONAL                                            
                                            valorCalculado = valorItem;
                                        }

                                        //Si el valor supera el tope consideramos el tope
                                        if (valorCalculado > Indice.TopeAfpPesos)
                                            valorCalculado = Indice.TopeAfpPesos;

                                        AcumAprevol = AcumAprevol + valorCalculado;

                                        //Sumar Apv
                                        SumApv = SumApv + Math.Round(valorCalculado);

                                        //Guardar valor en variable sistema
                                        varSistema.ActualizarValorLista(SumApv, "sysaprevol");

                                        //GUARDAMOS VALOR EN BD
                                        Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                    }
                                    else if (elemento.item == "IMPUEST")
                                    {                                      

                                        //CALCULAR VALOR IMPUESTO
                                        CalculoImpuesto(elemento, Indice.Utm, AcumSalud, AcumSeg, AcumAfp, AcumAprevol,SumaGlobalImp, true);

                                        //OBTENER EL VALOR DESDE SYS VARIABLE                                      
                                        valorCalculado = varSistema.ObtenerValorLista("sysimpto");
                                        if (count > 0)
                                            valorCalculado = valorCalculado - ImpuestoAcumulado;

                                        //restar impuesto de liquidacion anterior
                                        ImpuestoAcumulado = ImpuestoAcumulado + valorCalculado;

                                        //VALOR BASE A MES COMPLETO
                                        //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);
                                        valorItem = valorCalculado;

                                        Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());
                                     //   Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                    }
                                    else
                                    {
                                        if (UsaFormula)
                                        {
                                            //OBTENER EL VALOR DE LA FORMULA                                           
                                            //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                            ExpresionFormula = elemento.ExpresionFormula;
                                            valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                            //GUARDAMOS VALOR EN BD
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                        }
                                        else
                                        {
                                            valorCalculado = valorItem;

                                            //GUARDAMOS VALOR EN BD
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                        }
                                       // Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                    }                        

                                }
                                else
                                {
                                    //CALCULAMOS DE FORMA NORMAL TODOS LOS ITEMS...
                                    if (elemento.item == "PREVISI")
                                    {
                                        //tipoAfp = AfpEmpleado(elemento.contrato, getPeriodo());
                                   
                                        tipoAfp = Trabajador.codAfp;

                                        //TopePrevision = TopeAfp(Uf, FactorTope);
                                        TopePrevision = Indice.TopeAfpPesos;

                                        //PORCENTAJE ADMINISTRADO AFP
                                        AdminAfp(tipoAfp);

                                        //ACTUALIZAMOS VALOR TOPE AFP...                                        
                                        varSistema.ActualizarValorLista(Math.Round(TopePrevision), "systopeafp");

                                        double TopeTemp = varSistema.ObtenerValorLista("systopeafp");

                                        if (varSistema.ObtenerValorLista("systimp") > varSistema.ObtenerValorLista("systopeafp"))
                                        {
                                            //Proporciona tope
                                            if (varSistema.ObtenerValorLista("sysdiaslic") > 0)
                                                varSistema.ActualizarValorLista((TopeTemp / 30) * varSistema.ObtenerValorLista("sysdiastr"), "systopeafp");

                                        }                                        

                                        //AFP-SALUD (COTIZA LAS 2)
                                        //SI JUBILADO ES 1 (JUBILADO, NO COTIZA)
                                        if (RegimenTrabajador == 1 && jubilado != 1)
                                        {
                                            if (tipoAfp != 0)
                                            {
                                                //PREGUNTAMOS SI USA FORMULA
                                                if (UsaFormula)
                                                {
                                                    //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                                    ExpresionFormula = elemento.ExpresionFormula;

                                                    //valor a mes completo (Solo si trabajó menos de 30 dias..)
                                                  
                                                    if (diasTrabajados < 30)
                                                        valorItem = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                        30, ImpCompleto, ExpresionFormula, elemento, valorCalculado, elemento.contrato,
                                                        varSistema.ObtenerValorLista("systopeafp"));                                                  

                                                    //OBTENEMOS EL VALOR DE LA FORMULA                                                    
                                               
                                                    valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                                    //valorItem = valorCalculado;
                                                    if (diasTrabajados >= 30)
                                                        valorItem = valorCalculado;

                                                    if (MontoAfc == 0)
                                                        SetAfp(valorItem, varSistema.ObtenerValorLista("sysdiassp13"), varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"), BuilderSuspension, elemento, CountBuilder++);
                                                    else
                                                    {
                                                        //Recalcular imponible con el imponible del mes anterior
                                                        double mo = 0;
                                                        
                                                        mo = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                        30, PorcentajeCotizacionAfc, ExpresionFormula, elemento, valorCalculado, contrato,
                                                        varSistema.ObtenerValorLista("systopeafp"));

                                                        SetAfp(Math.Round(mo), varSistema.ObtenerValorLista("sysdiassp13"), varSistema.ObtenerValorLista("sysdiassp14"),
                                                       varSistema.ObtenerValorLista("sysdiassp15"),
                                                       BuilderSuspension, elemento, CountBuilder++);
                                                    }                                                   

                                                }
                                                else
                                                {
                                                    valorCalculado = valorItem;
                                                }

                                                //RECALCULAR SYSCOMAFP
                                                varSistema.ActualizarValorLista(PorcentajeAdministrado(tipoAfp, varSistema.ObtenerValorLista("systimp")), "syscomafp");

                                                //VALOR CUENTA INDIVIDUAL
                                                varSistema.ActualizarValorLista(valorCalculado - varSistema.ObtenerValorLista("syscomafp"), "sysciafp");                                                

                                            }
                                            else
                                            {
                                                //NO APLICA
                                                valorCalculado = 0;
                                                valorItem = 0;
                                            }

                                            //GUARDAR VALOR EN BD
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                            //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                        }
                                        else
                                        {

                                            //PERTENECE AL REGIMEN ANTIGUO?
                                            /*
                                             * 4 --> Regimen Antiguo - Salud (SALUD Y PREVISION)
                                             * 5 --> Regimen Antiguo - Solo Salud (SOLO SALUD)
                                             */

                                            if (RegimenTrabajador == 4)
                                            {
                                                EsIps = true;

                                                //Obtenemos informacion regimen.
                                                RegimenAntiguo.SetInfo(elemento.contrato, getPeriodo());

                                                //Pasamos a la formula el total a cotizar.                                                
                                                varSistema.ActualizarValorLista(RegimenAntiguo.TotalCotizacion, "sysporcadmafp");

                                                //El tope afp debemos cambiarlo por el tope ips
                                                double topeparcial = varSistema.ObtenerValorLista("systopeafp");
                                                varSistema.ActualizarValorLista(Indice.TopeIpsPesos, "systopeafp");

                                                ExpresionFormula = FormulaSistema.GetValueFormula("FREGANT");

                                                if (diasTrabajados < 30)
                                                    valorItem = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                    30, ImpCompleto, ExpresionFormula, elemento, valorCalculado, elemento.contrato,
                                                    varSistema.ObtenerValorLista("systopeafp"));


                                                if (ExpresionFormula != "")
                                                    valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);
                                                else
                                                    valorCalculado = 0;

                                                //valorItem = valorCalculado;
                                                //double d = varSistema.ObtenerValorLista("systimp30");
                                                if (diasTrabajados >= 30)
                                                    valorItem = valorCalculado;                                                

                                                //reset tope afp
                                                varSistema.ActualizarValorLista(topeparcial, "systopeafp");

                                                //Si es regimen antiguo y se acoge a suslab
                                                //consideramos los valores finales como los si hubiese estado a imponible mes completo.
                                                // if (Trabajador.Suslab == 13 || Trabajador.Suslab == 14)
                                                //     valorCalculado = valorItem;

                                                if (MontoAfc == 0)
                                                    SetAfp(valorItem, varSistema.ObtenerValorLista("sysdiassp13"), varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"), BuilderSuspension, elemento, CountBuilder++, true);
                                                else
                                                {
                                                    //Recalcular imponible con el imponible del mes anterior
                                                    double mo = 0;

                                                    mo = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                    30, PorcentajeCotizacionAfc, ExpresionFormula, elemento, valorCalculado, contrato,
                                                    varSistema.ObtenerValorLista("systopeafp"));

                                                    SetAfp(Math.Round(mo), varSistema.ObtenerValorLista("sysdiassp13"), varSistema.ObtenerValorLista("sysdiassp14"),
                                                   varSistema.ObtenerValorLista("sysdiassp15"),
                                                   BuilderSuspension, elemento, CountBuilder++, true);
                                                }                                                

                                                //Valor en pesos comision afp (La dejamos en cero)
                                                varSistema.ActualizarValorLista(0, "syscomafp");

                                                //VALOR A PAGAR
                                                varSistema.ActualizarValorLista(valorCalculado, "sysciafp");

                                                //Guardamos porcentaje
                                                varSistema.ActualizarValorLista(RegimenAntiguo.TotalCotizacion * 100, "sysporcadmafp");


                                                //GUARDAR VALOR EN BD
                                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                            }
                                            else
                                            {
                                                //CUALQUIER OTRO CASO NO SE CALCULA PREVISION
                                                valorItem = 0;
                                                valorCalculado = 0;

                                                //GUARDAR VALOR EN BD
                                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                            }                                            
                                            //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                        }


                                        //VOLVER AL VALOR ORIGINAL EL SYSTOPEAFP
                                        varSistema.ActualizarValorLista(TopeTemp, "systopeafp");
                                    }
                                    else if (elemento.item == "SALUD")
                                    {
                                        //OBTENER EL TIPO DE SALUD (FONASA O ISAPRE O NINGUNA)
                                        //typeSalud = TipoSalud(elemento.contrato, getPeriodo());
                                        typeSalud = Trabajador.codSalud;
                                        double valcom = -1;

                                        //REGIMEN EN LOS QUE SE CALCULA SALUD
                                        // CODES --> 1, 2
                                        //CODES 4 Y 5 SON DEL REGIMEN ANTIGUO EN EL CUAL LA COTIZACION DE SALUD ESTA INCLUIDA EN LA CAJA PREVISION.
                                        if (RegimenTrabajador == 1 || RegimenTrabajador == 2)
                                        {
                                            //CODE 1 --> JUBILADO, NO COTIZA
                                            //CALCULAR SALUd                                           

                                            if (diasTrabajados < 30 || (varSistema.ObtenerValorLista("sysdiassp13") > 0 || varSistema.ObtenerValorLista("sysdiassp14") >0 || varSistema.ObtenerValorLista("sysdiassp15") > 0 ))
                                            {
                                                double parcial = varSistema.ObtenerValorLista("systimp");
                                                double c = varSistema.ObtenerValorLista("systimp30");
                                                double aus = varSistema.ObtenerValorLista("sysdiasaus");
                                                double lic = varSistema.ObtenerValorLista("sysdiaslic");
                                                double d = varSistema.ObtenerValorLista("sysdiastr");
                                                varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                varSistema.ActualizarValorLista(0, "sysdiasaus");
                                                varSistema.ActualizarValorLista(30, "sysdiastr");
                                                //Calcular a la mitad del imponible completo
                                                varSistema.ActualizarValorLista(Math.Round(varSistema.ObtenerValorLista("systimp30")), "systimp");
                                                CalculoFonasa(typeSalud, varSistema.ObtenerValorLista("systimp"), elemento, elemento.contrato, getPeriodo(), Uf, topeSalud, 0);
                                                varSistema.ActualizarValorLista(parcial, "systimp");
                                                varSistema.ActualizarValorLista(lic, "sysdiaslic");
                                                varSistema.ActualizarValorLista(aus, "sysdiasaus");
                                                varSistema.ActualizarValorLista(d, "sysdiastr");

                                                valcom = Math.Round(varSistema.ObtenerValorLista("sysfonasa") + varSistema.ObtenerValorLista("sysisapre"));

                                               
                                            }

                                            //calcom =-1, Mes completo sin suspensiones
                                           

                                            if (ImponibleAnteriorSuspension == 0)
                                            {
                                                SetSalud(valcom == -1 ? Math.Round(valorCalculado) : Math.Round(valcom),
                                               varSistema.ObtenerValorLista("sysdiassp13"),
                                               varSistema.ObtenerValorLista("sysdiassp14"),
                                               varSistema.ObtenerValorLista("sysdiassp15"),
                                               BuilderSuspension, elemento, CountBuilder++);
                                            }
                                            else
                                            {
                                                double parcial = varSistema.ObtenerValorLista("systimp");
                                                double c = varSistema.ObtenerValorLista("systimp30");
                                                double aus = varSistema.ObtenerValorLista("sysdiasaus");
                                                double lic = varSistema.ObtenerValorLista("sysdiaslic");
                                                double d = varSistema.ObtenerValorLista("sysdiastr");
                                                varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                varSistema.ActualizarValorLista(0, "sysdiasaus");
                                                varSistema.ActualizarValorLista(30, "sysdiastr");
                                                //Calcular a la mitad del imponible completo
                                                varSistema.ActualizarValorLista(PorcentajeCotizacion, "systimp");
                                                CalculoFonasa(typeSalud, varSistema.ObtenerValorLista("systimp"), elemento, elemento.contrato, getPeriodo(), Uf, topeSalud, 0);
                                                varSistema.ActualizarValorLista(parcial, "systimp");
                                                varSistema.ActualizarValorLista(lic, "sysdiaslic");
                                                varSistema.ActualizarValorLista(aus, "sysdiasaus");
                                                varSistema.ActualizarValorLista(d, "sysdiastr");

                                                valcom = Math.Round(varSistema.ObtenerValorLista("sysfonasa") + varSistema.ObtenerValorLista("sysisapre"));

                                                SetSalud(valcom,
                                               varSistema.ObtenerValorLista("sysdiassp13"),
                                               varSistema.ObtenerValorLista("sysdiassp14"),
                                               varSistema.ObtenerValorLista("sysdiassp15"),
                                               BuilderSuspension, elemento, CountBuilder++);
                                            }


                                            CalculoFonasa(typeSalud, varSistema.ObtenerValorLista("systimp"), elemento, elemento.contrato, getPeriodo(), Uf, topeSalud, AcumSalud);

                                            //SOLO PARA SUMATORIA
                                            valorCalculado = Math.Round(varSistema.ObtenerValorLista("sysfonasa") + varSistema.ObtenerValorLista("sysisapre"));

                                            AcumSalud = AcumSalud + valorCalculado;


                                        }
                                        else
                                        {
                                            valorCalculado = 0;
                                            valorItem = 0;

                                            varSistema.ActualizarValorLista(0, "sysisapre");
                                            varSistema.ActualizarValorLista(0, "sysfonasa");

                                            //Calculo.ActualizarCalculoItem(contrato, objeto.orden, objeto.NumeroItem, objeto.item, valorItem, Math.Round(valorSalud, 0, MidpointRounding.AwayFromZero), );
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                        }                                                                            
                                       
                                    }
                                    else if (elemento.item == "SCEMPLE")
                                    {
                                        //SI ES MENOR DE EDAD NO SE CALCULA

                                        //FECHA EN QUE SE CUMPLIRIAN LOS 11 AÑOS DE ACUERDO A FECHA DE SEGURO CESANTIA INGRESADA
                                        DateTime dat = Trabajador.FechaSeguroCes.AddYears(11);
                                        DateTime last = fnSistema.UltimoDiaMes(getPeriodo());
                                        double mont = -1;

                                        //SI ES CONTRATO FIJO NO SE CALCULA SEGURO TRABAJADOR
                                        // 0 --> INDICA QUE ES INDEFINIDO.
                                        if (jubilado == 0 || jubilado == 2)
                                        {
                                            if (Trabajador.Tipocontrato == 0)
                                            {
                                                //SE CALCULA SIEMPRE Y CUANDO NO SUPERE LOS 11 AÑOS DE ANTIGUEDAD                                        
                                                //Y FECHA DE SEGURO DE CESANTIA SUMANDO 11 AÑOS NO SUPERE EL ULTIMO DIA DEL MES EN CURSO
                                                if (NumeroPeriodos == false || dat > last)
                                                {
                                                    ExpresionFormula = elemento.ExpresionFormula;

                                                    varSistema.ActualizarValorLista(0.006, "systopeseg");

                                                    segTrabCi = SeguroTrabajador(elemento.item, FactorTopSeg, elemento.NumeroItem, elemento.contrato, elemento.ExpresionFormula);
                                                    segFsTrab = 0;

                                                    valorCalculado = segTrabCi;

                                                    if (diasTrabajados < 30)
                                                        valorItem = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                         30, ImpCompleto, ExpresionFormula, elemento, valorCalculado, getContrato(),
                                                         varSistema.ObtenerValorLista("systopeafp"));
                                                    else
                                                        valorItem = valorCalculado;
                                                    

                                                    if (varSistema.ObtenerValorLista("sysdiassp14") > 0 || varSistema.ObtenerValorLista("sysdiassp13") > 0)
                                                    {
                                                        if (ImponibleAnteriorSuspension == 0)
                                                        {
                                                            //Set scemple trabajador
                                                            SetScemple(valorItem, varSistema.ObtenerValorLista("sysdiassp13"),
                                                                varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                                BuilderSuspension, elemento, CountBuilder++);
                                                        }
                                                        else
                                                        {
                                                            double m = 0;
                                                            m = CalculoMesCompleto(diasTrabajados, SumaParcialImp,
                                                          30, ImponibleAnteriorSuspension, ExpresionFormula, elemento, valorCalculado, getContrato(),
                                                          varSistema.ObtenerValorLista("systopeafp"));

                                                            SetScemple(m, varSistema.ObtenerValorLista("sysdiassp13"),
                                                                varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                                BuilderSuspension, elemento, CountBuilder++);
                                                        }
                                                    }
                                                    //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());

                                                    //SEGURO CESANTIA INDIVIDUAL TRABAJADOR
                                                                        
                                                    


                                                    //VARIABLES SYSTEMA
                                                    varSistema.ActualizarValorLista(segTrabCi, "syscicest");
                                                    varSistema.ActualizarValorLista(segFsTrab, "sysfscest");                                                    

                                                    //VALOR DE ITEM A MES COMPLETO
                                                    //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);  
                                                   
                                                    //valorItem = valorCalculado;

                                                    //Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                                    //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                                }
                                                else
                                                {
                                                    //NO SE CALCULA SEGURO CESANTIA EMPLEADO
                                                    varSistema.ActualizarValorLista(0, "syscicest");

                                                    //RESETEAMOS VALOR CALCULADO
                                                    valorCalculado = 0;
                                                    valorItem = 0;
                                                }
                                            }
                                            else
                                            {
                                                //NO SE CALCULA SEGURO CESANTIA EMPLEADO
                                                varSistema.ActualizarValorLista(0, "syscicest");

                                                //RESETEAMOS VALOR CALCULADO
                                                valorCalculado = 0;
                                                valorItem = 0;
                                            }
                                        }
                                        else
                                        {
                                            //NO SE CALCULA SEGURO CESANTIA EMPLEADO
                                            varSistema.ActualizarValorLista(0, "syscicest");

                                            //RESETEAMOS VALOR CALCULADO
                                            valorCalculado = 0;
                                            valorItem = 0;
                                        }                                                                            

                                        //MENOR DE EDAD
                                        if (Trabajador.Nacimiento.AddYears(18) > DateTime.Now.Date)
                                        {
                                            //NO SE CALCULA SEGURO CESANTIA EMPLEADO
                                            varSistema.ActualizarValorLista(0, "syscicest");

                                            //RESETEAMOS VALOR CALCULADO
                                            valorCalculado = 0;

                                            valorItem = 0;
                                        }                                        

                                        Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                       // Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);

                                    }
                                    else if (elemento.item == "SCEMPRE")
                                    {                                       
                                        if (varSistema.ObtenerValorLista("sysdiaslic") != 0)
                                            tieneLicencias = true;

                                        if (jubilado == 0 || jubilado == 2)
                                        {
                                            //SIEMPRE Y CUANDO NO SUPERE LOS 11 AÑOS DE ANTIGUEDAD
                                            //Y FECHA DE SEGURO DE CESANTIA SUMANDO 11 AÑOS NO SUPERE EL ULTIMO DIA DEL MES EN CURSO

                                            //FECHA EN QUE SE CUMPLIRIAN LOS 11 AÑOS DE ACUERDO A FECHA DE SEGURO CESANTIA INGRESADA
                                            DateTime dat = Trabajador.FechaSeguroCes.AddYears(11);
                                            DateTime last = fnSistema.UltimoDiaMes(getPeriodo());
                                            DateTime menorEdad = Trabajador.Nacimiento.AddYears(18);
                                            
                                          

                                            if (NumeroPeriodos == false || dat > last)
                                            {
                                                //Si la fecha en que cumple los 18 años es mayor al ultimo dia del mes en curso no se calcula seguro de cesantia
                                                if (menorEdad > last)
                                                {
                                                    //SETEAMOS VARIABLE SYS
                                                    varSistema.ActualizarValorLista(0, "sysfscese");
                                                    varSistema.ActualizarValorLista(0, "syscicese");
                                                }
                                                else
                                                {

                                                    if (diasTrabajados < 30)
                                                    {
                                                        valorItem = SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), ImpCompleto, ContratoTipo,
                                                        FactorTopSeg, elemento.contrato, diasTrabajados, segEmpFs, 2);
                                                        valorItem = valorItem + SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), ImpCompleto, ContratoTipo,
                                                            FactorTopSeg, elemento.contrato, diasTrabajados, segEmpCi, 1);
                                                    }

                                                    //Si la persona es menor de edad < 18 años no se paga seguro de cesantía

                                                    //SEGURO CESANTIA FONDO SOLIDARIO
                                                    //segEmpFs = SeguroEmpresaSolidario(elemento.item, elemento.NumeroItem, tieneLicencias, varSistema.ObtenerValorLista("systimp"), ImpAnterior, ContratoTipo, Convert.ToInt32(varSistema.ObtenerValorLista("sysdiaslic")), FactorTopSeg, elemento.contrato);
                                                    //CALCULAMOS EL PORCENTAJE COMPLETO DE LOS DOS (FONDO SOLIDARIO + FONDO INDIVIDUAL)
                                                    segTotal = SeguroEmpresaTotal(elemento.item, elemento.NumeroItem, tieneLicencias, varSistema.ObtenerValorLista("systimp"), ImpAnterior, ContratoTipo, Convert.ToInt32(varSistema.ObtenerValorLista("sysdiaslic")), FactorTopSeg, elemento.contrato, 0.03, 0.024, elemento.ExpresionFormula);

                                                    //SEGURO CESANTIA CUENTA INDIVIDUAL
                                                    segEmpCi = SeguroEmpresaIndividual(elemento.item, elemento.NumeroItem, tieneLicencias, varSistema.ObtenerValorLista("systimp"), ImpAnterior, ContratoTipo, Convert.ToInt32(varSistema.ObtenerValorLista("sysdiaslic")), FactorTopSeg, elemento.contrato, 0.016, elemento.ExpresionFormula);

                                                    segEmpFs = segTotal - segEmpCi;
                                                    valorCalculado = segEmpFs + segEmpCi;
                                                    //valorItem = valorCalculado;  

                                                    if (diasTrabajados >= 30)
                                                        valorItem = valorCalculado;


                                                    if (varSistema.ObtenerValorLista("sysdiassp13") > 0 || varSistema.ObtenerValorLista("sysdiassp14") > 0)
                                                    {
                                                        if (ImponibleAnteriorSuspension == 0)
                                                        {
                                                            SetSCempre(Math.Round(valorItem), varSistema.ObtenerValorLista("sysdiassp13"),
                                                        varSistema.ObtenerValorLista("sysdiassp14"),
                                                        varSistema.ObtenerValorLista("sysdiassp15"),
                                                        BuilderSuspension, elemento, CountBuilder++);
                                                        }
                                                        else
                                                        {
                                                            double m = 0;
                                                            m = SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), PorcentajeCotizacion, ContratoTipo,
                                                        FactorTopSeg, elemento.contrato, diasTrabajados, segEmpFs, 2);
                                                            m = m + SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), PorcentajeCotizacion, ContratoTipo,
                                                                FactorTopSeg, elemento.contrato, diasTrabajados, segEmpCi, 1);

                                                            SetSCempre(Math.Round(m), varSistema.ObtenerValorLista("sysdiassp13"),
                                                        varSistema.ObtenerValorLista("sysdiassp14"),
                                                        varSistema.ObtenerValorLista("sysdiassp15"),
                                                        BuilderSuspension, elemento, CountBuilder++);
                                                        }
                                                    }


                                                    //SETEAMOS VARIABLE SYS
                                                    varSistema.ActualizarValorLista(segEmpFs, "sysfscese");
                                                    varSistema.ActualizarValorLista(segEmpCi, "syscicese");
                                                }

                                                
                                              
                                                //VALOR BASE A MES COMPLETO
                                                //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);
                                                

                                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());

                                                //contadorSeguro++;
                                            }
                                            else
                                            {

                                                if (diasTrabajados < 30)
                                                {
                                                    double parcial = varSistema.ObtenerValorLista("systimp");
                                                    
                                                    varSistema.ActualizarValorLista(varSistema.ObtenerValorLista("systimp30"), "systimp");
                                                    valorItem = CalculoSeguroMayor(FactorTopSeg, varSistema.ObtenerValorLista("systimp"), ImpAnterior, 0,  elemento, 30);
                                                    varSistema.ActualizarValorLista(parcial, "systimp");
                                                }

                                                //SOLO SE CALCULA FONDO SOLIDARIO --> 0.008
                                                //SOLO SE CALCULA FONDO SOLIDARIO EQUIVALENTE AL 0.008 DEL IMPONIBLE (FONDO SOLIDARIO)
                                                segEmpCi = 0;
                                                segEmpFs = CalculoSeguroMayor(FactorTopSeg, varSistema.ObtenerValorLista("systimp"), ImpAnterior, Convert.ToInt32(varSistema.ObtenerValorLista("sysdiaslic")), elemento, varSistema.ObtenerValorLista("sysdiastr"));

                                                valorCalculado = segEmpFs;
                                                //valorItem = valorCalculado;
                                                //valorItem = SeguroEmpresaMesCompleto(elemento, varSistema.ObtenerValorLista("systimp"), ImpCompleto, ContratoTipo,
                                                //  FactorTopSeg, elemento.contrato, diasTrabajados, segEmpFs, 1, true);

                                                

                                                if (diasTrabajados >= 30)
                                                    valorItem = valorCalculado;

                                                if (varSistema.ObtenerValorLista("sysdiassp14") > 0 || varSistema.ObtenerValorLista("sysdiassp15") > 0)
                                                {
                                                    if (ImponibleAnteriorSuspension == 0)
                                                    {
                                                        SetSCempre(Math.Round(valorItem), varSistema.ObtenerValorLista("sysdiassp13"),
                                                        varSistema.ObtenerValorLista("sysdiassp14"),
                                                        varSistema.ObtenerValorLista("sysdiassp15"),
                                                        BuilderSuspension, elemento, CountBuilder++);
                                                    }
                                                    else
                                                    {
                                                        double parcial = varSistema.ObtenerValorLista("systimp");
                                                        varSistema.ActualizarValorLista(PorcentajeCotizacion, "systimp");
                                                        double mo = 0;
                                                        mo = CalculoSeguroMayor(FactorTopSeg, varSistema.ObtenerValorLista("systimp"), ImpAnterior, 0, elemento, 30);
                                                        varSistema.ActualizarValorLista(parcial, "systimp");

                                                        SetSCempre(Math.Round(mo), varSistema.ObtenerValorLista("sysdiassp13"),
                                                        varSistema.ObtenerValorLista("sysdiassp14"),
                                                        varSistema.ObtenerValorLista("sysdiassp15"),
                                                        BuilderSuspension, elemento, CountBuilder++);

                                                    }
                                                }

                                                //SETEAMOS VARIABLES SIS
                                                varSistema.ActualizarValorLista(segEmpCi, "syscicese");
                                                varSistema.ActualizarValorLista(segEmpFs, "sysfscese");


                                                //VALOR BASE A MES COMPLETO
                                                //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);


                                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());
                                            }
                                        }
                                        else
                                        {
                                            valorCalculado = 0;
                                            valorItem = 0;
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());
                                        }                                       

                                        //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                    }
                                    else if (elemento.item == "SEGINV")
                                    {
                                        //NO SE DEBE PAGAR SEGURO DE INVALIDEZ SI ES HOMBRE > 65
                                        //NO SE DEBE PAGAR SEGURO DE INVALIDEZ SI ES MUJER > 64
                                        //SI NO COTIZA EN AFP NO SE CALCULO SEGURO DE INVALIDEZ
                                        double valcom = -1;
                                        if (jubilado == 0)
                                        {
                                            DateTime mayor = Nacimiento.AddYears(65);
                                            DateTime mayorMujer = Nacimiento.AddYears(60);
                                            if ((Sexo == 0 && (mayor <= DateTime.Now.Date)) || (Sexo == 1 && mayorMujer <= DateTime.Now.Date))
                                            {
                                                valorItem = 0;
                                                valorCalculado = 0;
                                            }
                                            //NO COTIZA...
                                            else if (Trabajador.Regimen != 1)
                                            {
                                                valorItem = 0;
                                                valorCalculado = 0;
                                            }
                                            else
                                            {
                                                //CALCULO SEGURO DE INVALIDEZ
                                                if (diasTrabajados < 30)
                                                {
                                                    double parcial = varSistema.ObtenerValorLista("systimp");
                                                    double pl = varSistema.ObtenerValorLista("sysdiaslic");
                                                    varSistema.ActualizarValorLista(varSistema.ObtenerValorLista("systimp30"), "systimp");
                                                    varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                    CalculoSis(elemento.contrato, elemento, varSistema.ObtenerValorLista("systimp"), getPeriodo(), ImpAnterior);
                                                    varSistema.ActualizarValorLista(parcial, "systimp");
                                                    varSistema.ActualizarValorLista(pl, "sysdiaslic");

                                                    valcom = varSistema.ObtenerValorLista("syssis");
                                                }
        
                                                //VALOR ITEM A MES COMPLETO
                                                //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);                                           

                                                if (MontoAfc == 0)
                                                {
                                                    SetSeginv(valcom == -1 ? Math.Round(valorCalculado) : Math.Round(valcom), varSistema.ObtenerValorLista("sysdiassp13"),
                                                    varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                    BuilderSuspension, elemento, CountBuilder++);
                                                }
                                                else
                                                {
                                                    double parcial = varSistema.ObtenerValorLista("systimp");
                                                    double lic = varSistema.ObtenerValorLista("sysdiaslic");
                                                    varSistema.ActualizarValorLista(PorcentajeCotizacionAfc, "systimp");
                                                    varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                    CalculoSis(elemento.contrato, elemento, varSistema.ObtenerValorLista("systimp"), getPeriodo(), ImpAnterior);
                                                    varSistema.ActualizarValorLista(parcial, "systimp");
                                                    varSistema.ActualizarValorLista(lic, "sysdiaslic");


                                                    valcom = varSistema.ObtenerValorLista("syssis");

                                                    SetSeginv(valcom, varSistema.ObtenerValorLista("sysdiassp13"),
                                                    varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                    BuilderSuspension, elemento, CountBuilder++);
                                                }

                                                if (valcom == -1)
                                                    valorItem = valorCalculado;
                                                else
                                                    valorItem = valcom;

                                                CalculoSis(elemento.contrato, elemento, varSistema.ObtenerValorLista("systimp"), getPeriodo(), ImpAnterior);

                                                //OBTENER EL VALOR SIS                                           
                                                valorCalculado = varSistema.ObtenerValorLista("syssis");

                                            }
                                        }
                                        else
                                        {
                                            valorCalculado = 0;
                                            valorItem = 0;
                                        }                                       

                                        Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());
                                        //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                    }
                                    else if (elemento.item == "APREVOL")
                                    {
                                        //USA FORMULA?
                                        if (UsaFormula)
                                        {
                                            //OBTENEMOS EL VALOR DESDE FORMULA MATEMATICA                                     
                                            //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                            ExpresionFormula = elemento.ExpresionFormula;
                                            valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                            //PROPORCIONAL?
                                            if (Proporcional)
                                                valorCalculado = SueldoProporcional(valorCalculado, diasTrabajados);
                                        }
                                        else
                                        {
                                            //PROPORCIONAL                                            
                                            valorCalculado = valorItem;
                                        }

                                        //Si el valor supera el tope consideramos el tope
                                        if (valorCalculado > Indice.TopeAfpPesos)
                                            valorCalculado = Indice.TopeAfpPesos;

                                        //Sumar Apv
                                        SumApv = SumApv + Math.Round(valorCalculado);

                                        //Guardar valor en variable sistema
                                        varSistema.ActualizarValorLista(SumApv, "sysaprevol");                                                                                                          

                                        //GUARDAMOS VALOR EN BD
                                        Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                    }
                                    else if (elemento.item == "IMPUEST")
                                    {                                        

                                        //CALCULAR VALOR IMPUESTO
                                        CalculoImpuesto(elemento, Indice.Utm);

                                        //OBTENER EL VALOR DESDE SYS VARIABLE                                       
                                        valorCalculado = varSistema.ObtenerValorLista("sysimpto");
                                        //VALOR BASE A 30 DIAS
                                        //valorItem = ValorBaseCompleto(valorCalculado, diasTrabajados);
                                        valorItem = valorCalculado;

                                        Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem, MidpointRounding.AwayFromZero), Math.Round(valorCalculado, MidpointRounding.AwayFromZero), getPeriodo());
                                        //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                    }
                                    else
                                    {
                                        if (UsaFormula)
                                        {
                                            //OBTENER EL VALOR DE LA FORMULA                                            
                                            //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                            ExpresionFormula = elemento.ExpresionFormula;
                                            valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                            //PROPORCIONAL?
                                            //if(Proporcional)
                                            //    valorCalculado = SueldoProporcional(valorCalculado, diasTrabajados);

                                            //GUARDAMOS VALOR EN BD
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                        }
                                        else
                                        {
                                            
                                            valorCalculado = valorItem;

                                            //GUARDAMOS VALOR EN BD
                                            Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                        }
                                        //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                    }
                                }

                                //SUMAMOS VALORES CALCULADOS
                                if(elemento.item != "SEGINV" && elemento.item != "SCEMPRE")
                                    sumaParcialLeyes = sumaParcialLeyes + Math.Round(valorCalculado);

                                //ACTUALIZAMOS VALOR ITEM
                                //Calculo.ActualizarCalculoItem(contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                            }
                            //---------------------
                            // DESCUENTOS        //
                            //-------------------//
                            if (elemento.tipo == 5)
                            {
                                //VERIFICAMOS SI USA FORMULA
                                if (UsaFormula)
                                {
                                    //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                    ExpresionFormula = elemento.ExpresionFormula;
                                    valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);
                                }
                                else
                                {
                                    //NO USA FORMULA
                                    valorCalculado = valorItem;
                                }

                                //SUMAMOS VALORES CALCULADOS
                                SumaParcialDctos = SumaParcialDctos + Math.Round(valorCalculado);

                                //ACTUALIZAMOS VALOR EN TABLA ITEMTRABAJADOR
                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo());
                                //Calculo.NuevoParcial(contrato, elemento.orden, elemento.item, valorItem, Math.Round(valorCalculado), getPeriodo(), elemento.NumeroItem);
                                
                            }
                            //---------------------
                            // APORTES EMPRESA   //
                            //--------------------
                            if (elemento.tipo == 6)
                            {                             
                                if (elemento.item == "MUTUALI")
                                {                                    
                                    if (UsaFormula)
                                    {
                                        if (codAfiCaja == 3 || codAfiCaja == 4)
                                        {
                                            double valcom = -1;

                                            //SETEAR VARIABLE SYS (CON PORCENTAJE DESDE TABLA EMPRESA)                                   
                                            varSistema.ActualizarValorLista(Convert.ToDouble(CotMutualValue()), "sysmutual");
                                            double m = varSistema.ObtenerValorLista("sysmutual");

                                            double tempTopeSalud = 0;
                                            tempTopeSalud = varSistema.ObtenerValorLista("systopesalud");

                                            if (varSistema.ObtenerValorLista("systimp") > varSistema.ObtenerValorLista("systopesalud"))
                                            {
                                                if (varSistema.ObtenerValorLista("sysdiaslic") > 0)
                                                    varSistema.ActualizarValorLista((tempTopeSalud / 30) * varSistema.ObtenerValorLista("sysdiastr"), "systopesalud");
                                            }

                                            //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                            ExpresionFormula = elemento.ExpresionFormula;
                                            if (EsIps)
                                            {                                                
                                                varSistema.ActualizarValorLista(Indice.TopeIpsPesos, "systopesalud");
                                            }

                                            if (diasTrabajados < 30)
                                            {
                                                double parcial = varSistema.ObtenerValorLista("systimp");
                                                varSistema.ActualizarValorLista(varSistema.ObtenerValorLista("systimp30"), "systimp");
                                                //varSistema.ActualizarValorLista(ImponibleAnteriorSuspension, "systimp");
                                                valcom = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);
                                                varSistema.ActualizarValorLista(parcial, "systimp");
                                                
                                            }
                                            
                                            double ValMutual = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                            if (diasTrabajados >= 30)
                                                valorItem = valorCalculado;
                                            else
                                                valorItem = valcom;
                       

                                            //SetMutual(valcom == -1?Math.Round(ValMutual): Math.Round(valcom/2), varSistema.ObtenerValorLista("sysdiassp13"),
                                            //    varSistema.ObtenerValorLista("sysdiassp14"), 
                                            //    varSistema.ObtenerValorLista("sysdiassp15"), 
                                            //    CountBuilder++);

                                            //double Valsanna = CalculoSanna(ImpAnterior, varSistema.ObtenerValorLista("systimp"), LeySanna, varSistema.ObtenerValorLista("sysdiaslic"), topeSalud);
                                            //varSistema.ActualizarValorLista(Valsanna, "sysvalsanna");

                                            //GUARDAMOS EN ITEM MUTUAL SIN CONSIDERAR EL VALOR DE SANNA
                                            valorCalculado = Math.Round(ValMutual);

                                            varSistema.ActualizarValorLista(tempTopeSalud, "systopesalud");

                                            if (EsIps)
                                                varSistema.ActualizarValorLista(tempTopeSalud, "systopesalud");

                                            //EL VALOR CALCULADO REPRESENTA EL % TOTAL DE MUTUAL
                                            //DENTRO DE % SI QUEREMOS DIVIDIRLO QUEDARIA ASI:
                                            //AÑO 2018 --> 0.90% MUTUAL + 0.015% SANNA
                                            //AÑO 2019 --> 0.90% MUTUAL + 0.02% SANNA
                                            //AÑO 2020 EN ADELANTE --> 0.90% MUTUAL + 0.03%
                                        }
                                        else
                                        {
                                            valorCalculado = 0;
                                        }
                                    }
                                    else
                                    {
                                        valorCalculado = 0;
                                    }                                   
                                    
                                    //GUARDAMOS VALOR A MUTUAL
                                    varSistema.ActualizarValorLista(valorCalculado, "sysmutual");

                                    //GUARDAMOS VALOR EN TABLA ITEMTRABAJADOR
                                    Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorItem), Math.Round(valorCalculado), getPeriodo());
                                }
                                if (elemento.item == "CAJACOM")
                                {
                                    //OBTENEMOS EL CALCULO DE CAJA DE COMPENSACION
                                    double valcom = -1;
                                    double topeparcial = 0;                              

                                    if (diasTrabajados < 30)
                                    {
                                        double parcial = varSistema.ObtenerValorLista("systimp");
                                        varSistema.ActualizarValorLista(varSistema.ObtenerValorLista("systimp30"), "systimp");
                                        valcom = CajaCompensacion(codAfiCaja, typeSalud, EsIps? Indice.TopeIpsPesos:  topeSalud);
                                        varSistema.ActualizarValorLista(parcial, "systimp");
                                    }

       

                                    if (varSistema.ObtenerValorLista("sysdiassp13") > 0 || varSistema.ObtenerValorLista("sysdiassp14") > 0)
                                    {
                                        if (ImponibleAnteriorSuspension == 0)
                                        {
                                            SetCaja(valcom == -1 ? Math.Round(valorCalculado) : Math.Round(valcom), varSistema.ObtenerValorLista("sysdiassp13"),
                                       varSistema.ObtenerValorLista("sysdiassp14"),
                                       varSistema.ObtenerValorLista("sysdiassp15"),
                                       BuilderSuspension, elemento, CountBuilder++);
                                        }
                                        else
                                        {
                                            double parcial = varSistema.ObtenerValorLista("systimp");
                                            varSistema.ActualizarValorLista(PorcentajeCotizacion, "systimp");
                                            valcom = CajaCompensacion(codAfiCaja, typeSalud, EsIps ? Indice.TopeIpsPesos : topeSalud);
                                            varSistema.ActualizarValorLista(parcial, "systimp");

                                            SetCaja(valcom, varSistema.ObtenerValorLista("sysdiassp13"),
                                      varSistema.ObtenerValorLista("sysdiassp14"),
                                      varSistema.ObtenerValorLista("sysdiassp15"),
                                      BuilderSuspension, elemento, CountBuilder++);
                                        }
                                    }

                                    valorCalculado = CajaCompensacion(codAfiCaja, typeSalud, EsIps ? Indice.TopeIpsPesos : topeSalud);

                                    //GUARDAMOS VALOR EN VARIABLE SISTEMA
                                    varSistema.ActualizarValorLista(valorCalculado, "syscaja");


                                    //GUARDAMOS VALOR EN BD
                                    Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorCalculado), Math.Round(valorCalculado), getPeriodo());
                                }
                                if (elemento.item == "SANNA")
                                {
                                    if (codAfiCaja == 3 || codAfiCaja == 4)
                                    {
                                        double valcom = -1;
                                        if (UsaFormula)
                                        {
                                            if (diasTrabajados < 30)
                                            {
                                                double parcial = varSistema.ObtenerValorLista("systimp");
                                                double parciallic = varSistema.ObtenerValorLista("sysdiaslic");
                                                double parcialaus = varSistema.ObtenerValorLista("sysdiasaus");
                                                varSistema.ActualizarValorLista(varSistema.ObtenerValorLista("systimp30"), "systimp");
                                                varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                varSistema.ActualizarValorLista(0, "sysdiasaus");
                                                valcom = CalculoSanna(elemento, ImpAnterior, SumaParcialImp, LeySanna, varSistema.ObtenerValorLista("sysdiaslic"), topeSalud, getPeriodo());
                                                varSistema.ActualizarValorLista(parcial, "systimp");
                                                varSistema.ActualizarValorLista(parciallic, "sysdiaslic");
                                                varSistema.ActualizarValorLista(parcialaus, "sysdiasaus");

                                            }
                                           

                                            if (varSistema.ObtenerValorLista("sysdiassp14") >0 || varSistema.ObtenerValorLista("sysdiassp13") > 0)
                                            {
                                                if (ImponibleAnteriorSuspension == 0)
                                                {
                                                    SetSanna(valcom == -1 ? Math.Round(valorCalculado) : Math.Round(valcom), varSistema.ObtenerValorLista("sysdiassp13"),
                                                    varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                    BuilderSuspension, elemento, CountBuilder++);
                                                }
                                                else
                                                {
                                                    double parcial = varSistema.ObtenerValorLista("systimp");
                                                    double parciallic = varSistema.ObtenerValorLista("sysdiaslic");
                                                    double parcialaus = varSistema.ObtenerValorLista("sysdiasaus");
                                                    varSistema.ActualizarValorLista(PorcentajeCotizacion, "systimp");
                                                    varSistema.ActualizarValorLista(0, "sysdiaslic");
                                                    varSistema.ActualizarValorLista(0, "sysdiasaus");
                                                    valcom = CalculoSanna(elemento, ImpAnterior, SumaParcialImp, LeySanna, varSistema.ObtenerValorLista("sysdiaslic"), topeSalud, getPeriodo());
                                                    varSistema.ActualizarValorLista(parcial, "systimp");
                                                    varSistema.ActualizarValorLista(parciallic, "sysdiaslic");
                                                    varSistema.ActualizarValorLista(parcialaus, "sysdiasaus");

                                                    SetSanna(valcom, varSistema.ObtenerValorLista("sysdiassp13"),
                                                  varSistema.ObtenerValorLista("sysdiassp14"), varSistema.ObtenerValorLista("sysdiassp15"),
                                                  BuilderSuspension, elemento, CountBuilder++);
                                                }
                                            }

                                            //SI NO TIENE LICENCIAS USAMOS EL IMPONIBLE NORMAL
                                            valorCalculado = CalculoSanna(elemento, ImpAnterior, SumaParcialImp, LeySanna, varSistema.ObtenerValorLista("sysdiaslic"), topeSalud, getPeriodo());

                                            varSistema.ActualizarValorLista(valorCalculado, "sysvalsanna");

                                        }
                                    }
                                    Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorCalculado), Math.Round(valorCalculado), getPeriodo());
                                }                                
                            }
                            if(elemento.tipo == 7)
                            {                             
                                if (UsaFormula)
                                {
                                    //OBTENEMOS EXPRESION FORMULA
                                    //ExpresionFormula = CadenaCalculo(elemento.contrato, elemento.item, elemento.NumeroItem, getPeriodo());
                                    ExpresionFormula = elemento.ExpresionFormula;
                                    valorCalculado = CalculoFormula(ExpresionFormula, elemento.contrato, elemento.item, elemento.NumeroItem);

                                    //PROPORCIONAL?
                                    if (Proporcional)
                                        valorCalculado = SueldoProporcional(valorCalculado, diasTrabajados);
                                }
                                else
                                {
                                    //PROPORCIONAL
                                    if (Proporcional)
                                        valorCalculado = SueldoProporcional(valorItem, diasTrabajados);
                                    else
                                        valorCalculado = valorItem;
                                }

                                Calculo.ActualizarCalculoItem(elemento.contrato, elemento.orden, elemento.NumeroItem, elemento.item, Math.Round(valorCalculado), Math.Round(valorCalculado), getPeriodo());
                            }

                            //ACTUALIZAMOS TOTAL DE HABERES POR CADA ITERACION
                            TotalHaberes = Math.Round(SumaParcialImp + SumaParcialExentos + SumaFam);
                            varSistema.ActualizarValorLista(Math.Round(TotalHaberes), "systhab");

                            //ACTUALIZAR VALOR PARA CALCULO TOTAL DESCUENTOS
                            varSistema.ActualizarValorLista(Math.Round(sumaParcialLeyes + SumaParcialDctos), "systdctos");

                            if (elemento.item.ToLower().Equals("sbgiro"))
                                ValorSobreGiroActual = elemento.calculado;
                        }
                        
                        count++;
                    }

                    //ACUMULAMOS HABERES
                    
                   // TotalHaberes = Math.Round(SumaParcialImp + SumaParcialExentos + SumaFam);
                   // varSistema.ActualizarValorLista(Math.Round(TotalHaberes), "systhab");                    

                    double seginv = varSistema.ObtenerValorLista("syssis");
                    double syscicese = varSistema.ObtenerValorLista("syscicese");
                    double sysfscese = varSistema.ObtenerValorLista("sysfscese");

                    //A LA SUMA DE LEYES SOCIALES QUITAR SIS Y SEGURO EMPRESA
                    //sumaParcialLeyes = sumaParcialLeyes - (varSistema.ObtenerValorLista("syssis") + varSistema.ObtenerValorLista("syscicese") + varSistema.ObtenerValorLista("sysfscese"));

                    //ACTUALIZAR VALOR PARA CALCULO TOTAL DESCUENTOS
                    //varSistema.ActualizarValorLista(Math.Round(sumaParcialLeyes + SumaParcialDctos), "systdctos");                
                    
                    //SOBREGIRO (TOTAL HABERES - TOTAL DESCUENTOS )
             
                    Sobregiro = (((SumaParcialImp + SumaParcialExentos) - ValorSobreGiroActual)- varSistema.ObtenerValorLista("systdctos"));
                    double de = varSistema.ObtenerValorLista("systdctos");
                    double h = varSistema.ObtenerValorLista("systhab");

                    //Pregutamos si existe item sobregiro en listado
                    if (listadoHab.Count(x => x.item.ToLower().Equals("sbgiro")) > 0)
                    {
                        //hay un item con sobregiro
                        //NumSobre = ItemTrabajador.Number(contrato, getPeriodo(), "SBGIRO");
                        NumSobre = listadoHab.Find(x => x.item.ToLower().Equals("sbgiro")).NumeroItem;
                        //VOLVEMOS A CALCULAR GIRO
                        // Sobregiro = ((varSistema.ObtenerValorLista("systhab") - ItemTrabajador.GetValCal("SBGIRO", contrato, getPeriodo(), NumSobre)) - varSistema.ObtenerValorLista("systdctos"));
                        if (Sobregiro < 0)
                        {
                            ItemTrabajador.ActualizarItem(contrato, getPeriodo(), "SBGIRO", NumSobre, Math.Round(Sobregiro * -1), Math.Round(Sobregiro * -1));
                            //ValorSobreGiroActual = Sobregiro;
                        }
                        else
                            //ELIMINAMOS ITEM
                            ItemTrabajador.Eliminar("SBGIRO", contrato, getPeriodo());
                    }
                    else
                    {
                        InfoItem = new ItemBase("SBGIRO");
                        InfoItem.Setinfo();                        

                        if (InfoItem.Orden != 0 && InfoItem.Tipo != 0 && InfoItem.Formula != "")
                        {
                            if (Sobregiro < 0)
                            {
                                ItemTrabajador.NuevoItem(contrato, getPeriodo(), Trabajador.Rut, "SBGIRO", ItemTrabajador.LastNumber(contrato, getPeriodo()),
                                InfoItem.Formula, InfoItem.Tipo, InfoItem.Orden, false, Math.Round(Sobregiro * -1), Math.Round(Sobregiro * -1), false,
                                false, false, false, false, false, false);


                                //ValorSobreGiroActual = Sobregiro;
                            }

                        }
                    }

                    ////SI SOBREGIRO ES > 0 AGREGAMOS ITEM SOBREGIRO
                    //    if (ItemTrabajador.Existe("SBGIRO", contrato, getPeriodo()))
                    //    {
                    //        NumSobre = ItemTrabajador.Number(contrato, getPeriodo(), "SBGIRO");
                    //        //VOLVEMOS A CALCULAR GIRO
                    //        // Sobregiro = ((varSistema.ObtenerValorLista("systhab") - ItemTrabajador.GetValCal("SBGIRO", contrato, getPeriodo(), NumSobre)) - varSistema.ObtenerValorLista("systdctos"));
                    //        if (Sobregiro < 0)
                    //        {
                    //            ItemTrabajador.ActualizarItem(contrato, getPeriodo(), "SBGIRO", NumSobre, Math.Round(Sobregiro * -1), Math.Round(Sobregiro * -1));
                    //            //ValorSobreGiroActual = Sobregiro;
                    //        }                                
                    //        else
                    //         //ELIMINAMOS ITEM
                    //         ItemTrabajador.Eliminar("SBGIRO", contrato, getPeriodo());
                    //    }
                    //    else
                    //    {
                    //        InfoItem = new ItemBase("SBGIRO");
                    //        InfoItem.Setinfo();
                    //        if (InfoItem.Orden != 0 && InfoItem.Tipo != 0 && InfoItem.Formula != "")
                    //        {
                    //            if (Sobregiro < 0)
                    //            {
                    //                ItemTrabajador.NuevoItem(contrato, getPeriodo(), Trabajador.Rut, "SBGIRO", ItemTrabajador.LastNumber(contrato, getPeriodo()),
                    //                InfoItem.Formula, InfoItem.Tipo, InfoItem.Orden, false, Math.Round(Sobregiro * -1), Math.Round(Sobregiro * -1), false,
                    //                false, false, false, false, false, false);


                    //                //ValorSobreGiroActual = Sobregiro;
                    //        }
                                    
                    //        }
                    //    }

                    //BUSCAMOS SOBREGIRO MES ANTERIOR
                    //SobreAnt = Calculo.GetValueFromLiquidacionHistorica(contrato, fnSistema.fnObtenerPeriodoAnterior(getPeriodo()), "sobregiro");
                    ItemTrabajador InfoSobreGiro = new ItemTrabajador();
                    if (listadoHab.Count > 0)                    
                         InfoSobreGiro = listadoHab[0];

                    if (InfoSobreGiro != null)
                    {
                        SobreAnt = InfoSobreGiro.MontoSobreGiroAnterior;
                        
                        if (SobreAnt > 0)
                        {
                            if (InfoSobreGiro.ExisteSobreGiroAnterior == false)
                            {
                                InfoItem = new ItemBase("SBGIRA");
                                InfoItem.Setinfo();
                                if (InfoItem.Orden != 0 && InfoItem.Tipo != 0 && InfoItem.Formula != "")
                                {
                                    ItemTrabajador.NuevoItem(contrato, getPeriodo(), Trabajador.Rut, "SBGIRA", ItemTrabajador.LastNumber(contrato, getPeriodo()),
                                    InfoItem.Formula, InfoItem.Tipo, InfoItem.Orden, false, Math.Round(SobreAnt), Math.Round(SobreAnt), false,
                                    false, false, false, false, false, false);
                                }
                            }
                        } 
                    }

                    //ALCANCE LIQUIDO
                    AlcanceLiquido(sumaParcialLeyes);

                    //LIQUIDO A PAGAR
                    LiquidoPago();              

                    //GUARDAMOS VARIABLE EN TABLA CALCULOMENSUAL Y TABLA LIQUIDACION HISTORICO...
                    if (Calculo.ExisteLiquidacionHistoricoCalculo(contrato, getPeriodo()))
                        //SOLO MODIFICAMOS
                        Calculo.ModificarDatosLiquidacion(getPeriodo(), contrato, Math.Round(varSistema.ObtenerValorLista("systimp")), Math.Round(varSistema.ObtenerValorLista("systhab")), Math.Round(varSistema.ObtenerValorLista("systdctos")), Math.Round(varSistema.ObtenerValorLista("sysliq")), Math.Round(varSistema.ObtenerValorLista("syspago")), Sobregiro < 0 ? Sobregiro*-1 : 0);
                    else
                        //INGRESAMOS NUEVO HISTORICO
                        Calculo.GrabarDatosLiquidacion(getPeriodo(), contrato, Math.Round(varSistema.ObtenerValorLista("systimp")), Math.Round(varSistema.ObtenerValorLista("systhab")), Math.Round(varSistema.ObtenerValorLista("systdctos")), Math.Round(varSistema.ObtenerValorLista("sysliq")), Math.Round(varSistema.ObtenerValorLista("syspago")), Sobregiro < 0 ? Sobregiro * -1 : 0);

                   
                    if (Calculo.ExisteCalculoMensual(contrato, getPeriodo()))
                    {
                        Calculo.ActualizarCalculoMensual(varSistema.ObtenerValorLista("sysaprevol"), varSistema.ObtenerValorLista("sysbcimpto"),
                            varSistema.ObtenerValorLista("syscaja"), varSistema.ObtenerValorLista("sysciafp"),
                            varSistema.ObtenerValorLista("syscicese"), varSistema.ObtenerValorLista("syscicest"),
                            varSistema.ObtenerValorLista("syscomafp"), varSistema.ObtenerValorLista("sysdiasaus"),
                            varSistema.ObtenerValorLista("sysdiaslic"), varSistema.ObtenerValorLista("sysdiastr"),
                            varSistema.ObtenerValorLista("sysfactorimpto"), varSistema.ObtenerValorLista("sysfonasa"),
                            varSistema.ObtenerValorLista("sysfscese"), varSistema.ObtenerValorLista("sysfscest"),
                            varSistema.ObtenerValorLista("sysimpto"), varSistema.ObtenerValorLista("sysisapre"),
                            varSistema.ObtenerValorLista("sysliq"), varSistema.ObtenerValorLista("sysmutual"),
                            varSistema.ObtenerValorLista("syspago"), varSistema.ObtenerValorLista("sysrebimpto"),
                            varSistema.ObtenerValorLista("syssis"), varSistema.ObtenerValorLista("systdctos"),
                            varSistema.ObtenerValorLista("systexe"), varSistema.ObtenerValorLista("systfam"),
                            varSistema.ObtenerValorLista("systhab"), varSistema.ObtenerValorLista("systimp"),
                            varSistema.ObtenerValorLista("systopeafp"), varSistema.ObtenerValorLista("systopesalud"),
                            varSistema.ObtenerValorLista("systopeseg"), varSistema.ObtenerValorLista("systributo"),
                            varSistema.ObtenerValorLista("sysporcadmafp"), varSistema.ObtenerValorLista("sysvalsanna"),    
                            varSistema.ObtenerValorLista("systimp30"),
                            varSistema.ObtenerValorLista("sysdiassp13"),
                            varSistema.ObtenerValorLista("sysdiassp14"),
                            varSistema.ObtenerValorLista("sysdiassp15"),
                            varSistema.ObtenerValorLista("sysafpsp13"), varSistema.ObtenerValorLista("syssaludsp13"),
                            varSistema.ObtenerValorLista("syssegtrabsp13"), varSistema.ObtenerValorLista("sysinv13"), 
                            varSistema.ObtenerValorLista("syscaja13"), varSistema.ObtenerValorLista("sysmutual13"), 
                            varSistema.ObtenerValorLista("syssanna13"), varSistema.ObtenerValorLista("syssegemsp13"),
                            varSistema.ObtenerValorLista("sysafpsp14"), varSistema.ObtenerValorLista("syssaludsp14"),
                            varSistema.ObtenerValorLista("sysinv14"), varSistema.ObtenerValorLista("syscaja14"), 
                            varSistema.ObtenerValorLista("sysmutual14"), varSistema.ObtenerValorLista("syssanna14"),
                            varSistema.ObtenerValorLista("syssegemsp14"), varSistema.ObtenerValorLista("syssegtrabsp14"),
                            contrato, getPeriodo());
                    }
                    else
                    {
                        Calculo.AgregarCalculoMensual(varSistema.ObtenerValorLista("sysaprevol"), varSistema.ObtenerValorLista("sysbcimpto"),
                            varSistema.ObtenerValorLista("syscaja"), varSistema.ObtenerValorLista("sysciafp"),
                            varSistema.ObtenerValorLista("syscicese"), varSistema.ObtenerValorLista("syscicest"),
                            varSistema.ObtenerValorLista("syscomafp"), varSistema.ObtenerValorLista("sysdiasaus"),
                            varSistema.ObtenerValorLista("sysdiaslic"), varSistema.ObtenerValorLista("sysdiastr"),
                            varSistema.ObtenerValorLista("sysdiasfactorimpto"), varSistema.ObtenerValorLista("sysfonasa"),
                            varSistema.ObtenerValorLista("sysfscese"), varSistema.ObtenerValorLista("sysfscest"),
                            varSistema.ObtenerValorLista("sysimpto"), varSistema.ObtenerValorLista("sysisapre"),
                            varSistema.ObtenerValorLista("sysliq"), varSistema.ObtenerValorLista("sysmutual"),
                            varSistema.ObtenerValorLista("syspago"), varSistema.ObtenerValorLista("sysrebimpto"),
                            varSistema.ObtenerValorLista("syssis"), varSistema.ObtenerValorLista("systdctos"),
                            varSistema.ObtenerValorLista("systexe"), varSistema.ObtenerValorLista("systfam"),
                            varSistema.ObtenerValorLista("systhab"), varSistema.ObtenerValorLista("systimp"),
                            varSistema.ObtenerValorLista("systopeafp"), varSistema.ObtenerValorLista("systopesalud"),
                            varSistema.ObtenerValorLista("systopeseg"), varSistema.ObtenerValorLista("systributo"),
                            varSistema.ObtenerValorLista("sysporcadmafp"), varSistema.ObtenerValorLista("sysvalsanna"),     
                            varSistema.ObtenerValorLista("systimp30"),
                            varSistema.ObtenerValorLista("sysdiassp13"),
                            varSistema.ObtenerValorLista("sysdiassp14"),
                            varSistema.ObtenerValorLista("sysdiassp15"),
                            varSistema.ObtenerValorLista("sysafpsp13"), varSistema.ObtenerValorLista("syssaludsp13"),
                            varSistema.ObtenerValorLista("syssegtrabsp13"), varSistema.ObtenerValorLista("sysinv13"),
                            varSistema.ObtenerValorLista("syscaja13"), varSistema.ObtenerValorLista("sysmutual13"),
                            varSistema.ObtenerValorLista("syssanna13"), varSistema.ObtenerValorLista("syssegemsp13"),
                            varSistema.ObtenerValorLista("sysafpsp14"), varSistema.ObtenerValorLista("syssaludsp14"),
                            varSistema.ObtenerValorLista("sysinv14"), varSistema.ObtenerValorLista("syscaja14"),
                            varSistema.ObtenerValorLista("sysmutual14"), varSistema.ObtenerValorLista("syssanna14"),
                            varSistema.ObtenerValorLista("syssegemsp14"), varSistema.ObtenerValorLista("syssegtrabsp14"),
                            contrato, getPeriodo());
                    }


                    //Agrega items a base de datos que son de suspension
                    SetItemSuspension(Trabajador, BuilderSuspension);
                    
                    //SI HAY LICENCIAS Y NO HAY IMPONIBLE ANTERIOR GUARDADO LO GUARDAMOS
                    if(ExisteimpAnterior == false && varSistema.ObtenerValorLista("sysdiaslic") > 0)
                        Calculo.IngresarImponibleAnterior(contrato, Math.Round(ImpAnterior, 0, MidpointRounding.AwayFromZero));
                    //else
                        //EXISTE IMPONIBLE ANTERIOR Y EL IMPONIBLE ACTUAL ES MAYOR AL IMPONIBLE GUARDADO?

                    //RESET IMP PARCIAL
                    SumaParcialImp = 0;
                    SumaParcialExentos = 0;
                    sumaParcialLeyes = 0;
                    SumaParcialDctos = 0;
                    SumaFam = 0;
                }           
            }            
        }
        

        #endregion

        #region "LEY SANNA"
        /// <summary>
        /// Corresponde al calculo de la cotizacion Ley Sanna.
        /// </summary>
        /// <param name="pImpoAnterior">Corresponde al imponible histórico en cuyo mes el trabajador haya laburado el mes completo. Se utiliza en el caso que el trabajador tenga licencias en el mes.</param>
        /// <param name="pImponibleMes">Corresponde al valor del imponible calculado de acuerdo al mes en evaluacion</param>
        /// <param name="pPorcentaje">Corresponde al porcentaje de descuento</param>
        /// <param name="pLic">Corresponde a los dias de licencias.</param>
        /// <param name="pTopeSalud">Corresponde al valor expresado en pesos correspondiente al tope legal establecido para el calculo de la ley sanna</param>
        /// <param name="pCoditem">Corresponde al codigo del item evaluado</param>
        /// <param name="pContrato">Corresponde al numero de contrato asociado</param>
        /// <param name="pPeriodo">Corresponde al periodo o mes que se desea consultar</param>
        /// <param name="pNumItem">Numero del item evaluado</param>
        /// <returns></returns>
        private double CalculoSanna(ItemTrabajador pObjeto, double pImpoAnterior, double pImponibleMes, double pPorcentaje, double pLic, double pTopeSalud, int pPeriodo)
        {
            double PropLicencia = 0;
            double SannaLicencia = 0;
            double SannaDiasTrab = 0;
            double SannaFinal = 0;
            double TopeSalud = 0;
            string ExpresionFormula = "";
            int DiasMes = 0;
            DateTime Fecha = DateTime.Now.Date;
            Fecha = fnSistema.PrimerDiaMes(pPeriodo);

            DiasMes = DateTime.DaysInMonth(Fecha.Year, Fecha.Month);

            //SETEAMOS VARIABLE DE SISTEMA SANNA CON EL VALOR PASADO POR PARAMETRO
            varSistema.ActualizarValorLista(pPorcentaje, "sysvalsanna");

            //SI TIENE LICENCIAS USAMOS IMPONIBLE ANTERIOR
            if (pLic > 0)
            {
                //VERIFICAMOS EL QUE IMPONIBLE ANTERIOR NO SEA MAYOR AL TOPE
                if (pImpoAnterior > pTopeSalud)
                    pImpoAnterior = pTopeSalud;

                //CALCULAMOS EL PROPORCIONAL A LOS DIAS DE LICENCIA
                //SI LOS DIAS DE LICENCIA SON IGUALES AL TOTAL DE DIAS QUE TIENE EL MES, 
                //EL PROPORCIONAL ES IGUAL AL IMPONIBLE ANTERIOR          
                if (DiasMes == pLic)
                {
                    //SI LOS DIAS DE LICENCIA SON MAYORES A 30 DIAS (MESES CON 31 DIAS)
                    //DEBEMOS CONSIDERAR QUE EL IMPONIBLE ANTERIOR SOLO CORRESPONDE A 30 DIAS, 
                    //POR LO QUE DEBEMOS CALCULAR EL DIAS ADICIONAL (A 31 DIAS)                  
                    if (DiasMes > 30)
                        PropLicencia = Math.Round((pImpoAnterior * 31) / 30);
                    else
                        PropLicencia = Math.Round(pImpoAnterior);                    
                   
                    if (PropLicencia > pTopeSalud)
                        PropLicencia = pTopeSalud;
                }                    
                else
                    PropLicencia = (pImpoAnterior / 30) * pLic;

                //CALCULAMOS EL VALOR DE LOS DIAS DE LICENCIA DE ACUERDO A FORMULA                
                //ExpresionFormula = CadenaCalculo(pContrato, pCoditem, pNumItem, pPeriodo);
                ExpresionFormula = pObjeto.ExpresionFormula;

                //SOLO PARA FORMULA, REEMPLAZAMOS EL IMPONIBLE POR EL PROPLICENCIA
                varSistema.ActualizarValorLista(PropLicencia, "systimp");
                SannaLicencia = CalculoFormula(ExpresionFormula, pObjeto.contrato, pObjeto.item, pObjeto.NumeroItem);

                //VOLVEMOS A DEJAR EL IMPONIBLE CON EL IMPONIBLE ACTUAL
                varSistema.ActualizarValorLista(pImponibleMes, "systimp");

                TopeSalud = varSistema.ObtenerValorLista("systopesalud");

                if (pLic > 0)
                {
                    if (varSistema.ObtenerValorLista("systimp") > varSistema.ObtenerValorLista("systopesalud"))
                        varSistema.ActualizarValorLista((TopeSalud/30) * varSistema.ObtenerValorLista("sysdiastr"), "systopesalud");
                }

                //CALCULAMOS SANNA DE ACUERDO A IMPONIBLE MES ACTUAL
                SannaDiasTrab = CalculoFormula(ExpresionFormula, pObjeto.contrato, pObjeto.item, pObjeto.NumeroItem);

                //SUMAMOS AMBOS VALORES
                SannaFinal = Math.Round(SannaLicencia, 0, MidpointRounding.AwayFromZero) + Math.Round(SannaDiasTrab, 0, MidpointRounding.AwayFromZero);

                //RESET TOPE SALUD
                varSistema.ActualizarValorLista(TopeSalud, "systopesalud");
                
            }
            else
            {
                //CALCULAMOS SANNA NORMALMENTE                
                //ExpresionFormula = CadenaCalculo(pContrato, pCoditem, pNumItem, pPeriodo);
                ExpresionFormula = pObjeto.ExpresionFormula;
                SannaFinal = Math.Round(CalculoFormula(ExpresionFormula, pObjeto.contrato, pObjeto.item, pObjeto.NumeroItem), 0, MidpointRounding.AwayFromZero);
                    
            }                

            return SannaFinal;
        }
        #endregion         

        #region "LOG ITEM"       

        //ESTE METODO GENERA UN DATATABLE CON TODAS LOS ITEM ASOCIADOS AL CONTRATO 
        //REPRESENTA A TODOS LOS ITEM PREVIO AL RECALCULO (PARA COMPARAR EN CASO DE CAMBIOS)
        private DataTable GeneraDataTable()
        {
            string sql = string.Format("SELECT coditem, valor, valorcalculado FROM " +
                "itemtrabajador WHERE contrato='{0}' AND anomes={1}", getContrato(), getPeriodo());
         
            SqlDataAdapter adapter;
            DataSet ds = new DataSet("items");
            DataTable tabla = new DataTable();

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    adapter = new SqlDataAdapter(sql, fnSistema.sqlConn);
                    //PASAMOS LOS DATOS A TRAVES DE FILL AL DATASET
                    adapter.Fill(ds, "itemtrabajador");                    
                    tabla = ds.Tables["itemtrabajador"];

               }
                fnSistema.sqlConn.Close();
                
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //RETORNAMOS EL DATATABLE
            return tabla;
        }

        //TABLA HASH PRECARGA
        private Hashtable PrecargaItem(string item)
        {
            Hashtable tabla = new Hashtable();
            string sql = "SELECT coditem, valor, valorcalculado FROM itemtrabajador WHERE contrato=@contrato AND " +
                "anomes=@periodo AND coditem=@item";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@contrato", getContrato()));
                        cmd.Parameters.Add(new SqlParameter("@periodo", getPeriodo()));
                        cmd.Parameters.Add(new SqlParameter("@item", item));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS HASH
                                tabla.Add("coditem", (string)rd["coditem"]);
                                tabla.Add("valor", (decimal)rd["valor"]);
                                tabla.Add("valorcalculado", (decimal)rd["valorcalculado"]);
                            }
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return tabla;
        }

        //COMPARA VALOR UNITARIO, RETORNA TRUE SI HUBO ALGUN CAMBIO
        private bool ComparaValorUnitarioItem(string contrato, int periodo, string codigoItem, 
            decimal NuevoValor, decimal NuevoCalculado, Hashtable Datos)
        {
            bool HuboCambio = false;
            if (Datos.Count > 0)
            {
                if ((decimal)Datos["valor"] != NuevoValor)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA VALOR ORIGINAL ITEM" + codigoItem + " ASOCIADO A CONTRATO " + contrato, "ITEMTRABAJADOR", (decimal)Datos["valor"] + "", NuevoValor + "", "MODIFICAR");
                    log.Log();
                    HuboCambio = true;
                }
                if ((decimal)Datos["valorcalculado"] != NuevoCalculado)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA VALOR CALCULADO ITEM" + codigoItem + " ASOCIADO A CONTRATO " + contrato, "ITEMTRABAJADOR", (decimal)Datos["valorcalculado"] + "", NuevoCalculado + "", "MODIFICAR");
                    log.Log();
                    HuboCambio = true;
                }
            }         

            return HuboCambio;
        }

        //SI EL METODO DE ARRIBA RETORNA TRUE ESPORQUE SE MODIFICO ALGUN VALOR
        //DEBEMOS COMPARAR LOS VALORES DE LOS ITEM CON EL DATATABLE GENERADO ANTES DE PRECALCULO
        private void ComparaTodosItem(DataTable Tabla, string contrato, int periodo)
        {
            string sql = "SELECT coditem ,valor, valorcalculado FROM itemtrabajador WHERE contrato=@contrato AND anomes=@periodo ";
            SqlCommand cmd;
            SqlDataReader rd;
            string item = "";

            if (Tabla == null) return;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@contrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //COMPARAMOS VALORES CON REGISTRO EN DATATABLE
                                item = (string)rd["coditem"];
                                
                                if (Tabla.Rows.Count>0)
                                {
                                    //RECORREMOS DATATABLE
                                    foreach (DataRow elemento in Tabla.Rows)
                                    {
                                        //PREGUNTAMOS SI EL ELEMENTO DE LA TABLA COINCIDE CON EL ELEMENTO DE LA CONSULTA
                                        if (elemento["coditem"].ToString() == item)
                                        {                                           
                                            
                                            //COMPARAMOS VALORES 
                                            if ((decimal)rd["valor"] != Convert.ToDecimal(elemento["valor"]))
                                            {
                                                logRegistro log = new logRegistro(User.getUser(), "MODIFICA VALOR ORIGINAL ITEM " + item + " ASOCIADO A CONTRATO " + contrato, "ITEMTRABAJADOR", (decimal)elemento["valor"] + "", (decimal)rd["valor"] + "", "MODIFICAR");
                                                log.LogEvento(fnSistema.sqlConn);
                                            }
                                            if ((decimal)rd["valorcalculado"] != Convert.ToDecimal(elemento["valorcalculado"]))
                                            {
                                                logRegistro log = new logRegistro(User.getUser(), "MODIFICA VALOR CALCULADO ITEM " + item + " ASOCIADO A CONTRATO " + contrato, "ITEMTRABAJADOR", (decimal)elemento["valorcalculado"] + "", (decimal)rd["valorcalculado"] + "", "MODIFICAR");
                                                log.LogEvento(fnSistema.sqlConn);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }
        #endregion

        #region "SUSPENSION LABORAL "
        /// <summary>
        /// Setea los valores correspondientes para cotzacion afp, solo
        /// para casos de suspension laboral
        /// </summary>
        /// <param name="pMontoMes">Monto de cotizacion si hubise trabajado mes completo</param>
        /// <param name="pDias13">Dias suspension cod 13</param>
        /// <param name="pDias14">Dias suspension cod 14</param>
        /// <param name="pDias15">Dias suspension cod 15</param>
        ///<param name="EsIps">Si es true se asume que el monto viene calculado al 100%</param>
        private void SetAfp(double pMontoMes, double pDias13, double pDias14, 
            double pDias15, StringBuilder Builder, 
            ItemTrabajador pObjeto, int pCount,  bool? EsIps = false)
        {
            double Monto = 0;

            if (pDias13 > 0)
            {
                Monto = Math.Round(pMontoMes);
                if((bool)EsIps)
                    varSistema.ActualizarValorLista(Monto, "sysafpsp13");
                else
                    //varSistema.ActualizarValorLista(((pMontoMes / 15) * pDias13), "sysafpsp13");
                    varSistema.ActualizarValorLista(Monto, "sysafpsp13");

                Builder.Append(GetBuilder(Monto, pObjeto, 1, 0, pCount));

            }
            else
                varSistema.ActualizarValorLista(0, "sysafpsp13");

            if (pDias14 > 0)
            {
                Monto = Math.Round(pMontoMes);

                if ((bool)EsIps)
                    varSistema.ActualizarValorLista(Monto, "sysafpsp14");
                else
                    varSistema.ActualizarValorLista(Monto, "sysafpsp14");

                Builder.Append(GetBuilder(Monto, pObjeto, 0, 1, pCount));
            }
            else
                varSistema.ActualizarValorLista(0, "sysafpsp14");

            if (pDias15 > 0)
            {
                if ((bool)EsIps)
                    varSistema.ActualizarValorLista(Math.Round((pMontoMes / 30) * pDias15), "sysafpsp15");
                else
                    varSistema.ActualizarValorLista(Math.Round((pMontoMes / 15) * pDias15), "sysafpsp15");
            }
            else
                varSistema.ActualizarValorLista(0, "sysafpsp15");
        }

        /// <summary>
        /// Agrega una nueva cadena al stringbuilder global de insert para suspension
        /// </summary>
        /// <param name="Monto">Monto a guardar en el item</param>
        /// <param name="pObjeto">Objeto itemtrabajador</param>
        /// <param name="p13">Indica si es suspension codigo 13</param>
        /// <param name="p14">Indica si es suspension codigo 14</param>
        /// <param name="isLast"></param>
        private string GetBuilder(double Monto, ItemTrabajador pObjeto, int p13, int p14, int pCount)
        {

            StringBuilder Builder = new StringBuilder();
            
            Builder.Append("(");
            Builder.Append($"'{pObjeto.item}',");
            Builder.Append($"{pObjeto.periodo},");
            Builder.Append($"'{pObjeto.contrato}',");
            Builder.Append($"'{pObjeto.Rut}',");
            Builder.Append($"{pCount}, ");
            Builder.Append($"'{pObjeto.formula}',");
            Builder.Append($"{pObjeto.tipo},");
            Builder.Append($"{pObjeto.orden},");
            //escalse
            Builder.Append("0,");
            //valor original
            Builder.Append($"{Monto},");
            //valor calculado
            Builder.Append($"{Monto},");
            Builder.Append("0,");
            Builder.Append("0,");
            Builder.Append("0,");
            Builder.Append("0,");
            Builder.Append($"{(pObjeto.AplicaUf == false ? 0: 1)},");
            Builder.Append($"{(pObjeto.AplicaPesos == false ? 0: 1)},");
            Builder.Append($"{(pObjeto.AplicaPorcentaje == false ? 0: 1)},");
            Builder.Append("0,");
            //splab13
            Builder.Append($"{p13},");
            //splab14
            Builder.Append($"{p14}");            
            Builder.Append("),\n");

            return Builder.ToString();

        }

        /// <summary>
        /// Setea los valores correspondientes para cotzacion salud, solo
        /// para casos de suspension laboral
        /// </summary>
        /// <param name="pMontoMes">Monto contizacion si hubise trabajado mes completo</param>
        /// <param name="pDias13"></param>
        /// <param name="pDias14"></param>
        /// <param name="pDias15"></param>
        private void SetSalud(double pMontoMes, double pDias13, double pDias14,
            double pDias15, StringBuilder Builder, ItemTrabajador pObjeto, int pCount)
        {

            if (pDias13 > 0)
            {
               // Monto = Math.Round(pMontoMes);

                varSistema.ActualizarValorLista(pMontoMes, "syssaludsp13");

                Builder.Append(GetBuilder(pMontoMes, pObjeto, 1, 0, pCount));
            }
            else
            {
                varSistema.ActualizarValorLista(0, "syssaludsp13");
            }


            if (pDias14 > 0)
            {

                varSistema.ActualizarValorLista(Math.Round(pMontoMes), "syssaludsp14");

                Builder.Append(GetBuilder(pMontoMes, pObjeto, 0, 1, pCount));

            }
            else
            {
                varSistema.ActualizarValorLista(0, "syssaludsp14");
            }              

            if (pDias15 > 0)
                varSistema.ActualizarValorLista(pMontoMes, "syssaludsp15");
            else
                varSistema.ActualizarValorLista(0, "syssaludsp15");
        }

        /// <summary>
        /// Setea los valores correspondientes para cotizacion seguro de cesantia empleado
        /// </summary>
        /// <param name="pMontoMes">Monto Cotizacion si hubiese trabajado mes completo</param>
        /// <param name="pDias13"></param>
        /// <param name="pDias14"></param>
        /// <param name="pDias15"></param>
        private void SetScemple(double pMontoMes, double pDias13, double pDias14,
            double pDias15, StringBuilder Builder, ItemTrabajador pObjeto, int pCount)
        {
            double Monto = 0;

            if (pDias13 > 0)
            {
                varSistema.ActualizarValorLista(pMontoMes, "syssegtrabsp13");

                Builder.Append(GetBuilder(pMontoMes, pObjeto, 1, 0, pCount));

            }
            else
                varSistema.ActualizarValorLista(0, "syssegtrabsp13");

            if (pDias14 > 0)
            {
                varSistema.ActualizarValorLista(pMontoMes, "syssegtrabsp14");
                Builder.Append(GetBuilder(pMontoMes, pObjeto, 0, 1, pCount));

                double d = varSistema.ObtenerValorLista("syssegtrabsp14");

            }
            else
                varSistema.ActualizarValorLista(0, "syssegtrabsp14");

            if (pDias15 > 0)
                varSistema.ActualizarValorLista(0, "syssegtrabsp15");
            else
                varSistema.ActualizarValorLista(0, "syssegtrabsp15");
        }

        /// <summary>
        /// Setea los valores correspondientes para cotizacion seguro de cesantia empresa
        /// </summary>
        /// <param name="pMontoMes">Monto cotizacion si hubiese trabajado mes completo</param>
        /// <param name="pDias13"></param>
        /// <param name="pDias14"></param>
        /// <param name="pDias15"></param>
        private void SetSCempre(double pMontoMes, double pDias13, double pDias14,
     double pDias15, StringBuilder Builder, ItemTrabajador pObjeto, int pCount)
        {
            double Monto = 0;

            if (pDias13 > 0)
            {
               
                varSistema.ActualizarValorLista(pMontoMes, "syssegemsp13");

                Builder.Append(GetBuilder(pMontoMes, pObjeto, 1, 0, pCount));

            }                
            else
                varSistema.ActualizarValorLista(0, "syssegemsp13");

            if (pDias14 > 0)
            {
                varSistema.ActualizarValorLista(pMontoMes, "syssegemsp14");
                Builder.Append(GetBuilder(pMontoMes, pObjeto, 0, 1, pCount));

                double d = varSistema.ObtenerValorLista("syssegemsp14");

            }             
            else
                varSistema.ActualizarValorLista(0, "syssegemsp14");

            if (pDias15 > 0)
                varSistema.ActualizarValorLista(0, "syssegemsp15");
            else
                varSistema.ActualizarValorLista(0, "syssegemsp15");
        }

        /// <summary>
        /// Setea los valores correspondientes para cotizacion seguro de invalidez
        /// </summary>
        /// <param name="pMontoMes">Monto cotizacion si hubiese trabajado mes completo</param>
        /// <param name="pDias13"></param>
        /// <param name="pDias14"></param>
        /// <param name="pDias15"></param>
        private void SetSeginv(double pMontoMes, double pDias13, double pDias14,
   double pDias15, StringBuilder Builder, ItemTrabajador pObjeto, int pCount)
        {

            if (pDias13 > 0)
            {
                varSistema.ActualizarValorLista(Math.Round(pMontoMes), "sysinv13");

                Builder.Append(GetBuilder(pMontoMes, pObjeto, 1, 0, pCount));

            }
            else
                varSistema.ActualizarValorLista(0, "sysinv13");

            if (pDias14 > 0)
            {
                varSistema.ActualizarValorLista(pMontoMes, "sysinv14");

                Builder.Append(GetBuilder(pMontoMes, pObjeto, 0, 1, pCount));
            }
            else
                varSistema.ActualizarValorLista(0, "sysinv14");

            if (pDias15 > 0)
                varSistema.ActualizarValorLista(Math.Round((pMontoMes / 15) * pDias15), "sysinv15");
            else
                varSistema.ActualizarValorLista(0, "sysinv15");
        }

        /// <summary>
        /// Setea los valores correspondientes para cotizacion mutual
        /// </summary>
        /// <param name="pMontoMes">Monto cotizacion si hubiese trabajado mes completo</param>
        /// <param name="pDias13"></param>
        /// <param name="pDias14"></param>
        /// <param name="pDias15"></param>
        private void SetMutual(double pMontoMes, double pDias13, double pDias14,
double pDias15, int pCount)
        {
            double Monto = 0;

            if (pDias13 > 0)
            {
                varSistema.ActualizarValorLista(0, "sysmutual13");


            }              
            else
                varSistema.ActualizarValorLista(0, "sysmutual13");

            if (pDias14 > 0)
            {
                varSistema.ActualizarValorLista(0, "sysmutual14");
                

            }             
            else
                varSistema.ActualizarValorLista(0, "sysmutual14");

            if (pDias15 > 0)
                varSistema.ActualizarValorLista(0, "sysmutual15");
            else
                varSistema.ActualizarValorLista(0, "sysmutual15");
        }

        /// <summary>
        /// Setea los valores correspondientes para cotizacion ley sanna
        /// </summary>
        /// <param name="pMontoMes">Setea los valores correspondientes para cotizacio mutual</param>
        /// <param name="pDias13"></param>
        /// <param name="pDias14"></param>
        /// <param name="pDias15"></param>
        private void SetSanna(double pMontoMes, double pDias13, double pDias14,
double pDias15, StringBuilder Builder, ItemTrabajador pObjeto, int pCount)
        {

            if (pDias13 > 0)
            {
                varSistema.ActualizarValorLista(pMontoMes, "syssanna13");
                Builder.Append(GetBuilder(pMontoMes, pObjeto, 1, 0, pCount));
            }
                
            else
                varSistema.ActualizarValorLista(0, "syssanna13");

            if (pDias14 > 0)
            {
                varSistema.ActualizarValorLista(pMontoMes, "syssanna14");
                Builder.Append(GetBuilder(pMontoMes, pObjeto, 0, 1, pCount));
            }                
            else
                varSistema.ActualizarValorLista(0, "syssanna14");

            if (pDias15 > 0)
                varSistema.ActualizarValorLista(pMontoMes, "syssanna15");
            else
                varSistema.ActualizarValorLista(0, "syssanna15");
        }

        /// <summary>
        /// Setea los valores correspondientes para cotizacion ley sanna
        /// </summary>
        /// <param name="pMontoMes"></param>
        /// <param name="pDias13"></param>
        /// <param name="pDias14"></param>
        /// <param name="pDias15"></param>
        private void SetCaja(double pMontoMes, double pDias13, double pDias14, 
            double pDias15, StringBuilder Builder, ItemTrabajador pObjeto, int pCount)
        {
            double Monto = 0;
            if (pDias13 > 0)
            {
                varSistema.ActualizarValorLista(pMontoMes, "syscaja13");
                Builder.Append(GetBuilder(pMontoMes, pObjeto, 1, 0, pCount));
            }                
            else
                varSistema.ActualizarValorLista(0, "syscaja13");

            if (pDias14 > 0)
            {
                varSistema.ActualizarValorLista(pMontoMes, "syscaja14");
                Builder.Append(GetBuilder(pMontoMes, pObjeto, 0, 1, pCount));
            }                
            else
                varSistema.ActualizarValorLista(0, "syscaja14");

            if (pDias15 > 0)
                varSistema.ActualizarValorLista(pMontoMes, "syscaja15");
            else
                varSistema.ActualizarValorLista(0, "syscaja15");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pTrabajdor"></param>
        private void SetItemSuspension(Persona pTrabajador, StringBuilder pBuilder)
        {
            string Sql = "DELETE FROM ITEMTRABAJADOR where splab13 = 1 OR splab14 = 1 " +
                "AND contrato=@pContrato AND anomes=@pPeriodo ";

            //ORDEN DE INSERCION DE CAMPOS
            //coditem, anomes, contrato, rut, numitem, formula, 
            //tipo, orden, esclase, valor, valorcalculado, proporcional, 
            //permanente, contope, cuota, uf, pesos, porc, 
            //suspendido, splab13, splab14
            string sqlInsert = "INSERT INTO itemtrabajador(coditem, anomes, contrato, rut, numitem, formula, \n" +
                                "tipo, orden, esclase, valor, valorcalculado, proporcional, permanente, \n" +
                                "contope, cuota, uf, pesos, porc, suspendido, splab13, splab14) VALUES \n";

            if (pBuilder.ToString().Length > 0)
            {
                sqlInsert = sqlInsert + pBuilder.ToString();
                sqlInsert = sqlInsert.Substring(0, sqlInsert.Length - 2);
            }
            

            SqlCommand cmd;
            SqlConnection cn;
            SqlTransaction tr;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        tr = cn.BeginTransaction();

                        //Elimnar todos los registros que sean de suspension
                        try
                        {
                            using (cmd = new SqlCommand(Sql, cn))
                            {
                                cmd.Parameters.Add(new SqlParameter("@pContrato", pTrabajador.Contrato));
                                cmd.Parameters.Add(new SqlParameter("@pPeriodo", pTrabajador.PeriodoPersona));

                                cmd.Transaction = tr;
                                cmd.ExecuteNonQuery();
                            }

                            if (pBuilder.ToString().Length > 0)
                            {
                                using (cmd = new SqlCommand(sqlInsert, cn))
                                {
                                    cmd.Transaction = tr;
                                    cmd.ExecuteNonQuery();
                                }
                            }
                           

                            tr.Commit();
                        }
                        catch (Exception ex)
                        {
                            tr.Rollback();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                  
            }
        }

        #endregion


    }    

    //CLASE PARA MANIPULAR EL VALOR QUE DEVUELVE LA EXPRESION FORMULA DE SISTEMA 
    class FormulaSistema
    {   
        /// <summary>
        /// Devuelve expresion matematica correspondiente a formula
        /// </summary>
        /// <param name="pCode">Codigo formula</param>
        /// <returns></returns>
        public static string GetValueFormula(string pCode)
        {
            string value = "";
            string sql = "SELECT valor FROM formula WHERE codformula=@pCode";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETRO
                        cmd.Parameters.Add(new SqlParameter("@pCode", pCode));

                        object data = cmd.ExecuteScalar();
                        if (data != null)
                        {
                            value = (string)data;
                        }                        

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return value;
        }

        //OBTENER EL NUMERO DEL ITEM TRABAJADOR
        public static int GetItemNumber(string pContrato, int pPeriodo, string pItem)
        {
            int number = 0;
            string sql = "SELECT numitem FROM itemtrabajador WHERE contrato=@pContrato AND anomes=@pPeriodo " +
                "AND coditem=@pItem";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));

                        number = Convert.ToInt32(cmd.ExecuteScalar());

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return number;
        }
    }

    public class ItemTrabajador
    {
        /// <summary>
        /// Numero de item
        /// </summary>
        public int NumeroItem { get; set; }
        public string Rut { get; set; }
        ///   /// <summary>
        /// Contrato al cual está asociado el item
        /// </summary>
        public string contrato { get; set; } = "";       
        /// <summary>
        /// Numero de orden
        /// </summary>
        public int orden { get; set; }
        /// <summary>
        /// Codigo de item
        /// </summary>
        public string item { get; set; }
        /// <summary>
        /// Tipo al que pertenece el item
        /// <para>Haber</para>
        /// <para>Haber exento</para>
        /// <para>Descuentos Legales</para>
        /// <para>Descuentos</para>
        /// <para>Aportes</para>
        /// </summary>
        public int tipo { get; set; } = 0;
        /// <summary>
        /// Nombre descriptivo del item
        /// </summary>
        public string Descripcion { get; set; } = "";
      
        /// <summary>
        /// Valor base item
        /// </summary>
        public double valorOriginal { get; set; } = 0;
        /// <summary>
        /// Codigo de formula asociado al item
        /// </summary>
        public string formula { get; set; } = "";        
        /// <summary>
        /// Indica si el item es un item de clase.
        /// </summary>
        public bool esclase { get; set; }
        /// <summary>
        /// Indica si el item tiene el caracter de proporcional
        /// </summary>
        public bool proporcional { get; set; }
        /// <summary>
        /// Indica si el item tiene el caracter de permanente.
        /// </summary>
        public bool permanente { get; set; }
        /// <summary>
        /// Indica si el item aplica el tope 15% legal descuentos.
        /// </summary>
        public bool contope { get; set; }
        /// <summary>
        /// Indica si el valor del item está expresado en uf
        /// </summary>
        public bool AplicaUf { get; set; }
        /// <summary>
        /// Indica si el valor del item está expresado en pesos.
        /// </summary>
        public bool AplicaPesos { get; set; }
        /// <summary>
        /// Indica si el valor del item está expresado en porcentaje.
        /// </summary>
        public bool AplicaPorcentaje { get; set; }
        /// <summary>
        /// Periodo al que pertenece el item de trabajador.
        /// </summary>
        public int periodo { get; set; }
        /// <summary>
        /// Valor procesado del item.
        /// </summary>
        public double calculado { get; set; }

        public double Adicional { get; set; } = 0;

        /// <summary>
        /// Indica si el item del trabajador usa o no formula
        /// </summary>
        public bool UsaFormula { get; set; } = false;
        /// <summary>
        /// Expresion o formula matematica que usa el item
        /// </summary>
        public string ExpresionFormula { get; set; }
        /// <summary>
        /// Imponible del mes anterior al periodo estudiado
        /// </summary>
        public double ImponibleAnterior { get; set; } = 0;

        /// <summary>
        /// Indica si el item tiene caracter de informativo
        /// </summary>
        public bool Informativo { get; set; } = false;

        /// <summary>
        /// Indica si hay sobregiro de una liquidacion de mes anterior
        /// </summary>
        public bool ExisteSobreGiroAnterior { get; set; } = false;
        /// <summary>
        /// Entrega el monto del sobregiro anterioro
        /// </summary>
        public double MontoSobreGiroAnterior { get; set; }
        /// <summary>
        /// Indica si hay sobregiro en la liquidacion actual
        /// </summary>
        public bool ExisteSobregiro { get; set; } = false;

        /// <summary>
        /// Numero de item mayor ingresado
        /// </summary>
        public int MaxNum { get; set; }

        /// <summary>
        /// Monto afp para calculo de afp y sis cuando se acoge a suspension laboral
        /// </summary>
        public double MontoAfc { get; set; }

        /// <summary>
        /// Indica la cuota (si aplica)
        /// </summary>
        public string Cuota { get; set; }

        /// <summary>
        /// Indica si la persona tiene licencias en el mes
        /// </summary>
        public bool HayLicencia { get; set; }

        /// <summary>
        /// Solo para saber si existe dato para este contrato en tabla datos calculo
        /// </summary>
        public bool ExisteImpAnterior { get; set; }

        //Codigo de afiliacion de empresa (solo para calculo de liquidacion)
        public int Afiliacion { get; set; }

        /// <summary>
        /// Imponible para calculo de contratos con licencia
        /// </summary>
        public double ImpLicencia { get; set; }


        //CONSTRUCTOR 
        public ItemTrabajador()
        {
            //...
        }

        /*SABER SI UN ITEM APLICA CUOTA*/
        public static bool AplicaCuota(string pContrato, int pPeriodo, string pItem, int pNumitem)
        {
            bool aplica = false;
            string sql = "SELECT cuota FROM itemtrabajador WHERE contrato=@pContrato AND anomes=@pPeriodo " +
                "AND numitem=@pNum AND coditem=@pItem";
            string cuota = "";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNumitem));
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));

                        cuota = (string)cmd.ExecuteScalar();
                        if (cuota != "0")
                            aplica = true;

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return aplica;
        }

        /*OBTENER EL NUMERO DE CUOTA*/
        public static string GetNumeroCuota(string pContrato, int pPeriodo, string pItem, int pNumitem)
        {
            string cuota = "";
            string[] separa = new string[2];
            string sql = "SELECT cuota FROM itemtrabajador WHERE contrato=@pContrato AND anomes=@pPeriodo " +
                "AND numitem=@pNum AND coditem=@pItem";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNumitem));
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));

                        cuota = (string)cmd.ExecuteScalar();
                        if (cuota.Contains("/"))
                        {
                            separa = cuota.Split('/');
                            if(separa.Length > 0)
                                cuota = separa[0];
                        }

                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return cuota;
        }

        /*OBTENER EL TOTAL DE CUOTAS*/
        public static string GetTotalCuotas(string pContrato, int pPeriodo, string pItem, int pNumitem)
        {
            string cuota = "";
            string[] separa = new string[2];
            string sql = "SELECT cuota FROM itemtrabajador WHERE contrato=@pContrato AND anomes=@pPeriodo " +
                "AND numitem=@pNum AND coditem=@pItem";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNumitem));
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));

                        cuota = (string)cmd.ExecuteScalar();
                        if (cuota.Contains("/"))
                        {
                            separa = cuota.Split('/');
                            if (separa.Length > 0)
                                cuota = separa[1];
                        }

                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return cuota;
        }

        /*GENERA CADENA DESDE CUOTA*/
        public static string GetCadenaCuota(string pCuota)
        {
            string cadena = "";
            string[] separador = new string[2];
            if (pCuota.Length>0)
            {
                separador = pCuota.Split('/');

                cadena = $"Cuota n° {separador[0]} de {separador[1]}";
            }

            return cadena;
        }

        public static bool CuotaValida(string pCuota)
        {
            bool valida = false;
            if (pCuota.Length == 0)
                return false;

            if (pCuota.Contains("/") == false)
                return false;

            string[] separador = new string[2];
            if (pCuota.Length > 0)
            {
                separador = pCuota.Split('/');
                if (separador.Length == 0)
                    return false;

                if (separador[0].Length == 0)
                    return false;
                if (separador[1].Length == 0)
                    return false;

                if (fnSistema.IsNumeric(separador[0]) == false)
                    return false;
                if (fnSistema.IsNumeric(separador[1]) == false)
                    return false;

                int n1 = 0, n2 = 0;
                //Numero de cuota
                n1 = Convert.ToInt32(separador[0]);
                //Total de cuotas
                n2 = Convert.ToInt32(separador[1]);

                //Numero de cuotas es mayor al total de cuotas=???
                if (n1 > n2)
                    return false;

                valida = true;

            }


            return valida;

                  
        }

        /*GENERA CADENA CUOTA DESDE BD*/
        public static string GetCadenaCuotaFromBd(string pContrato, int pPeriodo, string pItem, int pNumitem)
        {
            string cuota = "";
            string[] separa = new string[2];
            string sql = "SELECT cuota FROM itemtrabajador WHERE contrato=@pContrato AND anomes=@pPeriodo " +
                "AND numitem=@pNum AND coditem=@pItem";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNumitem));
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));

                        cuota = (string)cmd.ExecuteScalar();
                        if (cuota.Contains("/"))
                        {
                            separa = cuota.Split('/');
                            if (separa.Length > 0)
                                cuota = $"Cuota n° {separa[0]} de {separa[1]}";
                        }

                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return cuota;
        }

        /*PLAN ISAPRE (PESOS O UF)*/
        public static int PlanIsapre(string pContrato, int pPeriodo, string pItem, int pNum)
        {
            string sql = "SELECT uf, pesos, porc FROM itemtrabajador WHERE contrato=@pContrato AND " +
                "anomes=@pPeriodo AND coditem=@pItem AND numitem=@pNum";
            SqlCommand cmd;
            SqlDataReader rd;
            int option = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNum));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //PARAMETROS
                                if ((bool)rd["uf"])
                                    option = 1;
                                if ((bool)rd["pesos"])
                                    option = 2;
                                if ((bool)rd["porc"])
                                    option = 3;
                            }
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return option;
        }

        /*VER SI APLICA PORCENTAJE PARA FONASA*/
        public static bool AplicaPorcFonasa(string pContrato, int pPeriodo, string pItem, int pNum)
        {
            string sql = "SELECT porc FROM itemtrabajador WHERE contrato=@pContrato AND" +
                " anomes=@pPeriodo AND coditem=@pItem AND numitem=@pNum";
            bool aplica = false;
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNum));

                        if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                            aplica = true;
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return aplica;
        }

        //OBTENER ORDEN DESDE CODIGO ITEM
        public static int GetOrdenFromItem(string pItem)
        {
            int orden = 0;
            string sql = "SELECT orden FROM item WHERE coditem = @pItem";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));

                        orden = Convert.ToInt32(cmd.ExecuteScalar());
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return orden;
        }

        //OBTENER EL VALOR CALCULADO DEL ITEM
        public static double GetValCal(string pItem, string pContrato, int pPeriodo, int pNum)
        {
            string sql = "SELECT valorcalculado FROM itemtrabajador WHERE coditem=@pItem AND " +
                "numitem=@pNum AND contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            double val = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNum));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        val = Convert.ToDouble(cmd.ExecuteScalar());
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();                        
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return val;
        }

        //TOTAL HABERES
        public static double GetTotalHaberes(string pContrato, int pPeriodo)
        {
            double val = 0;
            string sql = "SELECT ISNULL(SUM(valorcalculado), 0) as total FROM itemtrabajador WHERE " +
                "contrato=@pContrato AND anomes=@pPeriodo AND (tipo = 1 OR tipo = 2 OR tipo = 3)";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        val = Convert.ToDouble(cmd.ExecuteScalar());
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return val;
        }

        //TOTAL LLSS (SIN SCEMPRE , SIN SEGINV)
        public static double GetTotalLLSS(string pContrato, int pPeriodo)
        {
            double val = 0;
            string sql = "SELECT ISNULL(SUM(valorcalculado), 0) as total FROM itemtrabajador WHERE " +
                "contrato=@pContrato AND anomes=@pPeriodo AND TIPO = 4 AND (coditem <> 'SEGINV' AND coditem <> 'SCEMPRE')";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        val = Convert.ToDouble(cmd.ExecuteScalar());
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return val;
        }

        //VERIFICAR SI EL ITEM IMPRIME BASE
        public static bool ImprimeBase(string pItem)
        {
            bool imprime = false;
            string sql = "SELECT imprimeBase FROM item WHERE coditem=@pItem";
            SqlCommand cmd;
            try
            {

                 using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                   {
                        //PARAMETROS
                    cmd.Parameters.Add(new SqlParameter("@pItem", pItem));

                    imprime = (bool)cmd.ExecuteScalar();

                    cmd.Dispose();
                      
                   }

            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return imprime;
        }

        //VERIFICAR SI EL ITEM IMPRIME
        public static bool Imprime(string pItem)
        {
            string sql = "SELECT imprime FROM itemtrabajador WHERE coditem=@pItem";
            SqlCommand cmd;
            bool imprime = false;
            try
            {                
                using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                {
                   //PARAMETERS
                   cmd.Parameters.Add(new SqlParameter("@pItem", pItem));

                   imprime = (bool)cmd.ExecuteScalar();
                   cmd.Dispose();                        
                }                
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return imprime;
        }

        //OBTENER VALOR ITEM
        public static double GetValue(string pItem, string pContrato, int pPeriodo)
        {
            double total = 0;
            string sql = "SELECT ISNULL(SUM(valorcalculado), 0) as total from itemtrabajador " +
                         "WHERE coditem =@pItem AND anomes=@pPeriodo AND contrato=@pContrato" +
                         " AND suspendido = 0";                         
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        total = Convert.ToDouble(cmd.ExecuteScalar());
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();                        
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return total;
        }

        //EXISTE ITEM?
        public static bool Existe(string pItem, string pContrato, int pPeriodo)
        {
            bool existe = false;
            string sql = "SELECT count(*) FROM itemtrabajador WHERE coditem=@pItem AND contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            int count = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        count = Convert.ToInt32(cmd.ExecuteScalar());
                        if (count > 0)
                            existe = true;

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
               //ERROR
            }

            return existe;
        }

        //ELIMINAR
        public static void Eliminar(string pItem, string pContrato, int pPeriodo)
        {
            string sql = "DELETE from itemtrabajador WHERE coditem=@pItem AND contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        //ELIMINAR CONSIDERANDO EL NUMERO DE ITEM (DUPLICIDAD DE ITEM)
        public static void EliminarNum(string pItem, string pContrato, int pPeriodo, int pNum)
        {
            string sql = "DELETE from itemtrabajador WHERE coditem=@pItem AND contrato=@pContrato AND anomes=@pPeriodo AND numitem=@pNum";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNum));

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        //GET INFO DATA
        public static ItemTrabajador GetInfo(string pItem, string pContrato, int pPeriodo, int pNum)
        {
            ItemTrabajador trab = new ItemTrabajador();
            string sql = "select rut, contrato, anomes, numitem, coditem, formula, tipo, " +
                         "orden, esclase, valor, valorcalculado, proporcional, " +
                         "permanente, contope, cuota, uf, pesos, porc " +
                         "FROM itemtrabajador WHERE contrato=@pContrato AND anomes=@pPeriodo " +
                         "AND numitem=@pNum AND coditem=@pItem";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        cmd.Parameters.Add(new SqlParameter("@pNum", pNum));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS OBJETO
                                trab.AplicaPesos = (bool)rd["pesos"];
                                trab.AplicaPorcentaje = (bool)rd["porc"];
                                trab.AplicaUf = (bool)rd["uf"];
                                trab.contope = (bool)rd["contope"];
                                trab.contrato = (string)rd["contrato"];
                                trab.periodo = Convert.ToInt32(rd["anomes"]);
                                trab.esclase = (bool)rd["esclase"];
                                trab.formula = (string)rd["formula"];
                                trab.item = (string)rd["coditem"];
                                trab.NumeroItem = Convert.ToInt32(rd["numitem"]);
                                trab.orden = Convert.ToInt32(rd["orden"]);
                                trab.permanente = (bool)rd["permanente"];
                                trab.proporcional = (bool)rd["proporcional"];
                                trab.tipo = Convert.ToInt32(rd["proporcional"]);
                                trab.valorOriginal = Convert.ToDouble(rd["valor"]);
                                trab.calculado = Convert.ToDouble(rd["valorcalculado"]);                               
                                
                            }
                        }

                        cmd.Dispose();
                        rd.Close();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return trab;
        }

        //INGRESAR ITEM
        public static void NuevoItem(string pContrato, int pPeriodo, string pRut, string pCoditem, int pNum, string pFormula, int pTipo, 
            int pOrden, bool pEsclase, double pValor, double pCalculado, bool pProp, bool pPerma, bool pTope, 
            bool pCuota, bool pUf, bool pPesos, bool pPorc)
        {
            string sql = "INSERT INTO itemtrabajador(contrato, anomes, rut, coditem, numitem, formula, tipo, " +
                "orden, esclase, valor, valorcalculado, proporcional, permanente, contope, cuota, uf, pesos, " +
                "porc) VALUES(@pContrato, @pAnomes, @pRut, @pCoditem, @pNum, @pFormula, @pTipo, @pOrden, " +
                "@pEsclase, @pValor, @pCalculado, @pProp, @pPerma, @pContope, @pCuota, @pUf, @pPesos, @pPorc)";

            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pAnomes", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                            cmd.Parameters.Add(new SqlParameter("@pCoditem", pCoditem));
                            cmd.Parameters.Add(new SqlParameter("@pNum", pNum));
                            cmd.Parameters.Add(new SqlParameter("@pFormula", pFormula));
                            cmd.Parameters.Add(new SqlParameter("@pTipo", pTipo));
                            cmd.Parameters.Add(new SqlParameter("@pOrden", pOrden));
                            cmd.Parameters.Add(new SqlParameter("@pEsclase", pEsclase));
                            cmd.Parameters.Add(new SqlParameter("@pValor", pValor));
                            cmd.Parameters.Add(new SqlParameter("@pCalculado", pCalculado));
                            cmd.Parameters.Add(new SqlParameter("@pProp", pProp));
                            cmd.Parameters.Add(new SqlParameter("@pPerma", pPerma));
                            cmd.Parameters.Add(new SqlParameter("@pContope", pTope));
                            cmd.Parameters.Add(new SqlParameter("@pCuota", pCuota));
                            cmd.Parameters.Add(new SqlParameter("@pUf", pUf));
                            cmd.Parameters.Add(new SqlParameter("@pPesos", pPesos));
                            cmd.Parameters.Add(new SqlParameter("@pPorc", pPorc));

                            cmd.ExecuteNonQuery();

                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        //ACTUALIZAR ITEM
        public static void ActualizarItem(string pContrato, int pPeriodo, string pCoditem, int pNum, double pCalculado, 
            double pValor)
        {
            string sql = "UPDATE itemtrabajador SET " +
                         "valor=@pValor, valorcalculado=@pCalculado " +
                         "WHERE coditem=@pCoditem AND contrato=@pContrato AND anomes=@pPeriodo AND numitem=@pNum";

            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pNum", pNum));
                            cmd.Parameters.Add(new SqlParameter("@pCoditem", pCoditem));
                            cmd.Parameters.Add(new SqlParameter("@pValor", pValor));
                            cmd.Parameters.Add(new SqlParameter("@pCalculado", pCalculado));

                            cmd.ExecuteNonQuery();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
             
        }

        //OBTENER EL ULTIMO NUMERO ITEM INGRESADO + 1 (SOLO PARA INGRESAR NUEVO ITEM)
        public static int LastNumber(string pContrato, int pPeriodo)
        {
            int num = 0;
            string sql = "SELECT ISNULL(MAX(numitem), 0) FROM itemtrabajador WHERE contrato=@pContrato AND " +
                "anomes=@pPeriodo";

            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                num = Convert.ToInt32(data);
                                if (num == 0)
                                    num = 1;
                                else
                                    num++;
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {                 
                //ERROR DE CONEXION...
            }
            return num;
        }

        //OBTENER NUMERO DEL ITEM
        public static int Number(string pContrato, int pPeriodo, string pCoditem)
        {
            string sql = "SELECT ISNULL(numitem, 0) FROM itemtrabajador WHERE coditem =@pCoditem AND " +
                "contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCoditem", pCoditem));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                count = Convert.ToInt32(cmd.ExecuteScalar());
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return count;
        }

        //HAY ITEMS QUE SUPERAN EL TOPE DEL 15%?
        public static bool SuperaTope(int pPeriodo)
        {
            bool supera = false;
            string sql = "SELECT count(*) FROM itemtrabajador " +
                         "INNER JOIN calculomensual ON calculoMensual.anomes = itemTrabajador.anomes " +
                         "AND calculoMensual.contrato = itemTrabajador.contrato " +                        
                         "WHERE valorcalculado > (0.15 * sysliq) AND itemTrabajador.anomes = @pPeriodo AND itemTrabajador.tipo = 5";
            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand())
                        {

                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }


            return supera;
        }
        /// <summary>
        /// Permite cargar un combo box para modalida de item
        /// </summary>
        /// <param name="pCombo"></param>
        public static void ComboModalidad(LookUpEdit pCombo)
        {
            List<PruebaCombo> listado = new List<PruebaCombo>();

            listado.Add(new PruebaCombo() { key = 1, desc = "FIJO" });
            listado.Add(new PruebaCombo() { key = 2, desc = "VARIABLE" });

            //PROPIEDADES COMBOBOX
            pCombo.Properties.DataSource = listado.ToList();
            pCombo.Properties.ValueMember = "key";
            pCombo.Properties.DisplayMember = "desc";

            pCombo.Properties.PopulateColumns();

            //ocultamos la columan key
            pCombo.Properties.Columns[0].Visible = false;

            pCombo.Properties.SearchMode = DevExpress.XtraEditors.Controls.SearchMode.AutoComplete;
            pCombo.Properties.AutoSearchColumnIndex = 1;
            pCombo.Properties.ShowHeader = false;

            pCombo.ItemIndex = 0;
        }


        /// <summary>
        /// Indica si existe un codigo de item
        /// </summary>
        /// <returns></returns>
        public static bool ExisteItemBase(string pCodigo)
        {
            bool ex = false;
            string sql = "SELECT count(*) FROM item WHERE coditem=@pItem";
            SqlCommand cmd;
            SqlConnection cn;
            if (pCodigo.Length > 0)
            {
                cn = fnSistema.OpenConnection();
                try
                {
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pItem", pCodigo));

                                if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                                    ex = true;

                                cmd.Dispose();

                            }
                        }
                    }
                }
                catch (SqlException exe)
                {
                    //Error...
                }
              
            }

            return ex;
        }

    }

    class ItemBase
    {
        //DATO DE ENTRADA CODIGO ITEM
        public string Codigo { get; set; }

        //PROPIEDADES RESTANTES
        public string Descripcion { get; set; }
        public int Tipo { get; set; } = 0;
        public string Formula { get; set; }
        public int Orden { get; set; } = 0;
        public bool Imprime { get; set; }
        public bool Informacion { get; set; }
        public bool ImprimeBase { get; set; }
        public bool Proporcional { get; set; }
        public bool Sistema { get; set; }
        public bool previsualizar { get; set; }
        public bool tope { get; set; }
        public Int16 modalidad { get; set; }

        public ItemBase(string pCodigo)
        {
            Codigo = pCodigo;
        }

        //VERIFICAR QUE CODIGO INGRESADO EXISTA
        private bool Existe()
        {
            bool ex = false;
            string sql = "SELECT count(*) FROM item WHERE coditem=@pItem";
            SqlCommand cmd;
            if (this.Codigo.Length > 0)
            {
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pItem", this.Codigo));

                            if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                                ex = true;

                            cmd.Dispose();
                            fnSistema.sqlConn.Close();
                        }
                    }
                }
                catch (SqlException exp)
                {
                  //ERROR
                }
            }

            return ex;
        }

        //GET INFO ITEM
        public void Setinfo()
        {
            string sql = "select coditem, descripcion, tipo, formula, orden, imprime, " +
                         "informacion, imprimebase, proporcional, sistema, previsualizar, tope, modalidad FROM item " +
                         "WHERE coditem=@pItem";
            
            SqlCommand cmd;
            SqlDataReader rd;
            if (this.Codigo.Length > 0)
            {
                if (Existe())
                {
                    try
                    {
                        if (fnSistema.ConectarSQLServer())
                        {
                            using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pItem", this.Codigo));

                                rd = cmd.ExecuteReader();
                                if (rd.HasRows)
                                {
                                    while (rd.Read())
                                    {
                                        //SETEAMOS PROPIEDADES
                                        this.Descripcion = (string)rd["descripcion"];
                                        this.Formula = (string)rd["formula"];
                                        this.Imprime = (bool)rd["imprime"];
                                        this.ImprimeBase = (bool)rd["imprimebase"];
                                        this.Informacion = (bool)rd["informacion"];
                                        this.Orden = Convert.ToInt32(rd["orden"]);
                                        this.Proporcional = (bool)rd["proporcional"];
                                        this.Sistema = (bool)rd["sistema"];
                                        this.Tipo = Convert.ToInt32(rd["tipo"]);
                                        this.previsualizar = (bool)rd["previsualizar"];
                                        this.tope = (bool)rd["tope"];
                                        this.modalidad = Convert.ToInt16(rd["modalidad"]);
                                    }
                                }

                                cmd.Dispose();
                                fnSistema.sqlConn.Close();
                                rd.Close();
                            }
                        }
                    }
                    catch (SqlException ex)
                    {
                        //
                    }
                }                
            }
        }
        
    }
 
    /// <summary>
    /// Clase que nos permite manipular variables internas del sistema
    /// </summary>
    class varSistema
    {
        /// <summary>
        /// Nombre de la variable
        /// </summary>
        public string nombre { get; set; } = "";
        /// <summary>
        /// Valor variable
        /// </summary>
        public double valor  { get; set; } = 0;

        /// <summary>
        /// Listado de variables de sistema
        /// </summary>
        public static List<varSistema> listado ;

        //CONSTRUCTOR
        public varSistema()
        {
           //SIN PARAMETROS
        }
   
        public varSistema(string name, double value)
        {
            nombre = name;
            valor = value;
        }

        #region "GET-SET"
        //SET
        public void setNombre(string name)
        {
            nombre = name;
        }

        public void setValor(double value)
        {
            valor = value;
        }

        //GET
        public string getNombre()
        {
            return nombre;
        }

        public double getValor()
        {
            return valor;
        }

        #endregion

        /// <summary>
        /// Genera un listado con todas las variables del sistema.
        /// </summary>
        /// <param name="ls">Listado donde se guardaran las variables</param>
        public static void CargarListadoVariables(List<varSistema> ls)
        {
            listado = new List<varSistema>();
            if (ls.Count>0)
            {
                foreach (var item in ls)
                {
                    listado.Add(new varSistema() { nombre = (item.nombre).ToLower(), valor = item.valor});
                    
                }

                //listado.Add(new varSistema() { nombre = "systributo", valor = 0});
            }
        }

        /// <summary>
        /// Permite actualizar un valor para una variable de sistema determinada.
        /// </summary>
        /// <param name="valor">Nuevo valor</param>
        /// <param name="variable">Nombre variable</param>
        public static void ActualizarValorLista(double valor, string variable)
        {
            string elemento = "";
            //RECORREMOS LISTA LISTADO
            foreach (var item in listado)
            {
                elemento = item.nombre;
                if (elemento.Equals(variable))
                {
                    //REEMPLAZAMOS VALOR VARIABLE
                    item.valor = valor;
                }
            }
        }

        /// <summary>
        /// Permite consultar el valor de una variable de sistema.
        /// </summary>
        /// <param name="variable">Nombre variable</param>
        /// <returns></returns>
        public static double ObtenerValorLista(string variable)
        {
            string elemento = "";
            double res = 0;
            if (listado.Count>0)
            {
                foreach (var item in listado)
                {
                    elemento = item.nombre;
                    if (elemento.Equals(variable))
                    {
                        //SI SON IGUALES OBTENEMOS SU VALOR
                        res = item.valor;
                    }
                }
            }
            return res;
        }

        /// <summary>
        /// Deja en 0 como valor por defecto todas las variables.
        /// </summary>
        /// <param name="listado">Listado de variables</param>
        public static void ResetVariables(List<varSistema> listado)
        {
            if (listado.Count > 0)
            {
                foreach (var item in listado)
                {
                    item.valor = 0;
                }
            }            
        }
    }

    class Calculo
    {
        /// <summary>
        /// Representa el periodo en evaluacion.
        /// </summary>
        public static int PeriodoObservado = 0;
        //SI CALCULANDO ESTA EN 0 NO SE ESTA REALIZANDO CALCULO REMUNERACIONES

        //LISTADO DE CONTRATOS QUE SUPERAN EL TOPE 15%
        //public static List<ItemTope> ItemsTope = new List<ItemTope>();

        /// <summary>
        /// Delegado que nos permite mostrar los nombres de los trabajadores en la barra de progreso en otro hilo de ejecucion.
        /// </summary>
        /// <param name="pName">Nombre del trabajador.</param>
        /// <param name="pForm">Formulario desde donde se invoca el delegado.</param>
        /// <param name="pControl">Control que nos permite mostrar el nombre</param>
        delegate void ShowEmploye(string pName, XtraForm pForm, LabelControl pControl);

        //INSERTAR NUEVO REGISTRO EN TABLA CALCULO TEMPORAL
        //INSERTAR VALORES PARCIALES EN TABLA DE CALCULOS
        public static void NuevoParcial(string contrato, int orden, string item, double original, double calculado, int periodo, int numitem)
        {
            string sql = "INSERT INTO calculo(contrato, orden, item, original, calculado, anomes, numitem) VALUES" +
                "(@contrato, @orden, @item, @original, @calculado, @anomes, @numitem)";
            SqlCommand cmd;
            int res = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@contrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@orden", orden));
                        cmd.Parameters.Add(new SqlParameter("@item", item));
                        cmd.Parameters.Add(new SqlParameter("@original", original));
                        cmd.Parameters.Add(new SqlParameter("@calculado", calculado));
                        cmd.Parameters.Add(new SqlParameter("@anomes", periodo));
                        cmd.Parameters.Add(new SqlParameter("@numitem", numitem));

                        res = cmd.ExecuteNonQuery();
                        if (res > 0)
                        {
                            //INGRESO CORRECTO
                        }
                        else
                        {
                            //ERROR AL INTENTAR INGRESAR
                        }
                    }
                    //LIBERAR RECURSOS
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        public static void ActualizarParcial(string contrato, string item, double original, double calculado, int periodo, int numitem)
        {
            string sql = "UPDATE calculo SET original=@pOriginal, calculado=@pCalculado WHERE contrato=@pContrato " +
                "AND anomes=@pPeriodo AND item=@pItem AND numitem=@pNum";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pOriginal", original));
                        cmd.Parameters.Add(new SqlParameter("@pCalculado", calculado));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));
                        cmd.Parameters.Add(new SqlParameter("@pItem", item));
                        cmd.Parameters.Add(new SqlParameter("@pNum", numitem));

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        //RESETEAR VALORES CALULADOS PARA ESE CONTRATO
        public static void ResetCalculoParcial(string contrato, int periodo)
        {
            string sql = "DELETE FROM calculo WHERE contrato=@pcontrato AND anomes=@periodo";
            int res = 0;
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        res = cmd.ExecuteNonQuery();
                        if (res > 0)
                        {
                            //RESET CORRECTO
                        }
                        else
                        {
                            //RESET INCORRECTO
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// Actualiza el valor para un determinado codigo de item
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado</param>
        /// <param name="orden">Numero de orden</param>
        /// <param name="numitem">Numero de item</param>
        /// <param name="item">Codigo de item</param>
        /// <param name="original">Valor original item</param>
        /// <param name="calculado">Valor calculado item</param>
        /// <param name="periodo">Periodo al que pertenece el item</param>
        public static void ActualizarCalculoItem(string contrato, int orden, int numitem, string item, double original, double calculado, int periodo)
        {
            string sql = "UPDATE itemtrabajador SET valor=@pvalor, valorcalculado=@pcalculado WHERE" +
                " contrato=@pcontrato AND coditem=@pitem AND orden=@porden AND numitem=@pnumitem AND anomes=@periodo";
            SqlCommand cmd;
            int res = 0;
            try
            {
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pvalor", original));
                            cmd.Parameters.Add(new SqlParameter("@pcalculado", calculado));
                            cmd.Parameters.Add(new SqlParameter("@pcontrato", contrato));
                            cmd.Parameters.Add(new SqlParameter("@pitem", item));
                            cmd.Parameters.Add(new SqlParameter("@porden", orden));
                            cmd.Parameters.Add(new SqlParameter("@pnumitem", numitem));
                            cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                            res = cmd.ExecuteNonQuery();
                            if (res > 0)
                            {
                                //ACTUALIZACION CORRECTA!
                            }
                            else
                            {
                                //NO SE PUDO ACTUALIZAR!!
                            }
                        }
                    }
                }
                catch (OverflowException ex)
                {
                   //                
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show("Hay un error.\n Por favor verifique los valores ingresados.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
            }
        }

        /// <summary>
        /// Indica si la persona tiene imponible anterior registrado. Solo para periodo con licencia.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <returns></returns>
        public static bool ExisteImpAnterior(string pContrato)
        {
            string sql = "SELECT count(*) FROM datoscalculo WHERE contrato=@pContrato";
            SqlCommand cmd;        
            bool existe = false;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        object data = cmd.ExecuteScalar();
                        if (data != DBNull.Value)
                        {
                            if (Convert.ToInt32(data) > 0)
                                existe = true;
                        }
                        //if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                        //    existe = true;
                       
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();                    

                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existe;
        }

        /// <summary>
        /// Registra el imponible anterior en el cual el trabajador tenga trabajado mes completo.
        /// </summary>
        /// <param name="contrato">Numero de contrato</param>
        /// <param name="imponible">Imponible a guardar.</param>
        public static void IngresarImponibleAnterior(string contrato, double imponible)
        {
            string sql = "INSERT INTO datosCalculo(contrato, imponibleanterior) " +
                "VALUES(@contrato, @imponibleanterior)";
            SqlCommand cmd;
            int res = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@contrato", contrato));                       
                        cmd.Parameters.Add(new SqlParameter("@imponibleanterior", imponible));

                        res = cmd.ExecuteNonQuery();
                        if (res > 0)
                        {
                            //INSERT CORRECTO
                            //XtraMessageBox.Show("ingreso correcto");
                        }
                        else
                        {
                            //ERROR...
                            //XtraMessageBox.Show("error!!");
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
                 
        }

        /// <summary>
        /// Actualiza imponible anterior
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado</param>
        /// <param name="imponible">valor imponible</param>
        public static void ModificarImponibleAnterior(string contrato, double imponible)
        {
            string sql = "UPDATE datoscalculo SET imponibleanterior=@imponibleanterior" +
                " WHERE contrato=@contrato";

            int res = 0;
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@imponibleanterior", imponible));
                        cmd.Parameters.Add(new SqlParameter("@contrato", contrato));                        

                        res = cmd.ExecuteNonQuery();
                        if (res > 0)
                        {
                            //actualizacion correcta
                        }
                        else
                        {
                            //ERROR AL INTENTAR ACTUALIZAR
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// Obtiene el imponible anterior almacenado para un contrato determinado.
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado.</param>
        /// <returns></returns>
        public static double ConsultaImpAnterior(string contrato)
        {
            string sql = "SELECT imponibleanterior FROM datoscalculo WHERE contrato=@contrato";
            SqlCommand cmd;
            SqlDataReader rd;
            double imponible = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@contrato", contrato));                        

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //GUARDAR VALOR 
                                imponible = Convert.ToDouble((decimal)rd["imponibleanterior"]);
                            }
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return imponible;
        }

        /// <summary>
        /// Obtiene la suma de los imponibles anteriores para un rut específico
        /// </summary>
        /// <param name="pRut"></param>
        /// <param name="periodoActual"></param>
        /// <returns></returns>
        public static double ConsultaImpAnteriorGlobal(string pRut, int periodoActual)
        {
            double total = 0;
            string sql = "SELECT ISNULL(SUM(imponibleanterior), 0) as total from datoscalculo " +
                         "INNER JOIN trabajador ON trabajador.contrato = datosCalculo.contrato AND trabajador.anomes = datoscalculo.anomesactual " +
                         "WHERE rut = @pRut AND anomesactual = @pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodoActual));

                        total = Convert.ToDouble(cmd.ExecuteScalar());

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();               
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return total;
        }

        /// <summary>
        /// Obtiene listado de contratos activos para un periodo determinado.
        /// </summary>
        /// <param name="periodo">Periodo consulta</param>
        /// <returns></returns>
        public static List<string> ListadoContratos(int periodo)
        {
            List<string> lista = new List<string>();
            string sql = "SELECT contrato FROM trabajador WHERE anomes=@periodo AND status=1";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                 if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    lista.Add((string)rd["contrato"]);
                                }
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                        fnSistema.sqlConn.Close();
                    }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return lista;
        }

        /// <summary>
        /// Obtiene listado de contrato activos o no para un determinado periodo.
        /// </summary>
        /// <param name="periodo">Periodo a consultar</param>
        /// <returns></returns>
        public static List<string> ListadoContratosPeriodo(int periodo)
        {
            List<string> lista = new List<string>();
            string sql = "SELECT contrato FROM trabajador WHERE anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                lista.Add((string)rd["contrato"]);
                            }
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return lista;
        }
        /// <summary>
        /// Retorna sql de acuerdo a condiciones del usuario y condiciones de busqueda.
        /// </summary>
        /// <param name="pFiltroUsuario">Cadena con filtro de usuario.</param>
        /// <param name="pConjunto">Cadena con codigo de conjunto desde formulario.</param>
        /// <param name="pPrivados">Nos indica si el trabajador puede o no ver fichas con caracter de privadas.</param>
        /// <returns></returns>
        public static string GetSqlFiltro(string pFiltroUsuario, string pConjunto, bool pPrivados, bool? UsaWhere = false)
        {
            string sql = "", Comienza = "AND";

            if ((bool)UsaWhere)
                Comienza = "WHERE";

            //USA FILTRO USUARIO?
            if (pFiltroUsuario != "0")
            {
                //USA CONJUNTO?
                if (pConjunto != "")
                {
                    //PUEDE VER FICHAS PRIVADAS?
                    if (pPrivados)
                    {
                        sql = $"{Comienza} {Conjunto.GetCondicionFromCode(pFiltroUsuario)} AND {Conjunto.GetCondicionFromCode(pConjunto)} ";
                    }
                    else
                    {
                        sql = $"{Comienza} {Conjunto.GetCondicionFromCode(pFiltroUsuario)} AND {Conjunto.GetCondicionFromCode(pConjunto)} AND privado = 0 ";
                    }
                }
                else
                {
                    //PUEDE VER FICHAS PRIVADAS?
                    if (pPrivados)
                        sql = $"{Comienza} {Conjunto.GetCondicionFromCode(pFiltroUsuario)} ";
                    else
                        sql = $"{Comienza} {Conjunto.GetCondicionFromCode(pFiltroUsuario)} AND privado = 0 ";
                    
                }
            }
            else
            {
                //USA CONJUNTO
                if (pConjunto != "")
                {
                    //PUEDE VER FICHAS PRIVADAS?
                    if (pPrivados)
                        sql = $"{Comienza} {Conjunto.GetCondicionFromCode(pConjunto)} ";
                    else
                        sql = $"{Comienza} {Conjunto.GetCondicionFromCode(pConjunto)} AND privado = 0";
                }
                else
                {
                    //PUEDE VER FICHAS PRIVADAS?
                    if (pPrivados)
                        sql = "";
                    else
                        sql = $"{Comienza} privado = 0";
                }
            }

            return sql;
        }

        /// <summary>
        /// Obtiene el ultimo periodo evaluado.
        /// </summary>
        /// <returns></returns>
        public static int PeriodoEvaluar()
        {
            int periodo = 0;
            string sql = "SELECT MAX(anomes) as periodo FROM parametro";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                periodo = (int)rd["periodo"];
                            }
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();                        
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return periodo;
        }

        /// <summary>
        /// Indica si existen registros en tabla parametros.
        /// </summary>
        /// <returns></returns>
        public static bool ExisteParametro()
        {
            bool existe = false;
            string sql = "SELECT count(*) FROM parametro";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                            existe = true;

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existe;
        }

        /// <summary>
        /// Graba datos de liquidacion histórica para un determinado trabajador.
        /// </summary>
        /// <param name="periodo">Periodo de registro.</param>
        /// <param name="contrato">Numero de contrato asociado.</param>
        /// <param name="imponible">Total imponible</param>
        /// <param name="haberes">Total haberes.</param>
        /// <param name="descuentos">Total descuentos.</param>
        /// <param name="liquido">Total liquido.</param>
        /// <param name="pago">Total pago.</param>
        /// <param name="pSobregiro">Valor sobregiro.</param>
        public static void GrabarDatosLiquidacion(int periodo, string contrato, double imponible, double haberes, 
            double descuentos, double liquido, double pago, double pSobregiro)
        {
            string sql = "INSERT INTO LIQUIDACIONHISTORICO(anomes, contrato, imponible, haberes, descuentos," +
                "liquido, pago, sobregiro) VALUES(@periodo, @contrato, @imponible, @haberes, @descuentos, @liquido, @pago, @pSobregiro)";
            SqlCommand cmd;
            int res = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));
                        cmd.Parameters.Add(new SqlParameter("@contrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@imponible", Convert.ToDecimal(imponible)));
                        cmd.Parameters.Add(new SqlParameter("@haberes", Convert.ToDecimal(haberes)));
                        cmd.Parameters.Add(new SqlParameter("@descuentos", Convert.ToDecimal(descuentos)));
                        cmd.Parameters.Add(new SqlParameter("@liquido", Convert.ToDecimal(liquido)));
                        cmd.Parameters.Add(new SqlParameter("@pago", Convert.ToDecimal(pago)));
                        cmd.Parameters.Add(new SqlParameter("@pSobregiro", Convert.ToDecimal(pSobregiro)));

                        res = cmd.ExecuteNonQuery();
                        if (res > 0)
                        {
                            //INGRESO CORRECTO
                      
                        }
                        else
                        {
                            //ERROR AL INTENTAR GUARDAR!
                          
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                //XtraMessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// Actualiza los valores para liquidacion histórica de un determinado trabajador.
        /// </summary>
        /// <param name="periodo"></param>
        /// <param name="contrato"></param>
        /// <param name="imponible"></param>
        /// <param name="haberes"></param>
        /// <param name="descuentos"></param>
        /// <param name="liquido"></param>
        /// <param name="pago"></param>
        /// <param name="pSobregiro"></param>
        public static void ModificarDatosLiquidacion(int periodo, string contrato, double imponible, double haberes,
            double descuentos, double liquido, double pago, double pSobregiro)
        {
            string sql = "UPDATE LIQUIDACIONHISTORICO SET imponible=@imponible, haberes=@haberes, descuentos=@descuentos, " +
                "liquido=@liquido, pago=@pago, sobregiro = @pSobregiro WHERE contrato=@contrato AND anomes=@periodo";
            SqlCommand cmd;
            int res = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));
                        cmd.Parameters.Add(new SqlParameter("@contrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@imponible", Convert.ToDecimal(imponible)));
                        cmd.Parameters.Add(new SqlParameter("@haberes", Convert.ToDecimal(haberes)));
                        cmd.Parameters.Add(new SqlParameter("@descuentos", Convert.ToDecimal(descuentos)));
                        cmd.Parameters.Add(new SqlParameter("@liquido", Convert.ToDecimal(liquido)));
                        cmd.Parameters.Add(new SqlParameter("@pago", Convert.ToDecimal(pago)));
                        cmd.Parameters.Add(new SqlParameter("@pSobregiro", Convert.ToDecimal(pSobregiro)));

                        res = cmd.ExecuteNonQuery();
                        if (res > 0)
                        {
                            //MODIFICACION CORRECTA!
                           // XtraMessageBox.Show("Modificacion correcta!");
                        }
                        else
                        {
                            //ERROR AL INTENTAR MODIFICAR
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                //XtraMessageBox.Show(ex.Message);
                Console.WriteLine(ex.Message);
            }
        }

        /// <summary>
        /// Indica si existen datos de liquidacion historica para un trabajador
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado.</param>
        /// <returns></returns>
        public static bool ExisteLiquidacionHistorico(string contrato)
        {
            string sql = "SELECT imponible FROM LIQUIDACIONHISTORICO where contrato=@contrato";
            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;
            bool existe = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@contrato", contrato));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                //EXISTE REGISTRO
                                existe = true;
                            }
                            else
                            {
                                existe = false;
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return existe;
        }

        /// <summary>
        /// Indica si existen datos de liquidacion historica para un trabajador en un determinado periodo.
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo que se desea consultar.</param>
        /// <returns></returns>
        public static bool ExisteLiquidacionHistoricoCalculo(string contrato, int pPeriodo)
        {
            string sql = "SELECT imponible FROM LIQUIDACIONHISTORICO where contrato=@contrato AND anomes=@periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            bool existe = false;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@contrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", pPeriodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            //EXISTE REGISTRO
                            existe = true;
                        }
                        else
                        {
                            existe = false;
                        }
                    }
                    cmd.Dispose();
                    rd.Close();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return existe;
        }

        /// <summary>
        /// Elimina informacion de liquidacion histórica para un determinado trabajador en un determinado periodo.
        /// </summary>
        /// <param name="periodo">Periodo que se desea consultar.</param>
        /// <param name="contrato">Numero de contrato asociado</param>
        /// <returns></returns>
        public static bool EliminarLiquidacionHistorico(int periodo, string contrato)
        {
            string sql = "DELETE FROM LIQUIDACIONHISTORICO WHERE contrato=@contrato AND anomes=@periodo";
            SqlCommand cmd;
            int res = 0;
            bool eliminado = false;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@contrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                        res = cmd.ExecuteNonQuery();
                        if (res > 0)
                        {
                            //GUARDAMOS EVENTO EN LOG
                            //logRegistro log = new logRegistro(User.getUser(), "ELIMINA DATOS LIQUIDACION HISTORICA CONTRATO " + contrato + " , PERIODO: "+ periodo, "LIQUIDACIONHISTORICO", "0", "0", "ELIMINAR");
                            //log.Log();

                            //ELIMINADO CORRECTAMENTE
                            eliminado = true;
                        }
                        else
                        {
                            //ERROR AL INTENTAR ELIMINAR
                            eliminado = false;
                        }

                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return eliminado;
        }
       

        /// <summary>
        /// Permite Guardar valores de variables de sistema para un contrato determinado.
        /// </summary>
        /// <param name="psysaprevol">Ahorro previsional voluntario.</param>
        /// <param name="psysbcimpto">Valor base impuesto.</param>
        /// <param name="psyscaja">Descuento caja compensacion.</param>
        /// <param name="psysciafp">Cuenta individual afp</param>
        /// <param name="psyscicese">Seguro cesantía cuenta individual empresa</param>
        /// <param name="psyscicest">Seguro cesantía cuenta individual trabajador</param>
        /// <param name="psyscomafp">Comision afp</param>
        /// <param name="psysdiasaus">Dias de ausentismo</param>
        /// <param name="psysdiaslic">Dias de licencia</param>
        /// <param name="psysdiastr">Dias trabajados</param>
        /// <param name="psysfactorimpto">Porcentaje al impouesto de acuerdo a tramo</param>
        /// <param name="psysfonasa">Valor fonasa</param>
        /// <param name="psysfscese">Seguro cesantia fondo solidario empresa</param>
        /// <param name="psysfscest">Seguro cesantia fondo solidario trabajador.</param>
        /// <param name="psysimpto">Valor descuento impuesto</param>
        /// <param name="psysisapre">Valor descuento por isapre</param>
        /// <param name="psysliq">Total liquido</param>
        /// <param name="psysmutual">Descuento mutual</param>
        /// <param name="psyspago">Total pago</param>
        /// <param name="psysrebimpto">Valor de rebaja impuesto de acuerdo a tramo</param>
        /// <param name="psyssis">Seguro de invalidez</param>
        /// <param name="psystdctos">Total descuentos</param>
        /// <param name="psystexe">Total haberes exentos</param>
        /// <param name="psystfam">Total monto asignacion familiar</param>
        /// <param name="psysthab">Total haberes</param>
        /// <param name="psystimp">Total imponible</param>
        /// <param name="psystopeafp">Tope legal en pesos afp</param>
        /// <param name="psystopesalud">Tope legal en pesos salud</param>
        /// <param name="psystopeseg">Tope legal en pesos seguro cesantía</param>
        /// <param name="psystributo">Valor tributario para tramo impuesto a la renta</param>
        /// <param name="psysporcadmafp">Porcentaje comision afp</param>
        /// <param name="psysSanna">Valor cotizacion ley sanna</param>
        /// <param name="pcontrato">Numero de contrato asociado a trabajador.</param>
        /// <param name="pPeriodo">Periodo a grabar</param>
        public static void AgregarCalculoMensual(double psysaprevol, double psysbcimpto, double psyscaja, 
            double psysciafp, double psyscicese, double psyscicest, double psyscomafp, double psysdiasaus, 
            double psysdiaslic, double psysdiastr, double psysfactorimpto, double psysfonasa, 
            double psysfscese, double psysfscest, double psysimpto, double psysisapre, double psysliq, 
            double psysmutual, double psyspago, double psysrebimpto, double psyssis, double psystdctos, 
            double psystexe, double psystfam, double psysthab, double psystimp, double psystopeafp, 
            double psystopesalud, double psystopeseg, double psystributo, double psysporcadmafp,
            double psysSanna, double psystimp30, double psysdiassp13, double psysdiassp14,
            double psysdiassp15,
            double psysafp13, double psyssalud13, double psyssegtrab13,
            double psysinv13, double psyscaja13, double psysmutual13,
            double psyssanna13, double psyssegem13,
             double psysafp14, double psyssalud14,
            double psysinv14, double psyscaja14, double psysmutual14,
            double psyssanna14, double psyssegemsp14, double psyssegtrabsp14,
            string pcontrato, int pPeriodo)
        {
            string sql = "INSERT INTO CALCULOMENSUAL(sysaprevol, sysbcimpto, syscaja, sysciafp, syscicese, syscicest, " +
                "syscomafp, sysdiasaus, sysdiaslic, sysdiastr, sysfactorimpto, sysfonasa, sysfscese, " +
                "sysfscest, sysimpto, sysisapre, sysliq, sysmutual, syspago, sysrebimpto, syssis, " +
                "systdctos, systexe, systfam, systhab, systimp, systopeafp, systopesalud, systopeseg," +
                "anomes, contrato, systributo, sysporcadmafp, sysvalsanna, systimp30, sysdiassp13, sysdiassp14, " +
                "sysdiassp15, sysafpsp13, syssaludsp13, syssegemsp13, sysinv13, syscaja13, sysmutual13, " +
                "syssanna13, syssegtrabsp13, sysafpsp14, syssaludsp14, sysinv14, syscaja14, sysmutual14, " +
                "syssanna14, syssegemsp14,  syssegtrabsp14) " +
                " VALUES(@psysaprevol, @psysbcimpto, @psyscaja, @psysciafp, @psyscicese, @psyscicest, " +
                "@psyscomafp, @psysdiasaus, @psysdiaslic, @psysdiastr, @psysfactorimpto, @psysfonasa, " +
                "@psysfscese, @psysfscest, @psysimpto, @psysisapre, @psysliq, @psysmutual, @psyspago, " +
                "@psysrebimpto, @psyssis, @psystdctos, @psystexe, @psystfam, @psysthab, @psystimp," +
                "@psystopeafp, @psystopesalud, @psystopeseg, @periodo, @pcontrato, " +
                "@psystributo, @psysporcadmafp, @psyssanna, @psystimp30, @psysdiassp13, " +
                "@psysdiassp14, @psysdiassp15, @psysafpsp13, @psyssaludsp13, @psyssegempsp13, " +
                "@psysinv13, @psyscaja13, @psysmutual13, @psyssanna13, @psyssegtrabsp13, " +
                "@sysafpsp14, @syssaludsp14, @sysinv14, @syscaja14, @sysmutual14, @syssanna14, " +
                "@psyssegemsp14, @psyssegtrabsp14)";

            SqlCommand cmd;
            int count = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@psysaprevol", psysaprevol));
                        cmd.Parameters.Add(new SqlParameter("@psysbcimpto", psysbcimpto));
                        cmd.Parameters.Add(new SqlParameter("@psyscaja", psyscaja));
                        cmd.Parameters.Add(new SqlParameter("@psysciafp", psysciafp));
                        cmd.Parameters.Add(new SqlParameter("@psyscicese", psyscicese));
                        cmd.Parameters.Add(new SqlParameter("@psyscicest", psyscicest));
                        cmd.Parameters.Add(new SqlParameter("@psyscomafp", psyscomafp));
                        cmd.Parameters.Add(new SqlParameter("@psysdiasaus", psysdiasaus));
                        cmd.Parameters.Add(new SqlParameter("@psysdiaslic", psysdiaslic));
                        cmd.Parameters.Add(new SqlParameter("@psysdiastr", psysdiastr));
                        cmd.Parameters.Add(new SqlParameter("@psysfactorimpto", psysfactorimpto));
                        cmd.Parameters.Add(new SqlParameter("@psysfonasa", psysfonasa));
                        cmd.Parameters.Add(new SqlParameter("@psysfscese", psysfscese));
                        cmd.Parameters.Add(new SqlParameter("@psysfscest", psysfscest));
                        cmd.Parameters.Add(new SqlParameter("@psysimpto", psysimpto));
                        cmd.Parameters.Add(new SqlParameter("@psysisapre", psysisapre));
                        cmd.Parameters.Add(new SqlParameter("@psysliq", psysliq));
                        cmd.Parameters.Add(new SqlParameter("@psysmutual", psysmutual));
                        cmd.Parameters.Add(new SqlParameter("@psyspago", psyspago));
                        cmd.Parameters.Add(new SqlParameter("@psysrebimpto", psysrebimpto));
                        cmd.Parameters.Add(new SqlParameter("@psyssis", psyssis));
                        cmd.Parameters.Add(new SqlParameter("@psystdctos", psystdctos));
                        cmd.Parameters.Add(new SqlParameter("@psystexe", psystexe));
                        cmd.Parameters.Add(new SqlParameter("@psystfam", psystfam));
                        cmd.Parameters.Add(new SqlParameter("@psysthab", psysthab));
                        cmd.Parameters.Add(new SqlParameter("@psystimp", psystimp));
                        cmd.Parameters.Add(new SqlParameter("@psystopeafp", psystopeafp));
                        cmd.Parameters.Add(new SqlParameter("@psystopesalud", psystopesalud));
                        cmd.Parameters.Add(new SqlParameter("@psystopeseg", psystopeseg));
                        cmd.Parameters.Add(new SqlParameter("@psystributo", psystributo));
                        cmd.Parameters.Add(new SqlParameter("@psysporcadmafp", psysporcadmafp));
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", pcontrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@psyssanna", psysSanna));
                        cmd.Parameters.Add(new SqlParameter("@psystimp30", psystimp30));
                        cmd.Parameters.Add(new SqlParameter("@psysdiassp13", psysdiassp13));
                        cmd.Parameters.Add(new SqlParameter("@psysdiassp14", psysdiassp14));
                        cmd.Parameters.Add(new SqlParameter("@psysdiassp15", psysdiassp15));
                        cmd.Parameters.Add(new SqlParameter("@psysafpsp13", psysafp13));
                        cmd.Parameters.Add(new SqlParameter("@psyssaludsp13", psyssalud13));
                        cmd.Parameters.Add(new SqlParameter("@psyssegempsp13", psyssegem13));
                        cmd.Parameters.Add(new SqlParameter("@psysinv13", psysinv13));
                        cmd.Parameters.Add(new SqlParameter("@psyscaja13", psyscaja13));
                        cmd.Parameters.Add(new SqlParameter("@psysmutual13", psysmutual13));
                        cmd.Parameters.Add(new SqlParameter("@psyssanna13", psyssanna13));
                        cmd.Parameters.Add(new SqlParameter("@psyssegtrabsp13", psyssegtrab13));
                        cmd.Parameters.Add(new SqlParameter("@sysafpsp14", psysafp14));
                        cmd.Parameters.Add(new SqlParameter("@syssaludsp14", psyssalud14));
                        cmd.Parameters.Add(new SqlParameter("@sysinv14", psysinv14));
                        cmd.Parameters.Add(new SqlParameter("@syscaja14", psyscaja14));
                        cmd.Parameters.Add(new SqlParameter("@sysmutual14", psysmutual14));
                        cmd.Parameters.Add(new SqlParameter("@syssanna14", psyssanna14));
                        cmd.Parameters.Add(new SqlParameter("@psyssegemsp14", psyssegemsp14));
                        cmd.Parameters.Add(new SqlParameter("@psyssegtrabsp14", psyssegtrabsp14));

                        count = cmd.ExecuteNonQuery();
                        if (count > 0)
                        {
                            //  INGRESO CORRECTO!
                        }
                        else
                        {
                            //INGRESO INCORRECTO!
                        }
                    }

                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                //XtraMessageBox.Show(ex.Message);
                Console.WriteLine(ex.Message);
            }
        }

        /// <summary>
        /// Actualiza valores variables en un periodo determinado para un contrato determinado.
        /// </summary>
        /// <param name="psysaprevol">Ahorro previsional voluntario.</param>
        /// <param name="psysbcimpto">Valor base impuesto.</param>
        /// <param name="psyscaja">Descuento caja compensacion.</param>
        /// <param name="psysciafp">Cuenta individual afp</param>
        /// <param name="psyscicese">Seguro cesantía cuenta individual empresa</param>
        /// <param name="psyscicest">Seguro cesantía cuenta individual trabajador</param>
        /// <param name="psyscomafp">Comision afp</param>
        /// <param name="psysdiasaus">Dias de ausentismo</param>
        /// <param name="psysdiaslic">Dias de licencia</param>
        /// <param name="psysdiastr">Dias trabajados</param>
        /// <param name="psysfactorimpto">Porcentaje al impouesto de acuerdo a tramo</param>
        /// <param name="psysfonasa">Valor fonasa</param>
        /// <param name="psysfscese">Seguro cesantia fondo solidario empresa</param>
        /// <param name="psysfscest">Seguro cesantia fondo solidario trabajador.</param>
        /// <param name="psysimpto">Valor descuento impuesto</param>
        /// <param name="psysisapre">Valor descuento por isapre</param>
        /// <param name="psysliq">Total liquido</param>
        /// <param name="psysmutual">Descuento mutual</param>
        /// <param name="psyspago">Total pago</param>
        /// <param name="psysrebimpto">Valor de rebaja impuesto de acuerdo a tramo</param>
        /// <param name="psyssis">Seguro de invalidez</param>
        /// <param name="psystdctos">Total descuentos</param>
        /// <param name="psystexe">Total haberes exentos</param>
        /// <param name="psystfam">Total monto asignacion familiar</param>
        /// <param name="psysthab">Total haberes</param>
        /// <param name="psystimp">Total imponible</param>
        /// <param name="psystopeafp">Tope legal en pesos afp</param>
        /// <param name="psystopesalud">Tope legal en pesos salud</param>
        /// <param name="psystopeseg">Tope legal en pesos seguro cesantía</param>
        /// <param name="psystributo">Valor tributario para tramo impuesto a la renta</param>
        /// <param name="psysporcadmafp">Porcentaje comision afp</param>
        /// <param name="psysSanna">Valor cotizacion ley sanna</param>
        /// <param name="pcontrato">Numero de contrato asociado a trabajador.</param>
        /// <param name="pPeriodo">Periodo a grabar</param>

        public static void ActualizarCalculoMensual(double psysaprevol, double psysbcimpto, double psyscaja,
            double psysciafp, double psyscicese, double psyscicest, double psyscomafp, double psysdiasaus,
            double psysdiaslic, double psysdiastr, double psysfactorimpto, double psysfonasa,
            double psysfscese, double psysfscest, double psysimpto, double psysisapre, double psysliq,
            double psysmutual, double psyspago, double psysrebimpto, double psyssis, double psystdctos,
            double psystexe, double psystfam, double psysthab, double psystimp, double psystopeafp,
            double psystopesalud, double psystopeseg, double psystributo, double psysporcadmafp,
            double psysSanna, double psystimp30, double psysdiassp13, double psysdiassp14, 
            double psysdiassp15, double psysafp13, double psyssalud13, double psyssegtrab13, 
            double psysinv13, double psyscaja13, double psysmutual13, 
            double psyssanna13, double psyssegem13,
            double psysafp14, double psyssalud14, 
            double psysinv14, double psyscaja14, double psysmutual14,
            double psyssanna14, double psyssegemsp14, double psyssegtrabsp14,
            string pcontrato, int pPeriodo)
        {
           
            string sql = "UPDATE CALCULOMENSUAL SET sysaprevol=@psysaprevol, sysbcimpto=@psysbcimpto," +
                " syscaja=@psyscaja, sysciafp=@psysciafp, syscicese=@psyscicese, syscicest=@psyscicest, " +
                "syscomafp=@psyscomafp, sysdiasaus=@psysdiasaus, sysdiaslic=@psysdiaslic, " +
                "sysdiastr=@psysdiastr, sysfactorimpto=@psysfactorimpto, sysfonasa=@psysfonasa, " +
                "sysfscese=@psysfscese, sysfscest=@psysfscest, sysimpto=@psysimpto, sysisapre=@psysisapre," +
                " sysliq=@psysliq, sysmutual=@psysmutual, syspago=@psyspago, " +
                "sysrebimpto=@psysrebimpto, syssis=@psyssis, systdctos=@psystdctos, " +
                "systexe=@psystexe, systfam=@psystfam, systhab=@psysthab, systimp=@psystimp," +
                "systopeafp=@psystopeafp, systopesalud=@psystopesalud, systopeseg=@psystopeseg, " +
                "systributo=@psystributo, sysporcAdmAfp=@psysporcadmafp, " +
                "sysvalsanna=@psyssanna, systimp30=@psystimp30, " +
                "sysdiassp13=@psysdiassp13, sysdiassp14=@psysdiassp14, " +
                "sysdiassp15=@psysdiassp15, sysafpsp13=@psysafp13, " +
                "syssaludsp13=@psyssalud13, syssegemsp13=@psysseguro13, " +
                "sysinv13=@psysinv13, syscaja13=@psyscaja13, sysmutual13=@psysmutual13, " +
                "syssanna13=@psyssanna13, syssegtrabsp13=@psyssegtrabsp13, " +
                "sysafpsp14 = @psysafp14, " +
                "syssaludsp14=@psyssalud14, " +
                "sysinv14=@psysinv14, syscaja14=@psyscaja14, sysmutual14=@psysmutual14, " +
                "syssanna14=@psyssanna14, syssegemsp14=@pyssegemsp14, syssegtrabsp14=@psyssegtrabsp14  " +
                " WHERE contrato=@pcontrato AND anomes=@periodo";

            SqlCommand cmd;
            int count = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {                        
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@psysaprevol", psysaprevol));
                        cmd.Parameters.Add(new SqlParameter("@psysbcimpto", psysbcimpto));
                        cmd.Parameters.Add(new SqlParameter("@psyscaja", psyscaja));
                        cmd.Parameters.Add(new SqlParameter("@psysciafp", psysciafp));
                        cmd.Parameters.Add(new SqlParameter("@psyscicese", psyscicese));
                        cmd.Parameters.Add(new SqlParameter("@psyscicest", psyscicest));
                        cmd.Parameters.Add(new SqlParameter("@psyscomafp", psyscomafp));
                        cmd.Parameters.Add(new SqlParameter("@psysdiasaus", psysdiasaus));
                        cmd.Parameters.Add(new SqlParameter("@psysdiaslic", psysdiaslic));
                        cmd.Parameters.Add(new SqlParameter("@psysdiastr", psysdiastr));
                        cmd.Parameters.Add(new SqlParameter("@psysfactorimpto", psysfactorimpto));
                        cmd.Parameters.Add(new SqlParameter("@psysfonasa", psysfonasa));
                        cmd.Parameters.Add(new SqlParameter("@psysfscese", psysfscese));
                        cmd.Parameters.Add(new SqlParameter("@psysfscest", psysfscest));
                        cmd.Parameters.Add(new SqlParameter("@psysimpto", psysimpto));
                        cmd.Parameters.Add(new SqlParameter("@psysisapre", psysisapre));
                        cmd.Parameters.Add(new SqlParameter("@psysliq", psysliq));
                        cmd.Parameters.Add(new SqlParameter("@psysmutual", psysmutual));
                        cmd.Parameters.Add(new SqlParameter("@psyspago", psyspago));
                        cmd.Parameters.Add(new SqlParameter("@psysrebimpto", psysrebimpto));
                        cmd.Parameters.Add(new SqlParameter("@psyssis", psyssis));
                        cmd.Parameters.Add(new SqlParameter("@psystdctos", psystdctos));
                        cmd.Parameters.Add(new SqlParameter("@psystexe", psystexe));
                        cmd.Parameters.Add(new SqlParameter("@psystfam", psystfam));
                        cmd.Parameters.Add(new SqlParameter("@psysthab", psysthab));
                        cmd.Parameters.Add(new SqlParameter("@psystimp", psystimp));
                        cmd.Parameters.Add(new SqlParameter("@psystopeafp", psystopeafp));
                        cmd.Parameters.Add(new SqlParameter("@psystopesalud", psystopesalud));
                        cmd.Parameters.Add(new SqlParameter("@psystopeseg", psystopeseg));
                        cmd.Parameters.Add(new SqlParameter("@psystributo", psystributo));
                        cmd.Parameters.Add(new SqlParameter("@psysporcadmafp", psysporcadmafp));
                        cmd.Parameters.Add(new SqlParameter("@psyssanna", psysSanna));                      
                        cmd.Parameters.Add(new SqlParameter("@pcontrato", pcontrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@psystimp30", psystimp30));
                        cmd.Parameters.Add(new SqlParameter("@psysdiassp13", psysdiassp13));
                        cmd.Parameters.Add(new SqlParameter("@psysdiassp14", psysdiassp14));
                        cmd.Parameters.Add(new SqlParameter("@psysdiassp15", psysdiassp15));
                        cmd.Parameters.Add(new SqlParameter("@psysafp13", psysafp13));
                        cmd.Parameters.Add(new SqlParameter("@psyssalud13", psyssalud13));
                        cmd.Parameters.Add(new SqlParameter("@psysseguro13", psyssegem13));
                        cmd.Parameters.Add(new SqlParameter("@psysinv13", psysinv13));
                        cmd.Parameters.Add(new SqlParameter("@psyscaja13", psyscaja13));
                        cmd.Parameters.Add(new SqlParameter("@psysmutual13", psysmutual13));
                        cmd.Parameters.Add(new SqlParameter("@psyssanna13", psyssanna13));
                        cmd.Parameters.Add(new SqlParameter("@psyssegtrabsp13", psyssegtrab13));
                        cmd.Parameters.Add(new SqlParameter("@psysafp14", psysafp14));
                        cmd.Parameters.Add(new SqlParameter("@psyssalud14", psyssalud14));
                        cmd.Parameters.Add(new SqlParameter("@psysinv14", psysinv14));
                        cmd.Parameters.Add(new SqlParameter("@psyscaja14", psyscaja14));
                        cmd.Parameters.Add(new SqlParameter("@psysmutual14", psysmutual14));
                        cmd.Parameters.Add(new SqlParameter("@psyssanna14", psyssanna14));
                        cmd.Parameters.Add(new SqlParameter("@pyssegemsp14", psyssegemsp14));
                        cmd.Parameters.Add(new SqlParameter("@psyssegtrabsp14", psyssegtrabsp14));

                        count = cmd.ExecuteNonQuery();
                        if (count > 0)
                        {
                            //  UPDATE CORRECTO!
                        }
                        else
                        {
                            //UPDATE INCORRECTO!
                        }
                    }

                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                //XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                Console.WriteLine(ex.Message);
            }
        }

       /// <summary>
       /// Actualiza una variable en particular para calculo mensual.
       /// </summary>
       /// <param name="pContrato">Numero de contrato asociado.</param>
       /// <param name="pPeriodo">Periodo de consulta.</param>
       /// <param name="pVariable">Variable de sistema</param>
       /// <param name="pValue">Valor variable</param>
        public static void ActualizarVarMensual(string pContrato, int pPeriodo, string pVariable, double pValue)
        {
            string sql = "UPDATE calculomensual SET @pVariable=@pValue WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pVariable", pVariable));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pValue", pValue));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        cmd.ExecuteNonQuery();
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// Indica si existe calculomensual grabado para contrato en un periodo determinado.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="periodo">Periodo consulta.</param>
        /// <returns></returns>
        public static bool ExisteCalculoMensual(string pContrato, int periodo)
        {
            string sql = "SELECT count(*) FROM CALCULOMENSUAL WHERE anomes=@periodo AND contrato=@pcontrato";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool existe = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@periodo", periodo));
                            cmd.Parameters.Add(new SqlParameter("@pcontrato", pContrato));

                            count = Convert.ToInt32(cmd.ExecuteScalar());
                            if (count > 0)
                                existe = true;

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existe;
        }

        /// <summary>
        /// Obtiene un valor desde tabla calculomensual
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="periodo">Periodo consulta</param>
        /// <param name="pVariable">Variable a consultar</param>
        /// <returns></returns>
        public static double GetValueFromCalculoMensaul(string pContrato, int periodo, string pVariable)
        {
            double val = 0;
            string sql = $"SELECT {pVariable.ToLower()} FROM calculoMensual WHERE contrato=@pcontrato AND anomes=@periodo";
        
            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pcontrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@periodo", periodo));

                            val = Convert.ToDouble(cmd.ExecuteScalar());

                            cmd.Dispose();                          
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return val;
        }

        /// <summary>
        /// Consulta imponible guardado en bd para un contrato determinado.
        /// </summary>
        /// <param name="pRut">Ruta asociado.</param>
        /// <param name="periodo">Periodo de consulta.</param>
        /// <returns></returns>
        public static double GetImpFromCalculoMensual(string pRut, int periodo)
        {
            double total = 0;
            string sql = "SELECT ISNULL(SUM(systimp), 0) as total from calculomensual " +
                         "INNER JOIN trabajador ON trabajador.contrato = calculomensual.contrato AND trabajador.anomes = calculoMensual.anomes " +
                         "WHERE rut=@pRut AND calculoMensual.anomes = @pPeriodo";

            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));

                        total = Convert.ToDouble(cmd.ExecuteScalar());

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return total;
        }

        /// <summary>
        /// Permite consultar por un valor para una variable especifica desde tabla calculomensual
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="pPeriodo">Periodo a consultar</param>
        /// <param name="pParameter">Nombre de variable a consultar.</param>
        /// <returns></returns>
        public static double GetValueFromLiquidacionHistorica(string pContrato, int pPeriodo, string pParameter)
        {
            double val = 0;
            string sql = $"SELECT {pParameter} FROM liquidacionhistorico WHERE contrato =@pContrato " +
                "AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                val = Convert.ToDouble(data);
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            

            return val;
        }

        /// <summary>
        /// Entrega el monto de afc para calculo de afp y sis en suspension laboral
        /// </summary>
        /// <param name="pRut"></param>
        /// <param name="pPeriodo"></param>
        /// <returns></returns>
        public static double GetValueAfc(string pRut, int pPeriodo)
        {
            double monto = -1;
            string sql = "SELECT isnull(monto, -1) FROM afc WHERE rut=@pRut AND mes=@pPeriodo";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pRut", pRut));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                monto = Convert.ToDouble(data);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //error...
            }

            return monto;
        }

        /// <summary>
        /// Indica el estado de un determinado proceso. Por ejemplo calculo de remuneraciones.
        /// </summary>
        /// <returns></returns>
        public static bool ViewStatus()
        {
            bool procesando = false;
            string sql = "SELECT count(*) FROM proceso WHERE activo=1";
            SqlCommand cmd;
            int status = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        status = Convert.ToInt16(cmd.ExecuteScalar());

                        if (status > 0)
                            procesando = true;

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();                            
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return procesando;
        }

        /// <summary>
        /// Permite modificar el estado de un determinado proceso.
        /// <para>0 - Terminado</para>
        /// <para>1 - Activo</para>
        /// </summary>
        /// <param name="pStatus">Nuevo estado del proceso</param>
        /// <param name="pProceso">Codigo del proceso.</param>
        public static void ChangeStatus(int pStatus, string pProceso)
        {
            string sql = "UPDATE PROCESO SET activo = @pStatus, usr=@pUser WHERE cod=@pCod";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pStatus", pStatus));
                        cmd.Parameters.Add(new SqlParameter("@pCod", pProceso));
                        cmd.Parameters.Add(new SqlParameter("@pUser", User.getUser()));

                        cmd.ExecuteNonQuery();

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// Indica si el periodo que se desea evaluar existe o es válido.
        /// </summary>
        /// <param name="pPeriodo">Periodo consulta.</param>
        /// <returns></returns>
        public static bool PeriodoValido(int pPeriodo)
        {
            string sql = "SELECT count(*) FROM parametro WHERE anomes=@pPeriodo";
            SqlCommand cmd;
            bool existe = false;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                            existe = true;
                    }

                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }           

            return existe;
        }

        /// <summary>
        /// Indica si existe un periodo anterior al periodo pasado por parametro en sistema.
        /// </summary>
        /// <param name="pPeriodo">Periodo base</param>
        /// <returns></returns>
        public static bool ExistePeriodoAnterior(int pPeriodo)
        {
            bool existe = false;
            string sql = "SELECT count(*) FROM parametro WHERE anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS (PERIODO ANTERIOR)
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                            existe = true;
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existe;
        }      

        /// <summary>
        /// Permite reabrir un mes anterioro al periodo en evaluación.
        /// </summary>
        /// <param name="pPeriodo">Periodo en evaluación</param>
        /// <returns></returns>
        public static bool ReabrirMes(int pPeriodo)
        {
            bool correcto = false;
            if (pPeriodo == 0) return false;                 

            //OBTENER EL PERIODO ANTERIOR AL ABIERTO (SOLO PARA COMPARAR)
            int periodoAnterior = 0;
            periodoAnterior = fnSistema.fnObtenerPeriodoAnterior(PeriodoObservado);

            if (periodoAnterior != pPeriodo)
            { XtraMessageBox.Show($"No puedes reabrir periodo {fnSistema.PrimerMayuscula(fnSistema.FechaFormatoSoloMes(fnSistema.FechaPeriodo(pPeriodo)))}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error); return false; }

            string sql = "BEGIN TRY " +
                             "BEGIN TRANSACTION " +
                                "DELETE FROM Itemtrabajador WHERE anomes = @pPeriodo " +
                                 "DELETE FROM liquidacionHistorico WHERE anomes = @pPeriodo " +
                                 "DELETE FROM calculoMensual WHERE anomes = @pPeriodo " +
                                 "DELETE FROM Trabajador WHERE anomes = @pPeriodo " +                                
                                 "DELETE FROM parametro WHERE anomes = @pPeriodo " +
                                 "DELETE FROM valoresMes WHERE anomes = @pPeriodo " +                                                            
                                 "UPDATE trabajador SET status=1 WHERE anomes=@pPeriodoAnterior " +
                             "COMMIT TRANSACTION " +
                         "END TRY " +
                         "BEGIN CATCH " +
                             "IF @@TRANCOUNT > 0 " +
                             "ROLLBACK " +
                         "END CATCH ";

            SqlCommand cmd;
            int count = 0;
            int per = 0;
            per = PeriodoObservado;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS                        
                        
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", PeriodoObservado));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodoAnterior", fnSistema.fnObtenerPeriodoAnterior(PeriodoObservado)));

                        count = cmd.ExecuteNonQuery();
                        if (count > 0)
                        {
                            XtraMessageBox.Show($"Periodo {fnSistema.PrimerMayuscula(fnSistema.FechaFormatoSoloMes(fnSistema.FechaPeriodo(pPeriodo)))} Reabierto correctamente", "Informacion", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            //RESETEAMOS VARIABLE PERIODO OBSERVADO
                            PeriodoObservado = pPeriodo;
                            //LIMPIAMOS LASTVIEW USUARIO
                            User.CleanLastView();
                            correcto = true;

                            logRegistro log = new logRegistro(User.getUser(), $"SE REABRE MES {fnSistema.FechaFormatoSoloMes(fnSistema.FechaPeriodo(PeriodoObservado))}", "", fnSistema.FechaFormatoSoloMes(fnSistema.FechaPeriodo(per)), fnSistema.FechaFormatoSoloMes(fnSistema.FechaPeriodo(PeriodoObservado)), "MODIFICAR");
                            log.Log();
                        }
                        else
                        {
                            XtraMessageBox.Show($"No se pudo reabrir periodo {fnSistema.PrimerMayuscula(fnSistema.FechaFormatoSoloMes(fnSistema.FechaPeriodo(pPeriodo)))}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                            correcto = false;
                        }

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);                
            }

            return correcto;
        }   

        /// <summary>
        /// Obtiene el valor en pesos del tope legal establecido para la gratificación de acuerdo a sueldo minimo
        /// </summary>
        /// <param name="pPeriodo">Periodo de consulta sueldo minimo</param>
        /// <returns></returns>
        public static double GetTopeGratificacion(int pPeriodo)
        {
            string sql = "SELECT ingresominimo FROM valoresmes WHERE anomes=@pPeriodo";
            SqlCommand cmd;
            double valor = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        object data = cmd.ExecuteScalar();
                        if(data != null)
                            valor = Convert.ToDouble(data);

                        valor = Math.Round((4.75 * valor) / 12, 0, MidpointRounding.AwayFromZero);
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return valor;
        }

       /// <summary>
       /// Obtiene la cantidad de registros que hay en un determinado periodo.
       /// </summary>
       /// <param name="ShowPrivados"></param>
       /// <returns></returns>
        public static int GetTotalRegistros(bool ShowPrivados)
        {
            int count = 0;
            string filterUser = User.GetUserFilter();
         
            string sql = "";
            if(filterUser != "0")
              sql = $"SELECT count(*) FROM trabajador WHERE anomes={PeriodoObservado} AND {Conjunto.GetCondicionFromCode(filterUser)} {(ShowPrivados == false? " AND privado=0":"")}";
            else
                sql = $"SELECT count(*) FROM trabajador WHERE anomes={PeriodoObservado} {(ShowPrivados == false? " AND privado=0":"")}";

            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            count = Convert.ToInt32(cmd.ExecuteScalar());
                            cmd.Dispose();                            
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return count;
        }      

        /// <summary>
        /// Validar que el periodo tenga el formato correcto.
        /// </summary>
        /// <param name="pPeriodo"></param>
        /// <returns></returns>
        public static bool ValidaFormatoPeriodo(string pPeriodo)
        {
            bool correcto = false;
            //PRIMERO 4 DIGITOS SON EL AÑO
            //5 Y 6 DIGITO SON EL MES
            string Year = pPeriodo.Substring(0, 4);
            string Month = pPeriodo.Substring(4, 2);

            string PruebaFecha = "01-" + Month + "-" + Year;
            DateTime Conv;
            try
            {
                //INTENTAMOS CONVERTIR A FECHA
                Conv = Convert.ToDateTime(PruebaFecha);
                correcto = true;
            }
            catch (FormatException ex)
            {
                //NO SE PUDO CONVERTIR
                correcto = false;
            }

            return correcto;
        }

        /*GUARDAR PERIODO EN TABLA PARAMETRO*/
        public static bool GuardarPeriodo(int pPeriodo)
        {
            int count = 0;
            bool correcto = false;
            string sql = "INSERT INTO parametro(anomes) VALUES(@pPeriodo)";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        count = cmd.ExecuteNonQuery();
                        if (count > 0)
                            correcto = true;

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return correcto;
        }

        /// <summary>
        /// Obtiene el valor de la cotizacion ley sanna desde tabla valores mes
        /// </summary>
        /// <param name="pPeriodo">Periodo consultado.</param>
        /// <returns></returns>
        public static double PorcentajeSanna(int pPeriodo)
        {
            double value = 0;
            string sql = "SELECT sanna FROM valoresmes WHERE anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        object data = cmd.ExecuteScalar();
                        if (data != DBNull.Value)
                            value = (Convert.ToDouble(data))/100;

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return value;
        }

        /// <summary>
        /// Genera liquidaciones de sueldo en base a un listado de contratos.
        /// </summary>
        /// <param name="pPeriodo">Periodo evaluado.</param>
        /// <param name="pListado">Listado de contratos.</param>
        /// <param name="pBarra">Objeto BarraProgreso para mostrar el proceso de cálculo.</param>
        /// <param name="pLabel">Label para mostrar el nombre del trabajador</param>
        /// <param name="pForm">Formulario que invoca el metodo</param>
        /// <returns></returns>
        public static XtraReport GeneraLiquidaciones(int pPeriodo, List<string> pListado, BarraProgreso pBarra, LabelControl pLabel, XtraForm pForm)
        {
            int count = 0;
            XtraReport ReportAux = new XtraReport();
            ReportAux.CreateDocument();

            Documento doc = null;

            if (pBarra != null)
            {
                pBarra.ShowControl = true;
                pBarra.Maximum = pListado.Count;
                pBarra.Begin();                
            }          

            //RECORREMOS LISTADO
            if (pListado.Count > 0)
            {
                foreach (string pContrato in pListado)
                {
                    doc = new Documento(pContrato, pPeriodo);             
                    XtraReport reporte = new XtraReport();

                    if (pLabel != null)
                    {
                        Persona per = Persona.GetInfo(pContrato, pPeriodo);
                        if (per.Rut == null)
                            return null;

                        MostrarTrabajador(per.NombreCompleto + $", {count+1} de {pListado.Count}...", pForm, pLabel);
                    }

                    //GENERAMOS LIQUIDACION...
                    reporte = doc.SoloHaberesAnteriores();

                    reporte.CreateDocument();

                    count++;

                    if (pBarra != null)
                        pBarra.Increase();

                    //UNIMOS REPORTES...
                    if (count >= 1)
                    {
                        ReportAux.Pages.AddRange(reporte.Pages);
                    }                 
                }
            }

            if (pBarra != null)
            {
                //pBarra.ShowControl = false;
                //pBarra.ShowClose();
            }

            if (pLabel != null)
            {
                MostrarTrabajador("Proceso Terminado.", pForm, pLabel);
            }

            //RETORNAMOS REPORTE
            return ReportAux;
        }

        /// <summary>
        /// Genera liquidaciones de sueldo en base a un listado de contratos.
        /// </summary>
        /// <param name="pLiquidaciones">Listado de liquidaciones de objeto liquidacionhistorica</param>
        /// <param name="pBarra">Objeto Barraprogreso para mostrar el proceso de cálculo.</param>
        /// <param name="pLabel">Label para mostrar el nombre del trabajador</param>
        /// <param name="pForm">Formulario que invoca el metodo.</param>
        /// <returns></returns>
        public static XtraReport GeneraReporteLiquidaciones(List<LiquidacionHistorico> pLiquidaciones, BarraProgreso pBarra, LabelControl pLabel, XtraForm pForm)
        {
            int count = 0;
            XtraReport ReportAux = new XtraReport();
            ReportAux.CreateDocument();

            Documento doc = null;

            if (pBarra != null)
            {
                pBarra.ShowControl = true;
                pBarra.Maximum = pLiquidaciones.Count;
                pBarra.Begin();
            }

            //RECORREMOS LISTADO
            if (pLiquidaciones.Count > 0)
            {
                foreach (LiquidacionHistorico elemento in pLiquidaciones)
                {
                    doc = new Documento(elemento.Contrato, elemento.Periodo);
                    XtraReport reporte = new XtraReport();

                    if (pLabel != null)
                    {
                        Persona per = Persona.GetInfo(elemento.Contrato, elemento.Periodo);
                        if (per.Rut == null)
                            return null;

                        MostrarTrabajador(per.NombreCompleto + $", {count + 1} de {pLiquidaciones.Count}...", pForm, pLabel);
                    }

                    //GENERAMOS LIQUIDACION...
                    reporte = doc.SoloHaberesAnteriores();

                    reporte.CreateDocument();

                    count++;

                    if (pBarra != null)
                        pBarra.Increase();

                    //UNIMOS REPORTES...
                    if (count >= 1)
                    {
                        ReportAux.Pages.AddRange(reporte.Pages);
                    }
                }
            }

            if (pBarra != null)
            {
                //pBarra.ShowControl = false;
                //pBarra.ShowClose();
            }

            if (pLabel != null)
            {
                MostrarTrabajador("Proceso Terminado.", pForm, pLabel);
            }

            //RETORNAMOS REPORTE
            return ReportAux;
        }

        /// <summary>
        /// Indica si hay una liquidacion con sobregiro en un periodo determinado.
        /// </summary>
        /// <param name="pPeriodo">Periodo consultado.</param>
        /// <returns></returns>
        public static bool LiqSobreGiro(int pPeriodo)
        {
            string sql = "SELECT ISNULL(count(*), 0) FROM liquidacionHistorico WHERE anomes=@pPeriodo " +
                "AND sobregiro > 0";
            bool existen = false;
            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                                existen = true;
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existen;
        }     

        /// <summary>
        /// Indica si hay items que superan el tope de descuento del 15%
        /// </summary>
        /// <param name="pPeriodo">Periodo evaluado.</param>
        /// <returns></returns>
        public static bool SuperaTope(int pPeriodo)
        {
            bool supera = false;
            string sql = "SELECT count(*) as total FROM itemtrabajador " +
                         "INNER JOIN calculomensual ON calculoMensual.anomes = itemTrabajador.anomes " +
                         "AND calculoMensual.contrato = itemTrabajador.contrato " +
                         "WHERE valorcalculado > (0.15 * systhab) AND itemTrabajador.anomes = @pPeriodo AND itemTrabajador.tipo = 5 " +
                         "AND itemTrabajador.contope = 1 ";

            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                                supera = true;
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }


            return supera;
        }

        /// <summary>
        /// Genera archivo con items que superan tope o items con sobregiro.
        /// </summary>
        /// <param name="pPeriodo"></param>
        /// <returns></returns>
        public static string ArchivoTopes(int pPeriodo)
        {
            string sql = "SELECT itemTrabajador.contrato as 'N° Contrato', concat(nombre, ' ', apepaterno, ' ', apematerno) as Empleado,  " +
                         "coditem as 'Item', valorcalculado as 'Valor Item', CONCAT('SUPERA TOPE 15% DESCUENTO LEGAL SOBRE ', FORMAT(systhab, 'n0')) as Observacion " +
                         "FROM itemtrabajador " +
                         "INNER JOIN calculomensual ON calculoMensual.anomes = itemTrabajador.anomes " +
                         "AND calculoMensual.contrato = itemTrabajador.contrato " +
                         "INNER JOIN trabajador ON trabajador.contrato = itemTrabajador.contrato AND trabajador.anomes = itemTrabajador.anomes " +
                         "WHERE valorcalculado > (0.15 * systhab) AND itemTrabajador.anomes = @pPeriodo AND itemTrabajador.tipo = 5 " +
                         "AND itemTrabajador.contope = 1 " +
                         "UNION " +
                         "SELECT itemTrabajador.contrato, CONCAT(nombre, ' ', apepaterno, ' ', apematerno), coditem, valorcalculado, 'SOBREGIRO' " +
                         "FROM itemtrabajador " +
                         "INNER JOIN trabajador On trabajador.contrato = itemTrabajador.contrato " +
                         "AND trabajador.anomes = itemTrabajador.anomes " +
                         "where(coditem = 'SBGIRO' OR coditem = 'SBGIRA') AND valorcalculado > 0 " +
                         "AND itemTrabajador.anomes = @pPeriodo " +
                         "ORDER by empleado ";

            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            string Path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop) + @"\Tope_" + pPeriodo + ".txt";
            string cad = "";

            //SI EXISTE LIMPIAMOS EL ARCHIVO
            if (File.Exists(Path))
                Archivo.CleanTextFile(Path);
            
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    cad = $"{rd["N° Contrato"].ToString()};{rd["Empleado"].ToString()};{rd["Item"].ToString()};{Convert.ToDouble(rd["Valor Item"])};{rd["Observacion"]}";
                                    if (File.Exists(Path))
                                        Archivo.AgregarInfoFile(Path, cad);                                       
                                    else
                                    {
                                        Archivo.CrearArchivo(Path);
                                        if (File.Exists(Path))
                                            Archivo.AgregarInfoFile(Path, cad);
                                    }
                                }
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            //RETORNAMOS LA RUTA
            return Path;
        }

        /// <summary>
        /// Genera listado de contratos en base a sql
        /// </summary>
        /// <param name="pSql">Sql consulta</param>
        /// <param name="pParameter">Parametro a setear en consulta sql.</param>
        /// <returns></returns>
        public static List<string> ListadoTrabajadores(string pSql, string pParameter)
        {
            List<string> contratos = new List<string>();
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            if (pSql != "")
            {
                try
                {
                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(pSql, cn))
                            {
                                rd = cmd.ExecuteReader();
                                if (rd.HasRows)
                                {
                                    while (rd.Read())
                                    {
                                        //GUARDAMOS DATA EN LISTADO
                                        contratos.Add(rd[pParameter] + "");
                                    }
                                }
                            }
                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }

            return contratos;
        }

        /// <summary>
        /// Permite mostrar el nombre del trabajador al ejecutar el proceso de calculo de liquidaciones en otro hilo de ejecución.
        /// </summary>
        /// <param name="pText">Corresponde al nombre del trabajador.</param>
        /// <param name="pForm">Formulario donde se invoca el metodo</param>
        /// <param name="pLabel">Control donde se va a mostrar la información.</param>
        public static void MostrarTrabajador(string pText, XtraForm pForm, LabelControl pLabel)
        {
            if (pForm.InvokeRequired)
            {
                ShowEmploye emp = new ShowEmploye(MostrarTrabajador);

                //PARAMETROS
                object[] parameters = new object[] { pText, pForm, pLabel };

                pForm.Invoke(emp, parameters);
            }
            else
            {
                pLabel.Visible = true;
                pLabel.Text = pText;
            }
        }

        /// <summary>
        /// Indica si hay trabajadores, en un determinado periodo, que tenga un sueldo menor al sueldo minimo legal.
        /// </summary>
        /// <param name="pPeriodo">Periodo consultado.</param>
        /// <returns></returns>
        public static bool SueldoMenorMinimo(int pPeriodo)
        {
            string sql = "SELECT count(*) from itemtrabajador " +
                         "Where coditem = 'SUBASE' AND anomes = @pPeriodo " +
                         "AND valor< (SELECT ingresominimo FROM valoresmes WHERE anomes = @pPeriodo)";
            
            bool existe = false;
            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                                existe = true;
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR SQL...
            }

            return existe;
        }

        /// <summary>
        /// Retorna el total de los items con caracter fijo para calculo de finiquito.
        /// <para>Busca el periodo anterior a la fecha de despido con mes completo trabajado.</para>
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado al trabajador.</param>
        /// <param name="pTerminoContrato">Fecha de termino de contrato.</param>
        /// <param name="Vacaciones">Indica si el total calculado es para calculo de feriados proporcionales.</param>
        /// <returns></returns>
        public static double RemFijoFin(string pContrato, DateTime pTerminoContrato, bool? Vacaciones = false)
        {
            double suma = 0;
            string sql = "SELECT ISNULL(SUM(valorcalculado), 0) as total FROM itemTrabajador " +
                         "INNER JOIN calculomensual ON itemTrabajador.contrato = calculoMensual.contrato AND itemTrabajador.anomes = calculoMensual.anomes " +
                         "INNER JOIN item ON item.coditem = itemtrabajador.coditem " +
                         "WHERE itemTrabajador.contrato = @pContrato " +
                         "AND itemTrabajador.anomes = (SELECT MAX(anomes) FROM calculomensual WHERE sysdiastr >= 30 AND anomes< @pPeriodo) " +
                         $"AND modalidad = 1 {(Vacaciones == true? " AND itemtrabajador.CODITEM <> 'GRATIFI'" : "")}";

            //OBTENEMOS EL ULTIMO PERIODO DE ACUERDO A LA FECHA DE TEMRINO DE CONTRATO.
            int UltimoMes = fnSistema.PeriodoFromDate(pTerminoContrato);
            SqlConnection cn;
            SqlCommand cmd;

            if (UltimoMes > 0)
            {
                try
                {
                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                                cmd.Parameters.Add(new SqlParameter("@pPeriodo", UltimoMes));

                                object data = cmd.ExecuteScalar();
                                if (data != null)
                                {
                                    suma = Convert.ToDouble(data);
                                }
                            }
                            cmd.Dispose();
                        }
                    }
                }
                catch (SqlException ex)
                {
                  //ERROR...
                }
            }

            return suma;
        }

        /// <summary>
        /// Retorna el promedio de las ultimas tres liquidaciones anteriores a la fecha de termino de contrato con mes completo.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pTerminoContrato">Fecha de termino de contrato</param>
        /// <param name="Vacaciones">Indica si el valor total a calcular es para calculo de feriados proporcionales.</param>
        /// <returns></returns>
        public static double RemVariableFin(string pContrato, DateTime pTerminoContrato, bool? Vacaciones = false)
        {
            string sqlMes = "SELECT anomes FROM calculomensual " +
                         "WHERE contrato = @pContrato AND anomes < @pPeriodo AND sysdiastr >= 30 " +
                         "ORDER BY anomes desc";

            string sqlPromedio = "SELECT ISNULL(SUM(valorcalculado), 0) as total FROM itemTrabajador " +
                                 " INNER JOIN item ON item.coditem = itemtrabajador.coditem " +
                                 $"WHERE contrato = @pContrato AND anomes = @pPeriodo AND item.modalidad = 1 {(Vacaciones == true ? " AND itemtrabajador.CODITEM <> 'GRATIFI'" : "")}";

            //OBTENEMOS EL ULITMO PERIODO VIGENTE DEL TRABAJADOR.
            int UltimoMes = fnSistema.PeriodoFromDate(pTerminoContrato);
            SqlConnection cn;
            SqlCommand cmd;
            SqlDataReader rd;

            int count = 0;
            double SubTotal = 0;
            double Promedio = 0;
            List<int> Periodos = new List<int>();
            try
            {
                //OBTENEMOS LOS PERIODOS ANTERIORES AL ULTIMO PERIODO ACTIVO DEL TRABJADOR.
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sqlMes, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", UltimoMes));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    if (count < 3)
                                    {
                                        Periodos.Add(Convert.ToInt32(rd["anomes"]));
                                        count++;
                                    }
                                }
                            }

                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }

                //OBTENEMOS EL PROMEDIO DE LOS PERIODOS
                if (Periodos.Count > 0)
                {
                    foreach (int mes in Periodos)
                    {
                        cn = fnSistema.OpenConnection();
                        if (cn != null)
                        {
                            using (cn)
                            {
                                using (cmd = new SqlCommand(sqlPromedio, cn))
                                {
                                    //PARAMETROS
                                    cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                                    cmd.Parameters.Add(new SqlParameter("@pPeriodo", mes));

                                    object data = cmd.ExecuteScalar();
                                    if (data != null)
                                    {
                                        //ACUMULAMOS TOTAL PARCIAL
                                        SubTotal = SubTotal + Convert.ToDouble(data);
                                    }
                                }
                                cmd.Dispose();
                            }
                        }
                    }

                    //UNA VEZ OBTENIDO LA SUMA TOTAL OBTENEMOS EL PROMEDIO
                    Promedio = SubTotal / 3;
                }
                else
                {
                    //No hay registros anteriores???
                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sqlPromedio, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                                cmd.Parameters.Add(new SqlParameter("@pPeriodo", UltimoMes));

                                object data = cmd.ExecuteScalar();
                                if (data != null)
                                {
                                    //ACUMULAMOS TOTAL PARCIAL
                                    Promedio = Convert.ToDouble(data);
                                }
                            }
                            cmd.Dispose();
                        }
                    }
                }
                
            }
            catch (SqlException ex)
            {
                //error...
            }

            return Promedio;
        }

        /// <summary>
        /// Entrega el valor de un indice mensual para un mes especifico.
        /// </summary>
        /// <param name="pKey">Campo que se desea consultar.</param>
        /// <param name="pPeriodo">Periodo consultado.</param>
        /// <returns></returns>
        public static double GetValueIndice(string pKey, int pPeriodo)
        {
            double val = 0;
            string sql = $"SELECT {pKey} FROM valoresmes WHERE anomes=@pPeriodo";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                                val = Convert.ToDouble(data);
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR.
            }

            return val;
        }
        /// <summary>
        /// Retorna una cadena con todos los items con caracteristica de prestamo acumulados pendientes de pago para el finiquito
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado al trabajador.</param>
        /// <param name="pPeriodo">COrresponde al periodo anterior al periodo de despido.</param>
        /// <returns></returns>
        public static string GetParametrosDescuentos(string pContrato, int pPeriodo)
        {
            string sql = "SELECT coditem, " +
                         "SUM(((CAST(RIGHT(cuota, LEN(cuota) - CHARINDEX('/', cuota)) AS INT) - CAST(substring(cuota, 0, charindex('/', cuota)) AS INT))  + 1 ) * valorcalculado) as Adeudado " +
                         "FROM itemtrabajador " +
                         "WHERE anomes = @pPeriodo AND cuota <> '0' AND contrato = @pContrato " +
                         "AND tipo = 5 AND (SUBSTRING(cuota, 0, charindex('/', cuota)) < RIGHT(cuota, LEN(cuota) - CHARINDEX('/', cuota))) " +
                         "GROUP BY coditem";

            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            string cad = "";

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    cad = cad + $"'{(Convert.ToDouble(rd["Adeudado"])).ToString("N0")}' as {rd["coditem"].ToString()}, ";
                                }
                            }

                            cmd.Dispose();
                            rd.Close();
                               
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {           
              //ERROR...
            }

            return cad;
        }
        /// <summary>
        /// Retorna el total de descuentos adeudados por el trabajador.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado a trabajador.</param>
        /// <param name="pPeriodo">Numero de periodo anterior a la fecha de despido.</param>
        /// <returns></returns>
        public static double TotalDescuentosPendientes(string pContrato, int pPeriodo)
        {
            double total = 0;
            string sql = "SELECT ISNULL(SUM(((CAST(RIGHT(cuota, LEN(cuota) - CHARINDEX('/', cuota)) AS INT) - CAST(substring(cuota, 0, charindex('/', cuota)) AS INT)) + 1 ) * valorcalculado), 0) as Adeudado " +
                         "FROM itemtrabajador " +
                         "WHERE anomes = @pPeriodo AND cuota<> '0' AND contrato = @pContrato " +
                         "AND tipo = 5 AND (SUBSTRING(cuota, 0, charindex('/', cuota)) < RIGHT(cuota, LEN(cuota) - CHARINDEX('/', cuota))) ";

            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                                total = Convert.ToDouble(data);
                        }
                        cmd.Dispose();
                    }                                       
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return total;
        }

        /// <summary>
        /// Entrega el total de liquidaciones dispomnibles de un trabajador a través de su rut.
        /// </summary>
        /// <param name="pRut">Rut del trabajor.</param>
        public static int GetLiqCount(string pRut)
        {
            string sql = "SELECT count(*) FROM liquidacionHistorico " +
                         "INNER JOIN trabajador On trabajador.contrato = liquidacionHistorico.contrato " +
                         "AND trabajador.anomes = liquidacionHistorico.anomes " +
                         "Where rut = @pRut";

            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pRut", pRut));

                            count = Convert.ToInt32(cmd.ExecuteScalar());
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }

            return count;
        }

        /// <summary>
        /// Entrega el valor por concepcto de semana corrida en base a la cantidad de horas
        /// totales trabajadas en el periodo observado.
        /// <param name="TotalHoras">Total horas laburadas</param>
        /// <param name="ValorPorHora">Valor que se paga por hora</param>
        /// </summary>
        public static double GetSemanaCorridaHoras(double TotalHoras, double ValorPorHora)
        {
            double HorasSemana = 45;
            double Jornada = 5;
            double MontoSemana = 0;
            double suma = 0;

            while (TotalHoras > 0)
            {
                if (TotalHoras > HorasSemana)
                {
                    MontoSemana = HorasSemana * ValorPorHora;
                    suma = suma + (MontoSemana / Jornada);

                    TotalHoras = TotalHoras - HorasSemana;
                }
                else
                {
                    MontoSemana = TotalHoras * ValorPorHora;
                    suma = suma + (MontoSemana / Jornada);
                    TotalHoras = 0;
                }
            }

            return suma;
        }

        /// <summary>
        /// Entrega el valor por concepto de semana corrida en base al total pagado por horas.
        /// </summary>
        /// <param name="DiasFestivos">Cantidad de dias festivos encontrados en periodo evaluado.</param>
        /// <param name="MontoVariable">Total monto variable imponible</param>
        /// <param name="pJornada">Cantidad de dias a la semana que trabaja la persona.</param>        
        public static double GetSemanaCorridaMonto(double DiasFestivos, double MontoVariable, double pJornada)
        {
            double total = 0;

            if (pJornada == 0)
                return 0;

            total = (MontoVariable / pJornada) * DiasFestivos;            

            return total;
        }

        /// <summary>
        /// Genera un nuevo codigo para contrato.
        /// </summary>
        /// <param name="pRut"></param>
        public static string GetNuevoContrato(string pRut)
        {
            string sql = "select ISNULL(MAX(contrato), '*') as 'codigo', "  +
						"IIF((substring(substring(MAX(contrato), charindex('-', MAX(contrato)) + 1, 4), 1, 2)) <> RIGHT(YEAR(GETDATE()), 2), " +
                        "CONCAT(substring(MAX(contrato), 1, 8), '-', RIGHT(YEAR(GETDATE()), 2), '01') , " +
                        "CONCAT(substring(MAX(contrato), 1, 8), '-', RIGHT(YEAR(GETDATE()), 2), RIGHT('0' + CAST((RIGHt(substring(MAX(contrato), charindex('-', MAX(contrato)) + 1, 4), 2)) + 1 as VARCHAR(3)), 2)) " +
                        ") as 'final' " +
                       "FROM trabajador where rut = @pRut";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            string value = "", contrato = "", year = "";                       

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pRut", pRut));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    contrato = (string)rd["codigo"];
                                    value = (string)rd["final"];
                                }
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            //Si contrato == a *
            if (contrato != "*")
                return value;
            else {
                /*Generamos correlativo*/

                //Obtener el año
                year = DateTime.Now.Date.ToString("yy");

                value = pRut;
                value = value.Replace(".", "");
                value = value.Replace("-", "");

                value = fnSistema.GetRutsindv(value);

                value = value + "-" + year + "01";

                return value;
            }
        }

        /// <summary>
        /// Retorna sql para ingreso de items de clase
        /// </summary>
        /// <returns></returns>
        public static string GetItemClaseSql()
        {
            return "declare @num  INT " +
                   " select @num = MAX(numitem) + 1 FROM itemtrabajador WHERE contrato = @pContrato AND anomes = @pPeriodo " + 
                   " INSERT INTO itemtrabajador(rut, contrato, anomes, coditem, formula, tipo, orden, numitem) " +
                   " SELECT rut, contrato, anomes, it, " +
                   " (select formula FROM itemclase where clase = @pClase AND item = it) as formula,  " +
                   " (SELECT tipo FROM item where coditem = it)as tipo,  " +
                   " (select orden FROM item WHERE coditem = it) as orden,  " +
                   " row_number() over (ORDER BY (select 0)) + ISNULL(@num, 0) as numitem " +
                   " FROM " +
                   " (SELECT rut, contrato, anomes, it " +
                   "  FROM " +
                   " (SELECT rut, contrato, anomes, itemClase.item as it " +
                   " FROM trabajador inner JOIN clase on clase.codClase = trabajador.clase " +
                   " INNER JOIN itemclase on itemClase.clase = clase.codClase " +
                   " INNER JOIN item on item.coditem = itemClase.item " +
                   " WHERE contrato = @pContrato AND clase.codClase = @pClase AND trabajador.anomes = @pPeriodo " +
                   " EXCEPT " +
                   " SELECT itemTrabajador.rut, itemTrabajador.contrato, trabajador.anomes, " +
                   " itemTrabajador.coditem " +
                   " FROM itemTrabajador INNER JOIN trabajador on trabajador.contrato = itemTrabajador.contrato " +
                   " AND trabajador.anomes = itemTrabajador.anomes " +
                   " INNER JOIN clase on clase.codClase = trabajador.clase " +
                   " INNER JOIN itemClase on itemClase.clase = clase.codClase " +
                   " WHERE itemTrabajador.contrato = @pContrato " +
                   " AND clase.codClase = @pClase AND itemtrabajador.anomes = @pPeriodo) as t) as t1";
        }

        /// <summary>
        /// Actualiza formula de suspension laboral para personas con codigo 13 0 14 en ficha
        /// </summary>
        public static void UpdateItemSuspension(string pContrato, int pPeriodo, bool? Reset = false)
        {
            SqlCommand cmd;
            SqlConnection cn;
            SqlTransaction tr;
            SqlDataReader rd;
            string sql = "UPDATE itemtrabajador set formula=@pFormula WHERE contrato=@pContrato AND anomes=@pPeriodo AND" +
                        " numitem=@pNum AND coditem=@pItem ";
            string sqlForm = "select count(*) from formula where codformula = 'Flab'";
            string sqlItems = "select coditem, f.valor as formula, numitem from itemtrabajador i " +
                              "INNER JOIN formula f ON f.codformula = i.formula " +
                              "AND tipo = 1 AND suspendido = 0 AND contrato=@pContrato AND anomes=@pPeriodo AND coditem<> 'GRATIFI' ";
            string sqllistit = "SELECT lower(coditem) as coditem FROM ITEM";
            string sqlReset = "select coditem, numitem from itemtrabajador " +
                              "WHERE tipo = 1 AND suspendido = 0 AND contrato=@pContrato AND anomes=@pPeriodo AND formula='FLAB' AND coditem<> 'GRATIFI' ";
            bool existe = false;
            List<ItemTrabajador> Listado = new List<ItemTrabajador>();
            List<item> Items = new List<item>();

            //Necesito listado de variables de sistema             

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        tr = cn.BeginTransaction();
                        try
                        {
                            if ((bool)Reset == false)
                            {
                                //1- Verificar si existe la funcion
                                using (cmd = new SqlCommand(sqlForm, cn))
                                {
                                    cmd.Transaction = tr;
                                    object data = cmd.ExecuteScalar();
                                    if (data != DBNull.Value)
                                    {
                                        if (Convert.ToInt32(data) > 0)
                                            existe = true;
                                    }

                                }

                                //Existe la formula, la podemos usar...
                                if (existe)
                                {
                                    //2- Obtener listado de items de trabajador haberes a excepcion de gratificacion
                                    using (cmd = new SqlCommand(sqlItems, cn))
                                    {
                                        cmd.Transaction = tr;

                                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                                        rd = cmd.ExecuteReader();
                                        if (rd.HasRows)
                                        {
                                            while (rd.Read())
                                            {
                                                //Llenamos listado
                                                Listado.Add(new ItemTrabajador()
                                                {
                                                    item = rd["coditem"].ToString(),
                                                    NumeroItem = Convert.ToInt32(rd["numitem"]),
                                                    formula = Convert.ToString(rd["formula"])
                                                  
                                                });
                                            }
                                        }
                                        cmd.Dispose();
                                        rd.Close();
                                    }

                                    //3- Obtener listado completo de items
                                    using (cmd = new SqlCommand(sqllistit, cn))
                                    {
                                        cmd.Transaction = tr;
                                        rd = cmd.ExecuteReader();
                                        if (rd.HasRows)
                                        {
                                            while (rd.Read())
                                            {
                                                Items.Add(new item() { coditem = Convert.ToString(rd["coditem"]) });
                                            }
                                        }

                                        cmd.Dispose();
                                        rd.Close();
                                    }

                                    if (Listado.Count > 0 && Items.Count > 0)
                                    {
                                        Listado = GetListVar(Listado, Items);

                                        if (Listado.Count > 0)
                                        {
                                            foreach (ItemTrabajador x in Listado)
                                            {
                                                //Actualizamos todas las formulas de los items haberes
                                                using (cmd = new SqlCommand(sql, cn))
                                                {
                                                    
                                                    cmd.Parameters.Add(new SqlParameter("@pFormula", "FLAB"));
                                                    cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                                                    cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                                                    cmd.Parameters.Add(new SqlParameter("@pNum", x.NumeroItem));
                                                    cmd.Parameters.Add(new SqlParameter("@pItem", x.item));

                                                    cmd.Transaction = tr;
                                                    cmd.ExecuteNonQuery();

                                                }
                                            }
                                        }
                                    }

                                    tr.Commit();
                                }
                            }
                            else
                            {
                                //1- Obtener todos los items que tienen la funcion FLAB
                                using (cmd = new SqlCommand(sqlReset, cn))
                                {
                                    cmd.Transaction = tr;
                                    cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                                    cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                                    rd = cmd.ExecuteReader();
                                    if (rd.HasRows)
                                    {
                                        while (rd.Read())
                                        {
                                            //Llenamos listado
                                            Listado.Add(new ItemTrabajador()
                                            {
                                                item = rd["coditem"].ToString(),
                                                NumeroItem = Convert.ToInt32(rd["numitem"])
                                               
                                                
                                            });
                                        }
                                    }

                                    cmd.Dispose();
                                    rd.Close();

                                }

                                if (Listado.Count > 0)
                                {
                                    foreach (ItemTrabajador x in Listado)
                                    {
                                        //Actualizamos todas las formulas de los items haberes
                                        using (cmd = new SqlCommand(sql, cn))
                                        {

                                            cmd.Parameters.Add(new SqlParameter("@pFormula", "0"));
                                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                                            cmd.Parameters.Add(new SqlParameter("@pNum", x.NumeroItem));
                                            cmd.Parameters.Add(new SqlParameter("@pItem", x.item));

                                            cmd.Transaction = tr;
                                            cmd.ExecuteNonQuery();

                                        }
                                    }
                                }

                                tr.Commit();
                            }                        
                        }
                        catch (Exception ex)
                        {
                            //error...
                            tr.Rollback();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //Error...
            }

        }

        private  static List<ItemTrabajador> GetListVar(List<ItemTrabajador> pListado, List<item> pListItem)
        {
            List<ItemTrabajador> FinalList = new List<ItemTrabajador>();
            List<ItemTrabajador> TemporaryList = new List<ItemTrabajador>();
            if (pListado.Count > 0)
            {
                foreach (varSistema vr in varSistema.listado)
                {
                    //Si es mayor que cero quiere decir que la formula tiene una variable de sistema
                    TemporaryList = pListado.FindAll(pp => pp.formula.ToLower().Contains(vr.nombre.ToLower()));
                    if (TemporaryList.Count > 0)
                    {
                        pListado.RemoveAll(pp => pp.formula.ToLower().Contains(vr.nombre.ToLower()));
                    }
                    
                    if (pListado.Count == 0)
                        break;

                }

                TemporaryList.Clear();
                if (pListItem.Count > 0 && pListado.Count > 0)
                {
                    foreach (item x in pListItem)
                    {
                        //Alguna formula contiene un item???
                        TemporaryList = pListado.FindAll(pp => pp.formula.ToLower().Contains(x.coditem));
                        if (TemporaryList.Count > 0)
                        {
                            pListado.RemoveAll(pp => pp.formula.ToLower().Contains(x.coditem));
                        }

                        if (pListado.Count == 0)
                            break;
                    }
                }

            }

            return pListado;
        }

        /// <summary>
        /// Entrega un listado de contrato de acuerdo a consulta sql para el periodop abierto
        /// </summary>
        public static List<Employe> GetListPer(string pSql)
        {
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            List<Employe> Data = new List<Employe>();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(pSql, cn))
                        {
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Data.Add(new Employe() { contrato = Convert.ToString(rd["contrato"]),
                                    anomes = Convert.ToInt32(rd["anomes"])});
                                }
                            }
                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //eroror.
            }

            return Data;
        }

        /// <summary>
        /// Indica si existe un rut en un periodo determinado
        /// </summary>
        /// <param name="pRut"></param>
        /// <returns></returns>
        public static bool ExisteRutMes(string pRut, int pPeriodo)
        {
            string sql = "SELECT count(*) FROM trabajador WHERE rut=@pRut AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlConnection cn;
            bool existe = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            object data = cmd.ExecuteScalar();
                            if (data != DBNull.Value)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    existe = true;
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                //
            }

            return existe;
        }

        /// <summary>
        /// Entrega el total de creditos de caja para un contrato definido (Solo para previred)
        /// </summary>
        /// <param name="pContrato"></param>
        /// <param name="pPeriodo"></param>
        /// <returns></returns>
        public static double GetPrestamos(string pContrato, int pPeriodo)
        {
            string sql = "SELECT ISNULL(SUM(valorcalculado), 0) as monto FROM itemtrabajador WHERE " +
                        " anomes=@pPeriodo AND contrato=@pContrato AND coditem='PRECAJ' AND suspendido=0 ";
            double Monto = 0;
            SqlConnection cn;
            SqlCommand cmd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROA
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            Monto = Convert.ToDouble(cmd.ExecuteScalar());
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //Error...
            }

            return Monto;
        }

        /// <summary>
        /// Entrega de datos de ahorro para previred
        /// </summary>
        /// <param name="pContrato"></param>
        /// <param name="pPeriodo"></param>
        /// <returns></returns>
        public static double GetLeasing(string pContrato, int pPeriodo)
        {
            string sql = "SELECT ISNULL(SUM(valorcalculado), 0) FROM itemtrabajador WHERE " +
                        " anomes=@pPeriodo AND contrato=@pContrato AND coditem='AHOAND' AND suspendido=0 ";
            double Monto = 0;
            SqlConnection cn;
            SqlCommand cmd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROA
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));


                            Monto = Convert.ToDouble(cmd.ExecuteScalar());
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //Error...
            }

            return Monto;
        }

        /// <summary>
        /// Entrega seguros para previred
        /// </summary>
        /// <param name="pContrato"></param>
        /// <param name="pPeriodo"></param>
        /// <returns></returns>
        public static double GetSeguros(string pContrato, int pPeriodo)
        {
            string sql = "SELECT ISNULL(SUM(valorcalculado), 0) FROM itemtrabajador WHERE " +
                        " anomes=@pPeriodo AND contrato=@pContrato AND coditem='SGANDES' AND suspendido=0 ";
            double Monto = 0;
            SqlConnection cn;
            SqlCommand cmd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROA
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            Monto = Convert.ToDouble(cmd.ExecuteScalar());
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //Error...
            }

            return Monto;
        }

        /// <summary>
        /// Entrega imponible para suspension
        /// Busca el primer mes de historico que tiene mes completo trabajado
        /// </summary>
        /// <param name="pContrato"></param>
        /// <returns></returns>
        public static double GetImponibleSuspension(string pContrato)
        {
            string sql = "select top 1 ISNULL(systimp, 0) " +
                        " from calculomensual where contrato = @pContrato  AND sysdiastr >= 30 " +
                        " ORDER BY anomes desc";
            double Monto = 0;
            SqlConnection cn;
            SqlCommand cmd;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            object data = cmd.ExecuteScalar();
                            if (data != DBNull.Value)
                            {
                                Monto = Convert.ToDouble(data);
                            }
                            cmd.Dispose();

                        }
                    }
                }
            }
            catch (SqlException ex)
            { 
                //Error...
            }

            return Monto;
        }

        /// <summary>
        /// Entrega informacion referente al tramo al que pertenece la persona para calculo de impuesto
        /// </summary>
        /// <param name="pPeriodo"></param>
        /// <param name="pMontoTributable"></param>
        /// <returns></returns>
        public static Hashtable GetTramoImpuesto(int pPeriodo, double pMontoTributable)
        {
            SqlConnection cn;
            SqlCommand cmd;
            SqlDataReader rd;
            Hashtable data = new Hashtable();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand("paGetTramoImpuesto", cn))
                        {
                            cmd.CommandType = CommandType.StoredProcedure;
                            cmd.Parameters.Add(new SqlParameter("@periodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@monto", pMontoTributable));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    data.Add("tope", Convert.ToDouble(rd["tope"]));
                                    data.Add("inicio", Convert.ToDouble(rd["inicio"]));
                                    data.Add("termino", Convert.ToDouble(rd["termino"]));
                                    data.Add("factor", Convert.ToDouble(rd["factor"]));
                                    data.Add("rebaja", Convert.ToDouble(rd["rebaja"]));
                                }
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //error
                data = null;
            }

            return data;
        }


        /// <summary>
        /// Entrega el imponible para calculo de items cuando hay licencia.
        /// </summary>
        /// <param name="pPeriodo"></param>
        /// <param name="pRut"></param>
        /// <param name="pContrato"></param>
        /// <returns></returns>
        public static double GetImpLicencia(int pPeriodo, string pRut, string pContrato)
        {
            string sql = "SELECT dbo.GetImponibleLicencia(@pPeriodo, @pRut, @pContrato) as monto";
            SqlCommand cmd;
            SqlConnection cn;
            double Monto = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS   
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            object data = cmd.ExecuteScalar();
                            if (data != null && data != DBNull.Value)
                            {
                                Monto = Convert.ToDouble(data);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                ///error....
            }

            return Monto;

        }

       

    }

    class Impuesto
    {
        public int id { get; set; }
        public int tramo { get; set; }
        public double tope { get; set; }
        public double factor { get; set; } //REPREENTA EL PORCENTAJE
        public double rebaja { get; set; } //EN UTM
        public int inicio { get; set; }
        public int hasta { get; set; }
    }

    class Documento
    {
        /// <summary>
        /// Numero de contrato asociado al trabajador.
        /// </summary>
        private string Contrato = "";
        /// <summary>
        /// Corresponde al periodo de la ficha del trabajador.
        /// </summary>
        private int periodoEmpleado = 0;

        /// <summary>
        /// Representa a un trabajador.
        /// </summary>
        Persona Trabajador;
        /// <summary>
        /// Constructor clase Documento.
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado al trabajador</param>
        /// <param name="periodo">Periodo ficha trabajador.</param>
        public Documento(string contrato, int periodo)
        {            
            Contrato = contrato;
            periodoEmpleado = periodo;

           if (contrato != "" && periodoEmpleado != 0)
            {
                Trabajador = new Persona();
                Trabajador = Persona.GetInfo(contrato, periodo);
            }            
        }

        #region "METODOS"   

        /// <summary>
        /// Genera cadena para afp.
        /// </summary>
        /// <param name="RegimenAntiguo">Nos indica si es trabajador tiene regimen antiguo.</param>
        /// <returns></returns>
        private string PorcentajeAfp(bool RegimenAntiguo)
        {
            CajaPrevision caja = new CajaPrevision();
            AseguradoraFondoPension Afp = new AseguradoraFondoPension();

            string info = "";
            double imp = 0, topeAfp = 0, showValue = 0, porcPrevision = 0;
            double porcAdmin = 0;

            imp = Math.Round(Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "systimp"));
            topeAfp = Math.Round(Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "systopeafp"));

            //Solo para saber si el imponible supera el tope.
            if (imp > topeAfp)
                showValue = topeAfp;
            else if (topeAfp > imp)
                showValue = imp;
            else
                showValue = imp;

            double diasLic = 0, diasTr = 0;
            diasLic = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysdiaslic");
            diasTr = Calculo.GetValueFromCalculoMensaul(Contrato ,periodoEmpleado, "sysdiastr");

            //Licencias ? 
            if (diasLic > 0)
            {
                if(imp > topeAfp)
                    showValue = (showValue / 30) * diasTr;
            }

            if (RegimenAntiguo == true)
            {
                //Consultamos datos cajaprevision...
                porcPrevision = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysporcadmafp");
                caja.SetInfo(Contrato, periodoEmpleado);
                info = porcPrevision + "% Cotiz. " + caja.Nombre + " Sobre: " + showValue.ToString("N0");
            }
            else
            {
                //Consultamos datos afp...
                Afp = Persona.GetAfp(Contrato, periodoEmpleado);
                porcAdmin = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysporcadmafp");
                info = (porcAdmin + Afp.porcFondo) + "% Cotiz. " + Afp.nombre + " Sobre: " + showValue.ToString("N0");
            }            

            return info;
        }
  
        /// <summary>
        /// Genera cadena para salud.
        /// </summary>
        /// <param name="AplicaPorc">El descuento es en porcentajes.</param>
        /// <param name="AplicaUf">El descuento es en uf.</param>
        /// <param name="AplicaPesos">El descuento es en pesos.</param>
        /// <param name="pValue">Valor a pagar.</param>
        /// <param name="Lic">Dias de licencia.</param>
        /// <param name="pData">Información entidad de salud.</param>
        /// <returns></returns>
        private string GetCadenaSalud(bool AplicaPorc, bool AplicaUf, bool AplicaPesos, double pValue, double Lic, Hashtable pData)
        {
            //string sql = "SELECT isapre.id as identificador, isapre.nombre as nombre FROM trabajador " +
            //            "INNER JOIN isapre ON isapre.id = trabajador.salud " +
            //            "WHERE contrato = @contrato AND anomes = @periodo";

            string cad = "", Isapre = "";
            int code = 0;

            Isapre = pData["nombre"].ToString();
            code = Convert.ToInt32(pData["code"]);

            if (pData.Count > 0)
            {
                //FONASA
                if (code == 1)
                {
                    if (AplicaPorc)
                    {
                        if (Lic != 0)
                            cad = $"{pValue}% FONASA (-Lic)";
                        else
                            cad = $"{pValue}% FONASA";
                    }
                    else if (AplicaPesos)
                    {
                        if (Lic != 0)
                            cad = $"{pValue} Pesos FONASA (-Lic)";
                        else
                            cad = $"{pValue} Pesos FONASA";

                    }
                    else if (AplicaUf)
                    {
                        if (Lic != 0)
                            cad = $"{pValue} UF FONASA (-Lic)";
                        else
                            cad = $"{pValue} UF FONASA";
                    }
                    else
                    {
                        if (Lic != 0)
                            //FONASA
                            cad = "7% FONASA (-Lic)";
                        else
                            cad = "7% FONASA";
                    }
                }
                //ISAPRE
                else if (code >= 2)
                {
                    //SI APLICA PORCENTAJE
                    if (AplicaPorc)
                    {
                        if (Lic != 0)
                            cad = $"{pValue}% {Isapre} (-Lic)";
                        else
                            cad = $"{pValue}% {Isapre}";
                    }
                    else if (AplicaUf)
                    {
                        if (Lic != 0)
                            cad = $"{pValue} UF {Isapre} (-Lic)";
                        else
                            cad = $"{pValue} UF {Isapre}";
                    }
                    else if (AplicaPesos)
                    {
                        if (Lic != 0)
                            cad = $"DESCUENTO {Isapre} (-Lic)";
                        else
                            cad = $"DESCUENTO {Isapre}";
                    }
                    else
                        cad = "DESCUENTO SALUD";
                }
            }

            return cad;
        }

        /// <summary>
        /// Genera cadena para impuesto.
        /// </summary>
        /// <returns></returns>
        private string ImpuestoEmpleado()
        {
            string info = "";
            double factorImpto = 0, tributo = 0, rebImpto = 0;
            factorImpto = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysfactorimpto");
            tributo = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "systributo");
            rebImpto = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysrebimpto");

            //NO TIENE LICENCIAS ASOCIADAS
            //info = "Impto " + varSistema.ObtenerValorLista("sysfactorimpto") * 100 + "% " +
            //"de: " + (varSistema.ObtenerValorLista("systributo")).ToString("N0") + " -Rebaja:" + (varSistema.ObtenerValorLista("sysrebimpto")).ToString("N2");

            info = "Impto " + factorImpto * 100 + "% " +
            "de: " + (tributo).ToString("N0") + " -Rebaja:" + (rebImpto).ToString("N2");

            return info;
        }      

        /// <summary>
        /// Parte del reporte final de liquidacion correspondiente a los haberes.
        /// </summary>
        /// <returns>Un objeto xtrareport</returns>
        public XtraReport SoloHaberesAnteriores()
        {
            string sqlItem = "SELECT contrato, itemTrabajador.orden, itemTrabajador.coditem as item, " +
                             "valor as original, valorcalculado as calculado,  " +
                             "numitem, itemTrabajador.tipo, descripcion, cuota, imprimebase, " +
                             "(select systhab FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes=itemtrabajador.anomes) as systhab, " +
                            "(select systimp FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as systimp, "+
                            "(select systdctos FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as systdctos, " + 
                            "(select sysliq FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysliq, " +
                            "(select syspago FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as syspago, " +
                            "(select sysfactorimpto FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysfactorimpto, " +
                            "(select systributo FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as systributo, " +
                            "(select sysrebimpto FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysrebimpto, " +
                            "(select syscicese FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as syscicese, " +
                            "(select sysfscese FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysfscese, " +
                            "(select syscicest FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as syscicest, " +
                            "(select sysdiaslic FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysdiaslic, " +
                            "(select ROUND(systopeafp, 0) FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as systopeafp, " +
                            "(select sysporcadmafp FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysporcadmafp, " +
                            "(select sysdiastr FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysdiastr, " +
                            "(select isa.nombre FROM trabajador t inner join isapre isa on t.salud = isa.id WHERE t.contrato = itemTrabajador.contrato AND itemtrabajador.anomes = t.anomes) as Salud, " + 
                            "(select isa.id FROM trabajador t inner join isapre isa on t.salud = isa.id WHERE t.contrato = itemTrabajador.contrato AND itemtrabajador.anomes = t.anomes) as CodSalud, " +
                            "(select sysdiassp13 FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysdiassp13, " +
                            "(select sysdiassp14 FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysdiassp14 " +
                             "FROM itemtrabajador " +
                             "INNER JOIN item ON item.coditem = itemTrabajador.coditem " +
                             "WHERE contrato = @contrato AND anomes = @periodo AND imprime = 1 AND suspendido = 0 " +
                             "AND (itemtrabajador.tipo = 1 OR itemtrabajador.tipo = 2 OR itemtrabajador.tipo = 3) " +
                             "ORDER by tipo, orden ";

            SqlConnection cn;
            List<Data> listado = new List<Data>();
            SqlCommand cmd;
            SqlDataReader rd;
            int tipo = 0, cNoImponibles = 0, cFamiliar = 0, cImponible = 0;
            int CargasSimples = 0, CargasInvalidas = 0, CargasMaternales = 0, count =0;
            double sumaimponible = 0, calculado = 0;
            string descripcion = "";
            bool ImprimeBase = false, Imprime = false;
            double systimp = 0, systhab = 0, systdctos = 0, syspago = 0, sysliq = 0;
            double sysdiaslic = 0, sysdiastr = 0;

            //CARGAS FAMILIARES SIMPLES
            Familiar f = new Familiar(Contrato, periodoEmpleado);
            CargasSimples = f.GetNumCargasSimplesV2();

            //CARGAS INVALIDAS
            CargasInvalidas = f.GetNumCargasInvalidezV2();

            //CARGAS MATERNALES
            CargasMaternales = f.GetNumCargasMaternal();

            try
            {

                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sqlItem, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@contrato", Contrato));
                            cmd.Parameters.Add(new SqlParameter("@periodo", periodoEmpleado));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                //RECORREMOS
                                while (rd.Read())
                                {
                                    count++;

                                    if (count == 1)
                                    {
                                        systimp = rd["systimp"] == DBNull.Value ? 0: Convert.ToDouble(rd["systimp"]);
                                        systhab = rd["systhab"] == DBNull.Value ? 0: Convert.ToDouble(rd["systhab"]);
                                        systdctos = rd["systdctos"] == DBNull.Value ? 0: Convert.ToDouble(rd["systdctos"]);
                                        sysliq = rd["sysliq"] == DBNull.Value? 0: Convert.ToDouble(rd["sysliq"]);
                                        syspago = rd["syspago"] == DBNull.Value? 0: Convert.ToDouble(rd["syspago"]);
                               

                                        sysdiaslic = rd["sysdiaslic"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysdiaslic"]);
                                        sysdiastr = rd["sysdiastr"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysdiastr"]);

                                    }

                                    //OBTENEMOS EL TIPO Y LA DESCRIPCION                             
                                    tipo = Convert.ToInt32(rd["tipo"]);
                                    descripcion = (string)rd["descripcion"];
                                    calculado = Convert.ToDouble(rd["calculado"]);
                                    //ImprimeBase = ItemTrabajador.ImprimeBase((string)rd["item"]);
                                    ImprimeBase = Convert.ToBoolean(rd["imprimebase"]);

                                    //PREGUNTAMOS POR LOS ITEM QUE SON HABERES
                                    if (tipo == 1)
                                    {
                                        //CREAMOS TITULO PARA HABERES IMPONIBLES
                                        if (cImponible == 0)
                                            listado.Add(new Data() { Item = "IMPONIBLES" });

                                        if (calculado != 0)
                                        {
                                            if ((string)rd["cuota"] != "0")
                                                descripcion = " " + fnSistema.PrimerMayuscula(descripcion) + " " + ItemTrabajador.GetCadenaCuota((string)rd["cuota"]);
                                            else
                                                descripcion = " " + fnSistema.PrimerMayuscula(descripcion);

                                            if (ImprimeBase)
                                            {
                                                listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(descripcion), Haber = ((decimal)rd["calculado"]).ToString("N0"), Vo = ((decimal)rd["original"]).ToString("N2") });
                                            }
                                            else
                                                listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(descripcion), Haber = ((decimal)rd["calculado"]).ToString("N0") });
                                        }

                                        cImponible++;
                                        sumaimponible = sumaimponible + Convert.ToDouble((decimal)rd["calculado"]);
                                    }
                                    else if (tipo == 2)
                                    {
                                        //AGREGAR TITULO
                                        if (cNoImponibles == 0)
                                            listado.Add(new Data() { Item = "NO IMPONIBLES" });

                                        //HABER NO IMPONIBLE
                                        if (calculado != 0)
                                        {
                                            if (ImprimeBase)
                                                listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(descripcion), Haber = ((decimal)rd["calculado"]).ToString("N0"), Vo = ((decimal)rd["original"]).ToString("N0") });
                                            else
                                                listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(descripcion), Haber = ((decimal)rd["calculado"]).ToString("N0") });
                                        }

                                        cNoImponibles++;
                                    }
                                    else if (tipo == 3)
                                    {
                                        //FAMILIARES
                                        //AGREGAMOS TITULO
                                        if (cFamiliar == 0)
                                            listado.Add(new Data() { Item = "ASIGNACIONES FAMILIARES" });

                                        if (calculado != 0)
                                        {
                                            //CARGAS SIMPLES
                                            if ((string)rd["item"] == "ASIGFAM")
                                                listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(descripcion) + (CargasSimples != 0 ? " (#" + CargasSimples + " cargas)" : ""), Haber = ((decimal)rd["calculado"]).ToString("N0") });
                                            //CARGAS INVALIDEZ
                                            if ((string)rd["item"] == "ASIGINV")
                                                listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(descripcion) + (CargasInvalidas != 0 ? " (#" + CargasInvalidas + " cargas)" : ""), Haber = ((decimal)rd["calculado"]).ToString("N0") });
                                            //CARGAS MATERNALES
                                            if ((string)rd["item"] == "ASIGMAT")
                                                listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(descripcion) + (CargasMaternales != 0 ? " (#" + CargasMaternales + " cargas)" : ""), Haber = ((decimal)rd["calculado"]).ToString("N0") });
                                            //SIN SIN RETROACTIVAS
                                            if ((string)rd["item"] == "ASIFAR")
                                                listado.Add(new Data() { Item = " " +  fnSistema.PrimerMayuscula(descripcion), Haber = ((decimal)rd["calculado"]).ToString("N0") });
                                        }

                                        cFamiliar++;
                                    }
                                }
                            }
                        }

                        cmd.Dispose();
                        rd.Close();
                    }              
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //rptLiquidacion2 reporte = new rptLiquidacion2();
            //Reporte externo
            ReportesExternos.rptLiquidacion2 reporte = new ReportesExternos.rptLiquidacion2();
            reporte.LoadLayoutFromXml(Path.Combine(fnSistema.RutaCarpetaReportesExterno, "rptLiquidacion2.repx"));
            //Cargar layout desde una ruta (cambiar layout desde reporte)
            //reporte.LoadLayoutFromXml(@"D:\Sistema remuneraciones\Formatos reporte\Sopytec\rptLiquidacion2.repx");
            reporte.DataSource = listado;

            //SUBREPORTE SOLO DESCUENTOS
            XtraReport rep = new XtraReport();
            //rep.LoadLayoutFromXml(@"D:\Sistema remuneraciones\Formatos reporte\Sopytec\rptSubAportesLiq.repx");
            rep = SoloDescuentosAnteriores();

            XtraReport repoAportes = new XtraReport();
            //repoAportes.LoadLayoutFromXml(@"D:\Sistema remuneraciones\Formatos reporte\Sopytec\rptSubDescuentosLiq.repx");
            repoAportes = SoloAportesAnteriores();

            reporte.xrSubreport1.ReportSource = rep;
            reporte.xrSubreport2.ReportSource = repoAportes;          
         
            Empresa emp = new Empresa();
            emp.SetInfo();

            //PARAMETROS
            //reporte.Parameters["imponible"].Value = "$" + (Math.Round(Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "systimp"))).ToString("N0");
            //reporte.Parameters["descuentos"].Value = "$" + (Math.Round(Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "systdctos"))).ToString("N0");
            //reporte.Parameters["haberes"].Value = "$" + (Math.Round(Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "systhab"))).ToString("N0");
            //reporte.Parameters["liquido"].Value = "$" + (Math.Round(Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysliq"))).ToString("N0");
            //reporte.Parameters["pago"].Value = "$" + (Math.Round(Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "syspago"))).ToString("N0");

            reporte.Parameters["imponible"].Value = "$" + (Math.Round(systimp)).ToString("N0");
            reporte.Parameters["descuentos"].Value = "$" + (Math.Round(systdctos)).ToString("N0");
            reporte.Parameters["haberes"].Value = "$" + (Math.Round(systhab)).ToString("N0");
            reporte.Parameters["liquido"].Value = "$" + (Math.Round(sysliq)).ToString("N0");
            reporte.Parameters["pago"].Value = "$" + (Math.Round(syspago)).ToString("N0");

            //PARAMETROS PARA CABECERA (INFORMACION PERSONA)
            if (Trabajador.Rut != null)
            {
                reporte.Parameters["nombre"].Value = Trabajador.ApellidoNombre;
                reporte.Parameters["rut"].Value = fnSistema.fFormatearRut2(Trabajador.Rut);
                reporte.Parameters["cargo"].Value = fnSistema.PrimerMayuscula(Trabajador.Cargo.ToLower());
                reporte.Parameters["fechaingreso"].Value = fnSistema.FechaFormato(Trabajador.Ingreso);
                reporte.Parameters["contrato"].Value = Contrato;
                reporte.Parameters["centroCosto"].Value = fnSistema.PrimerMayuscula(Trabajador.centro.ToLower());
                reporte.Parameters["sucursal"].Value = fnSistema.PrimerMayuscula(Trabajador.sucursal.ToLower());
            }           

            //PARA EMPRESA
            reporte.Parameters["empresa"].Value = fnSistema.PrimerMayuscula(emp.Razon.ToLower());
            reporte.Parameters["rutempresa"].Value = fnSistema.fFormatearRut2(emp.Rut);

            //LICENCIAS
            reporte.Parameters["diastr"].Value = sysdiastr;
            reporte.Parameters["diaslic"].Value = sysdiaslic;

            string cadena = "";
            double pago = Math.Round(syspago);
            //PRECIO EN LETRAS
            if (pago > 0)
                cadena = Conversores.NumeroALetras(Convert.ToDecimal(Math.Round(pago)));

            reporte.Parameters["precioletras"].Value = fnSistema.PrimerMayuscula(cadena.ToLower());

            reporte.Parameters["direccionempresa"].Value = emp.Direccion;
            reporte.Parameters["periodo"].Value =  fnSistema.PrimerMayuscula(fnSistema.FechaFormatoSoloMes(fnSistema.FechaPeriodo(periodoEmpleado)));

            //PARA QUE NO APARESCA EL FORMULARIO DE INGRESO DE VALORES PARA PARAMETROS
            foreach (DevExpress.XtraReports.Parameters.Parameter item in reporte.Parameters)
            {
                item.Visible = false;
            }    

            //RETORNAMOS REPORTE
            return reporte;
        }
        /// <summary>
        /// Parte del reporte final de liquidacion correspondientes a los descuentos.
        /// </summary>
        /// <returns></returns>
        public XtraReport SoloDescuentosAnteriores()
        {
            List<Data> listado = new List<Data>();
            Hashtable data = new Hashtable();

            //PARA CAJA Y MUTUAL
            Data mutual = new Data();
            mutual.Item = "";
            mutual.Descuento = "0";
            mutual.Haber = "0";
            mutual.Vo = "0";

            Data caja = new Data();
            caja.Item = "";
            caja.Descuento = "0";
            caja.Haber = "0";
            caja.Vo = "0";

            int tipo = 0, cLeyes = 0, cDescuentos = 0;
            string cadImpuesto = "", descripcion = "", cuota = "", cadAfp = "", valor = "", cadCuotas = "";
            double original = 0, calculado = 0, Licencias = 0, segCiEmpleado = 0;
            bool ImprimeBase = false;
            double systimp = 0, systhab = 0, systdctos = 0, syspago = 0, sysliq = 0, sysfactorimpto = 0;
            double systributo = 0, sysrebimpto = 0, syscicese = 0, sysfscese = 0, syscicest = 0, sysdiaslic = 0;
            double TopeAfpLiq = 0, sysporcadmafp = 0, sysdiastr = 0, sysdiassp13 = 0, sysdiassp14 = 0;
            string CadenaSalud = "";
            bool esSuspension = false, sp13 = false, sp14 = false;
            int count = 0;

            string sqlItem = "SELECT contrato, itemTrabajador.orden, itemTrabajador.coditem as item, " +
                             "valor as original, valorcalculado as calculado,  " +
                             "numitem, itemTrabajador.tipo, descripcion, cuota, porc, uf, pesos, imprimebase, " +
                             "splab13, splab14,  " +
                             "(SELECT imponible FROM liquidacionHistorico liq where liq.contrato = itemtrabajador.contrato AND " +
                             "liq.anomes = @pAnterior) as impanterior, " +
	                         "(select systhab FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as systhab,  " +
                             "(select systimp FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as systimp, " +
                             "(select systdctos FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as systdctos,  " +
                             "(select sysliq FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysliq,  " +
                             "(select syspago FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as syspago,  " +
                             "(select sysfactorimpto FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysfactorimpto,  " +
                             "(select systributo FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as systributo,  " +
                             "(select sysrebimpto FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysrebimpto,  " +
                             "(select syscicese FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as syscicese,  " +
                             "(select sysfscese FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysfscese, " +
                             "(select syscicest FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as syscicest, " +
                             "(select sysdiaslic FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysdiaslic, " +
                             "(select ROUND(systopeafp, 0) FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as systopeafp,  " +
                             "(select sysporcadmafp FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysporcadmafp,  " +
                             "(select sysdiastr FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysdiastr,  " +
                            "(select isa.nombre FROM trabajador t inner join isapre isa on t.salud = isa.id WHERE t.contrato = itemTrabajador.contrato AND itemtrabajador.anomes = t.anomes) as Salud,  " +
                            "(select isa.id FROM trabajador t inner join isapre isa on t.salud = isa.id WHERE t.contrato = itemTrabajador.contrato AND itemtrabajador.anomes = t.anomes) as CodSalud,  " +
                            "(select sysdiassp13 FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysdiassp13,  " +
                            "(select sysdiassp14 FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysdiassp14 " +
                             "FROM itemtrabajador " +
                             "INNER JOIN item ON item.coditem = itemTrabajador.coditem " +
                             "WHERE contrato = @contrato AND anomes = @periodo AND imprime = 1 AND " +
                             "(itemtrabajador.tipo = 4 OR itemtrabajador.tipo = 5) AND suspendido = 0 " +
                             "ORDER by tipo, orden ";

            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;

            //LICENCIAS
            //Licencias = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysdiaslic");

            ////CADENA IMPUESTO
            //cadImpuesto = "Impto " + Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysfactorimpto") * 100 + "%" +
            //    " de: " + Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "systributo").ToString("N0") +
            //    " -Rebaja:" + Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysrebimpto").ToString("N2");

            //segCiEmpleado = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "syscicest");      

            //cadena afp
            //cadAfp = PorcentajeAfp((Trabajador.Regimen == 4 || Trabajador.Regimen == 3 || Trabajador.Regimen == 5) ? true : false);

            //SALUD
            //data = SaludEmpleadoAnterior();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sqlItem, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@contrato", Contrato));
                            cmd.Parameters.Add(new SqlParameter("@periodo", periodoEmpleado));
                            cmd.Parameters.Add(new SqlParameter("@pAnterior", fnSistema.fnObtenerPeriodoAnterior(periodoEmpleado)));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                //RECORREMOS
                                while (rd.Read())
                                {
                                    count++;
                                    if (count  == 1)
                                    {
                                        systimp = rd["systimp"] == DBNull.Value ? 0: Convert.ToDouble(rd["systimp"]);
                                        systhab = rd["systhab"] == DBNull.Value ? 0: Convert.ToDouble(rd["systhab"]);
                                        systdctos = rd["systdctos"] == DBNull.Value ? 0: Convert.ToDouble(rd["systdctos"]);
                                        sysliq = rd["sysliq"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysliq"]);
                                        syspago =rd["syspago"] == DBNull.Value ? 0:  Convert.ToDouble(rd["syspago"]);
                                        TopeAfpLiq = rd["systopeafp"] == DBNull.Value ? 0: Convert.ToDouble(rd["systopeafp"]);

                                        //Para cadena Impuesto
                                        sysfactorimpto = rd["sysfactorimpto"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysfactorimpto"]);
                                        systributo = rd["systributo"] == DBNull.Value ? 0: Convert.ToDouble(rd["systributo"]);
                                        sysrebimpto = rd["sysrebimpto"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysrebimpto"]);

                                        syscicese = rd["syscicese"] == DBNull.Value ? 0: Convert.ToDouble(rd["syscicese"]);
                                        sysfscese = rd["sysfscese"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysfscese"]);
                                        syscicest = rd["syscicest"] == DBNull.Value ? 0: Convert.ToDouble(rd["syscicest"]);

                                        sysdiaslic = rd["sysdiaslic"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysdiaslic"]);
                                        sysdiastr = rd["sysdiastr"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysdiastr"]);
                                        sysporcadmafp = rd["sysporcadmafp"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysporcadmafp"]);
                                        sysdiassp13 = rd["sysdiassp13"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysdiassp13"]);
                                        sysdiassp14 = rd["sysdiassp14"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysdiassp14"]);

                                        //ImpAnterior = Convert.ToDouble(rd["impanterior"]);

                                        //Cadena para impuesto
                                        cadImpuesto = "Impto " + sysfactorimpto * 100 + "%" +
                                         " de: " + systributo.ToString("N0") +
                                        " -Rebaja:" + sysrebimpto.ToString("N2");

                                        //SEGURO DE INVALIDEZ CUENTA INDIVIDUAL EMPRESA
                                        //SegIndividualEmp = syscicese;
                                        //SEGURO DE INVALIDEZ FONDO SOLIDARIO EMPRESA
                                        //SegFondoEmp = sysfscese;
                                        //SEGURO CESANTIA CUENTA INDIVIDUAL TRABAJADOR
                                        segCiEmpleado = syscicest;
                                        //LICENCIAS
                                        Licencias = sysdiaslic;
                                    }

                                    esSuspension = (Convert.ToBoolean(rd["splab13"]) == true || Convert.ToBoolean(rd["splab14"]) == true) ? true : false;
                                    sp13 = Convert.ToBoolean(rd["splab13"]);
                                    sp14 = Convert.ToBoolean(rd["splab14"]);

                                    //OBTENEMOS EL TIPO Y LA DESCRIPCION
                                    tipo = Convert.ToInt32(rd["tipo"]);
                                    descripcion = (string)rd["descripcion"];
                                    ImprimeBase = Convert.ToBoolean(rd["imprimebase"]);
                                    original = Convert.ToDouble((decimal)rd["original"]);
                                    calculado = Math.Round(Convert.ToDouble((decimal)rd["calculado"]));

                                    if (tipo == 4 && (rd["item"].ToString() != "SCEMPRE" && rd["item"].ToString() != "SEGINV"))
                                    {
                                        //CREAMOS TITULO PARA LEYES SOCIALES
                                        if (cLeyes == 0)
                                            listado.Add(new Data() { Item = "LEGALES" });

                                        //DESCUENTOS LEGALES (LEYES SOCIALES)
                                        original = 0;
                                        valor = calculado.ToString("N0");

                                        if (rd["item"].ToString() == "PREVISI")
                                        {
                                            if (esSuspension)
                                            {
                                                cadAfp = fnSistema.PorcentajeAfp(Trabajador.Contrato, Trabajador.PeriodoPersona,(Trabajador.Regimen == 4 || Trabajador.Regimen == 3 || Trabajador.Regimen == 5) ? true : false, systimp, TopeAfpLiq, sysdiaslic, sysdiastr, sysporcadmafp, 0, true, true, sp13, sp14);
                                            }
                                            else
                                            {
                                                cadAfp = fnSistema.PorcentajeAfp(Trabajador.Contrato, Trabajador.PeriodoPersona,(Trabajador.Regimen == 4 || Trabajador.Regimen == 3 || Trabajador.Regimen == 5) ? true : false, systimp, TopeAfpLiq, sysdiaslic, sysdiastr, sysporcadmafp, 0, true);
                                            }
                                            descripcion = " " + fnSistema.PrimerMayuscula(cadAfp);
                                        }                                           
                                        if (rd["item"].ToString() == "IMPUEST" && calculado != 0)
                                            descripcion = " " + fnSistema.PrimerMayuscula(cadImpuesto);
                                        if (rd["item"].ToString() == "IMPUEST" && calculado == 0)
                                        { descripcion = " Exento de Impuesto"; valor = ""; }
                                        if (rd["item"].ToString() == "SALUD")
                                        {
                                            if (esSuspension)
                                            {
                                                CadenaSalud = fnSistema.GetCadenaSalud((bool)rd["porc"], (bool)rd["uf"], (bool)rd["pesos"], Convert.ToDouble(rd["original"]), Licencias, Convert.ToString(rd["Salud"]), Convert.ToInt32(rd["CodSalud"]), 0, sp13, sp14, true);
                                            }
                                            else
                                            {
                                                CadenaSalud = fnSistema.GetCadenaSalud((bool)rd["porc"], (bool)rd["uf"], (bool)rd["pesos"], Convert.ToDouble(rd["original"]), Licencias, Convert.ToString(rd["Salud"]), Convert.ToInt32(rd["CodSalud"]), 0);
                                            }
                                            descripcion = " " + fnSistema.PrimerMayuscula(CadenaSalud);
                                        }


                                        //HABERES IMPONIBLES
                                        //AGREGAMOS EL ITEM CON SUL VALOR CALCULADO
                                        if (rd["item"].ToString() == "SCEMPLE" && segCiEmpleado != 0)
                                        {
                                            if(sp13)
                                                listado.Add(new Data() { Item = "  " + fnSistema.PrimerMayuscula(descripcion) + " * Suspension Autoridad", Haber = valor, Vo = ImprimeBase == true ? ((decimal)rd["original"]).ToString("N2") : "" });
                                            else if(sp14)
                                                listado.Add(new Data() { Item = "  " + fnSistema.PrimerMayuscula(descripcion) + " * Suspension Pacto", Haber = valor, Vo = ImprimeBase == true ? ((decimal)rd["original"]).ToString("N2") : "" });
                                            else
                                                listado.Add(new Data() { Item = "  " + fnSistema.PrimerMayuscula(descripcion), Haber = valor, Vo = ImprimeBase == true ? ((decimal)rd["original"]).ToString("N2") : "" });
                                        }
                                        else if (rd["item"].ToString() == "IMPUEST")
                                            listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(descripcion), Haber = valor, Vo = ImprimeBase == true ? ((decimal)rd["original"]).ToString("N2") : "" });
                                        else if (calculado != 0)
                                            listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(descripcion), Haber = valor, Vo = ImprimeBase == true ? ((decimal)rd["original"]).ToString("N2") : "" });

                                        cLeyes++;
                                    }
                                    else if (tipo == 5)
                                    {
                                        //AGREGAR TITULO DESCUENTOS
                                        if (cDescuentos == 0)
                                            listado.Add(new Data() { Item = "OTROS" });

                                        if (calculado != 0)
                                        {
                                            //DESCUENTOS
                                            if ((string)rd["cuota"] != "0")
                                                cadCuotas = " " + fnSistema.PrimerMayuscula(descripcion) + " " + ItemTrabajador.GetCadenaCuota((string)rd["cuota"]);
                                            else
                                                cadCuotas = " " + fnSistema.PrimerMayuscula(descripcion);

                                            if (ImprimeBase)
                                                listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(cadCuotas), Haber = ((decimal)rd["calculado"]).ToString("N0"), Vo = ((decimal)rd["original"]).ToString("N2") });
                                            else
                                                listado.Add(new Data() { Item = " " + fnSistema.PrimerMayuscula(cadCuotas), Haber = ((decimal)rd["calculado"]).ToString("N0") });
                                        }

                                        cDescuentos++;
                                    }
                                    else if (tipo == 6)
                                    {

                                    }
                                }
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                    }
                }
                
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            XtraReport reporte = new ReportesExternos.rptSubDescuentosLiq();
            reporte.DataSource = listado;

            return reporte;
        }

        /// <summary>
        /// Parte del reporte final correspondiente a los aportes empresa.
        /// </summary>
        /// <returns></returns>
        public XtraReport SoloAportesAnteriores()
        {
            List<Data> listado = new List<Data>();

            //PARA SEGURO CENSATIA EMPRESA
            Data d1 = new Data();
            Data d2 = new Data();
            d1.Item = "";
            d2.Item = "";
            //PARA SEGURO DE INVALIDEZ
            Data invalidez = new Data();
            invalidez.Item = "";
            Data inv13 = new Data();
            inv13.Item = "";
            Data inv14 = new Data();
            inv14.Item = "";

            Data d3 = new Data();
            d3.Item = "";
            Data d4 = new Data();
            d4.Item = "";
            string sqlItem = "SELECT contrato, itemTrabajador.orden, itemTrabajador.coditem as item, " +
                         "valor as original, valorcalculado as calculado,  " +
                         "numitem, itemTrabajador.tipo, descripcion, splab13, splab14, " +
                         "(select syscicese FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes=itemtrabajador.anomes) as syscicese, " +
                         "(select sysfscese FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysfscese, " +
                         "(select syscicest FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as syscicest, " +
                        "(select sysdiaslic FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysdiaslic, " +
                        "(select sysvalsanna FROM calculomensual c WHERE c.contrato = itemtrabajador.contrato AND c.anomes = itemtrabajador.anomes) as sysvalsanna " +
                         "FROM itemtrabajador " +
                         "INNER JOIN item ON item.coditem = itemTrabajador.coditem " +
                         "WHERE contrato = @contrato AND anomes = @periodo AND imprime = 1 AND " +
                         "(itemtrabajador.tipo = 6 OR itemtrabajador.coditem = 'SEGINV' OR itemtrabajador.coditem = 'SCEMPRE') " +
                         " AND suspendido = 0 " +
                         "ORDER by tipo, orden ";

            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;

            int tipo = 0, cAportes = 0;
            double original = 0, calculado = 0, SegIndividualEmp = 0, SegFondoEmp = 0, sanna = 0;
            double syscicese = 0, sysfscese = 0, sysvalsanna = 0;
            string descripcion = "";
            bool sp13 = false, sp14 = false;
            int count = 0;

            //SEGURO DE INVALIDEZ CUENTA INDIVIDUAL EMPRESA
            //SegIndividualEmp = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "syscicese");

            //SEGURO DE INVALIDEZ FONDO SOLIDARIO EMPRESA
            //SegFondoEmp = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysfscese");

            //VALOR SANNA
            //sanna = Calculo.GetValueFromCalculoMensaul(Contrato, periodoEmpleado, "sysvalsanna");

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sqlItem, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@contrato", Contrato));
                            cmd.Parameters.Add(new SqlParameter("@periodo", periodoEmpleado));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                //RECORREMOS
                                while (rd.Read())
                                {
                                    count++;
                                    if (count == 1)
                                    {
                                        syscicese = rd["syscicese"] == DBNull.Value ? 0: Convert.ToDouble(rd["syscicese"]);
                                        sysfscese = rd["sysfscese"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysfscese"]);
                                        sysvalsanna = rd["sysvalsanna"] == DBNull.Value ? 0: Convert.ToDouble(rd["sysvalsanna"]);

                                        SegIndividualEmp = syscicese;
                                        SegFondoEmp = sysfscese;
                                        sanna = sysvalsanna;

                                    }


                                    sp13 = Convert.ToBoolean(rd["splab13"]);
                                    sp14 = Convert.ToBoolean(rd["splab14"]);

                                    //OBTENEMOS EL TIPO Y LA DESCRIPCION
                                    //datosItem = tipoItem((string)rd["item"]);
                                    tipo = Convert.ToInt32(rd["tipo"]);
                                    descripcion = (string)rd["descripcion"];

                                    original = Convert.ToDouble((decimal)rd["original"]);
                                    calculado = Math.Round(Convert.ToDouble((decimal)rd["calculado"]));
                                    if (tipo == 1)
                                    {
                                        //IMPONIBLES
                                    }
                                    else if (tipo == 2)
                                    {
                                        //NO IMPINIBLES
                                    }
                                    else if (tipo == 3)
                                    {
                                        //FAMILIARES
                                    }
                                    else if (tipo == 4 && (rd["item"].ToString() != "SCEMPRE" && rd["item"].ToString() != "SEGINV"))
                                    {
                                        //DECUENTOS LEGALES
                                    }
                                    else if (tipo == 5)
                                    {
                                        //DESCUENTOS
                                    }
                                    else if (tipo == 6)
                                    {
                                        //MUTUAL Y CAJA
                                        if (sp13)
                                        {
                                            listado.Add(new Data() { Item = fnSistema.PrimerMayuscula(descripcion.ToLower()) + " * Suspension Autoridad", Haber = calculado.ToString("N0") });
                                        }
                                        else if (sp14)
                                        {
                                            listado.Add(new Data() { Item = fnSistema.PrimerMayuscula(descripcion.ToLower()) + " * Suspension Pacto", Haber = calculado.ToString("N0") });
                                        }
                                        else
                                        {
                                            listado.Add(new Data() { Item = fnSistema.PrimerMayuscula(descripcion.ToLower()), Haber = calculado.ToString("N0") });
                                        }
                                                                                                 
                                    }
                                    else
                                    {
                                        if (rd["item"].ToString() == "SCEMPRE")
                                        {
                                            if (sp13 || sp14)
                                            {
                                                if (sp13)
                                                {
                                                    d3.Item = "Seguro Empresa * Suspension Autoridad";
                                                    d3.Haber = calculado.ToString("N0");
                                                }
                                                if (sp14)
                                                {
                                                    d4.Item = "Seguro Empresa * Suspension Pacto";
                                                    d4.Haber = calculado.ToString("N0");
                                                }
                                            }
                                            else
                                            {
                                                if (SegIndividualEmp != 0)
                                                    d1.Item = "Seg. Ces. Empresa Individual"; d1.Haber = SegIndividualEmp.ToString("N0");

                                                //d2.Item = fnSistema.PrimerMayuscula(descripcion); d2.Haber = SegFondoEmp.ToString("N0");
                                                d2.Item = "Seg. Ces. Empresa Solidario"; d2.Haber = SegFondoEmp.ToString("N0");
                                            }

                                        }
                                        if (rd["item"].ToString() == "SEGINV")
                                        {
                                            if (sp13 || sp14)
                                            {
                                                if (calculado != 0)
                                                {
                                                    if (sp13)
                                                    {
                                                        inv13.Item = "Invalidez  Suspension autoridad"; inv13.Haber = calculado.ToString("N0");
                                                    }
                                                    if (sp14)
                                                    {
                                                        inv14.Item = "Invalidez  Suspension pacto"; inv14.Haber = calculado.ToString("N0");
                                                    } 
                                                }
                                            }
                                            else
                                            {
                                                if (calculado != 0)
                                                {

                                                    invalidez.Item = fnSistema.PrimerMayuscula(descripcion); invalidez.Haber = calculado.ToString("N0");
                                                }
                                            }
                                           

                                        }

                                        cAportes++;
                                    }
                                }
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                    }
                }              
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            if (d1.Item != "")
                listado.Add(d1);
            if (d2.Item != "")
                listado.Add(d2);
            if (invalidez.Item != "")
                listado.Add(invalidez);
            if (inv13.Item != "")
                listado.Add(inv13);
            if (inv14.Item != "")
                listado.Add(inv14);
            if (d3.Item != "")
                listado.Add(d3);
            if (d4.Item != "")
                listado.Add(d4);

            XtraReport reporte = new ReportesExternos.rptSubAportesLiq();
            reporte.DataSource = listado;

            return reporte;
        }   

        /// <summary>
        /// Muestra el reporte en una ventana.
        /// </summary>
        /// <param name="report"></param>
        public void ShowDocument(XtraReport report)
        {            
            ReportPrintTool print = new ReportPrintTool(report);

            UserLookAndFeel lookAndFeel = new UserLookAndFeel(this);
            lookAndFeel.UseDefaultLookAndFeel = false;
            lookAndFeel.SkinName = "Office 2016 Black";
            ////print.Report.Watermark.Text = "TEST";

            ////LOS SIGUIENTES ELEMENTOS REPRESENTAN LOS BOTONES DEL FORMULARIO DE PREVISUALIZACION DE UN REPORTE
            ////NO LOS MOSTRAREMOS USANDO LA PROPIEDAD COMMANDVISIBILITY EN NONE (EQUIVALENTE A FALSE) 
            PrintingSystemCommand[] commands = new PrintingSystemCommand[] {
                PrintingSystemCommand.ClosePreview,
                PrintingSystemCommand.Find,
                PrintingSystemCommand.Save,
                PrintingSystemCommand.Open,
                PrintingSystemCommand.FillBackground,
                PrintingSystemCommand.SendFile,
                //PrintingSystemCommand.ExportFile,
                PrintingSystemCommand.Watermark
            };
            print.PrintingSystem.SetCommandVisibility(commands, DevExpress.XtraPrinting.CommandVisibility.None);

            //print.ShowPreviewDialog(lookAndFeel);
            print.ShowRibbonPreviewDialog(lookAndFeel);
        }

        /// <summary>
        /// Permite exportar a pdf un xtrareport.
        /// </summary>
        /// <param name="report">Reporte</param>
        /// <param name="pName">Corresponde a la ruta donde se desea guardar el archivo,</param>
        public void ExportToPdf(XtraReport report, string pName)
        {
            SaveFileDialog save = new SaveFileDialog();
            save.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            save.Filter = "PDF document(*.pdf)|*.pdf";
            save.FileName = pName;
            DialogResult dialogo = save.ShowDialog();
            if (dialogo == DialogResult.OK)
            {
                report.ExportToPdf(save.FileName);
                //XtraMessageBox.Show("Reporte guardado correctamente");

                if (File.Exists(save.FileName))
                {
                    XtraMessageBox.Show($"Archivo creado correctamente en {save.FileName}", "Documento Pdf", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    DialogResult Pregunta = XtraMessageBox.Show("¿Deseas ver el documento?", "Pregunta", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (Pregunta == DialogResult.Yes)
                        System.Diagnostics.Process.Start(save.FileName);
                }
            }
        }

        /// <summary>
        /// Genera un archivo comprimido a partir de un reporte.
        /// </summary>
        /// <param name="report">Objeto xtrareport.</param>
        /// <param name="psw">Contraseña en caso que se desee guardar archivo con contraseña.</param>
        /// <param name="pDocPath">Ruta del archivo.</param>
        /// <param name="Password">indica si se desea o no colocar contraseña al archivo.</param>
        public void ExportToZip(XtraReport report, string psw, string pDocPath, bool? Password = false)
        {
            EncryptionType encryption = EncryptionType.PkZip;

            //VENTANA SAVE
            SaveFileDialog save = new SaveFileDialog();
            save.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            save.Filter = "Zip File(*.zip)| *.zip;";
            //ENTREGA LA RUTA COMPLETA CONSIDERANDO EL NOMBRE DEL ARCHIVO.

            DialogResult dialogo = save.ShowDialog();
            if (dialogo == DialogResult.OK)
            {
                //NOMBRE DEL ARCHIVO CON EXTENSION SIN EL DIRECTORIO
                try
                {
                    using (ZipArchive archive = new ZipArchive())
                    {
                        if ((bool)Password)
                            archive.Password = psw;

                        archive.AddFile(pDocPath);
                        //RUTA DONDE SE GUARDARÁ EL ARCHIVO
                        archive.Save(save.FileName);
                    }

                    if (File.Exists(save.FileName))
                    {
                        XtraMessageBox.Show($"Archivo zip creado correctamente en {save.FileName}", "Archivo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        DialogResult Pregunta = XtraMessageBox.Show("¿Deseas ver el archivo?", "Pregunta", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                        if (Pregunta == DialogResult.Yes)
                            System.Diagnostics.Process.Start(save.FileName);
                    }
                }
                catch (Exception ex)
                {
                    //ERROR
                }              
            }
        }

        /// <summary>
        /// Genera un archivo zip con una lista de archivos.
        /// </summary>
        /// <param name="pFilesPath">Listado con todas las rutas de los archivos.</param>
        /// <param name="pPathZipFile">Ruta donde se generará el archivo final.</param>
        public void ExportToZipBackground(List<string> pFilesPath, string pPathZipFile)
        {
            if (pFilesPath.Count > 0 && pPathZipFile.Length > 0)
            {
                try
                {
                    using (ZipArchive Zip = new ZipArchive())
                    {
                        foreach (string File in pFilesPath)
                        {
                            //LO AGREGAMOS EN LA RAIZ DE ARCHIVO
                            Zip.AddFile(File, @"\");
                        }

                        Zip.Save(pPathZipFile);
                    }
                }
                catch (Exception ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }                
            }
        }

        /// <summary>
        /// Muestra ventana para impresion.
        /// </summary>
        /// <param name="report"></param>
        public void PrintDocument(XtraReport report)
        {
            try
            {
                using (ReportPrintTool printTool = new ReportPrintTool(report))
                {
                    //INVOKE THE PRINT DIALOG
                    //printTool.PrintDialog();

                    printTool.Print();
                }
            }
            catch (Exception ex)
            {
                //ERROR...
            }
        }

        //MOSTRAR DISEÑADOR
        public void ShowDesigner(XtraReport report)
        {
            ReportDesignTool designTool = new ReportDesignTool(report);

            UserLookAndFeel lookAndFeel = new UserLookAndFeel(this);
            lookAndFeel.UseDefaultLookAndFeel = false;
            lookAndFeel.SkinName = "Office 2016 Black";
            designTool.ShowDesignerDialog(lookAndFeel);
        }  

        /// <summary>
        /// Exporta un xtrareport a formato excel.
        /// </summary>
        /// <param name="report"></param>
        public void CreateExcelDocument(XtraReport report)
        {
            string ruta = @"c:\\TestExcel.xlsx";

            XlsxExportOptions options = report.ExportOptions.Xlsx;

            options.ShowGridLines = true;
            options.TextExportMode = TextExportMode.Value;
            options.ExportHyperlinks = true;
            options.SheetName = "Mi excel";

            report.ExportToXlsx(ruta);            
            OpenExcel(ruta);

        }

        /// <summary>
        /// Abre un archivo excel.
        /// </summary>
        /// <param name="ruta">Ruta del archivo.</param>
        private void OpenExcel(string ruta)
        {
            Process proceso = new Process();
            try
            {
                ProcessStartInfo process = new ProcessStartInfo();
                process.FileName = ruta;
                proceso.StartInfo = process;
                proceso.Start();
                proceso.WaitForInputIdle();

            }
            catch (Exception)
            {
                //error 
            }
        }

        /// <summary>
        /// Genera cadena a mostrar en item salud para la liquidacion.
        /// </summary>
        /// <returns></returns>
        private Hashtable SaludEmpleadoAnterior()
        {
            string sql = "select isapre.id as identificador, isapre.nombre as nombre from trabajador " +
                        "INNER JOIN isapre ON isapre.id = trabajador.salud " +
                        "WHERE contrato = @contrato AND anomes = @periodo";
            SqlCommand cmd;
            SqlDataReader rd;
            Hashtable data = new Hashtable();

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@contrato", Contrato));
                        cmd.Parameters.Add(new SqlParameter("@periodo", periodoEmpleado));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {

                                data.Add("code", Convert.ToInt32(rd["identificador"]));
                                data.Add("nombre", (string)rd["nombre"]);
                            }
                        }
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }



            return data;
        }

        #endregion

        #region "GENERACION CONTRATO TRABAJO"
        /// <summary>
        /// Genera un contrato de trabajador a partir de una plantilla word.
        /// </summary>
        /// <param name="pData">Dataset con informacion del trabajador y de las empresa.</param>
        /// <param name="pItems">Dataset con informacion de los items del trabajador.</param>
        /// <param name="pOptionalPath">Indica la ruta de salida del archivo.</param>
        /// <param name="DontShowPreview">Indica si se muestra o no en pantalla el documento word.</param>
        /// <param name="PathPantilla">Indica la ruta de la plantilla base.</param>
        public void GeneraContrato(DataSet pData, string pOptionalPath, bool? DontShowPreview = false, string PathPantilla = "")
        {
            //RUTA DEL ARCHIVO 
            string path = Application.StartupPath + @"\Documentos\contrato.doc";
            if (PathPantilla != "")
                path = PathPantilla;
            //NUEVO ARCHIVO CON CAMBIOS
            string Output = pOptionalPath;

            DataSet dsFinal = new DataSet();

            if (File.Exists(path) && pData != null)
            {
                try
                {
                    RichEditDocumentServer server = new RichEditDocumentServer();
                    //RichEditDocumentServer items = new RichEditDocumentServer();

                    //pData.Merge(pItems);
                    
                    //SETEAMOS DATASOURCE
                    server.Options.MailMerge.DataSource = pData.Tables[0];                 
                    server.Options.MailMerge.ViewMergedData = true;

                    //CARGAMOS DOCUMENTO
                    server.LoadDocument(path);

                    //REALIZAMOS CAMBIO DE VARIABLES
                    server.Document.MailMerge(Output, DocumentFormat.OpenXml);

                    //items.Options.MailMerge.DataSource = pItems.Tables[0];
                    //items.Options.MailMerge.ViewMergedData = true;
                    //items.LoadDocument(Output);
                    //items.Document.MailMerge(Output, DocumentFormat.OpenXml);

                    if (File.Exists(Output) && (bool)DontShowPreview == false)
                    {
                        System.Diagnostics.Process.Start(Output);
                    }
                   
                }
                catch (Exception ex)
                {
                    //ERROR...
                    
                }
             
            }

           
        }

        /// <summary>
        /// Genera a partir de un dataset un documento word que representa una carta de aviso de despido.
        /// </summary>
        /// <param name="pData">Dataset con informacion del trabajador.</param>
        /// <param name="pPlantilla">Ruta archivo plantilla base.</param>
        /// <param name="pSalida">Ruta donde se guardará el archivo.</param>
        public void GeneraCartaAviso(DataSet pData, string pPlantilla, string pSalida)
        {
            if (pData != null && File.Exists(pPlantilla))
            {
                try
                {
                    RichEditDocumentServer server = new RichEditDocumentServer();

                    //SETEAMOS DATASOURCE
                    server.Options.MailMerge.DataSource = pData.Tables[0];
                    server.Options.MailMerge.ViewMergedData = true;

                    //CARGAMOS DOCUMENTO
                    server.LoadDocument(pPlantilla);

                    //REALIZAMOS CAMBIO DE VARIABLES
                    server.Document.MailMerge(pSalida, DocumentFormat.OpenXml);              
                }
                catch (Exception ex)
                {
                    //ERROR...

                }
            }
        }


        #endregion
    }

    class Persona
    {
        //CLASE QUE REPRESENTA A UN TRABAJADOR

        #region "PROPIEDADES"
        /// <summary>
        /// Numero de contrato persona
        /// </summary>
        public string Contrato { get; set; }
        /// <summary>
        /// Periodo de la ficha
        /// </summary>
        public int PeriodoPersona { get; set; }
        /// <summary>
        /// Nombre completo, incluye apellidos y nombres.
        /// </summary>
        public string NombreCompleto { get; set; }
        /// <summary>
        /// Cargo persona en empresa
        /// </summary>
        public string Cargo { get; set; }
        /// <summary>
        /// Ciudad a la que pertenece la persona.
        /// </summary>
        public string ciudad { get; set; }
        /// <summary>
        /// Ruta persona
        /// </summary>
        public string Rut { get; set; }
        /// <summary>
        /// Direccion persona
        /// </summary>
        public string direccion { get; set; }
        /// <summary>
        /// Estado civil persona
        /// </summary>
        public string EstadoCivil { get; set; }
        /// <summary>
        /// Nacionalidad persona.
        /// </summary>
        public string Nacionalidad { get; set; }
        /// <summary>
        /// Codigo nacion.
        /// </summary>
        public int codNacion { get; set; }
        /// <summary>
        /// Fecha de nacimiento
        /// </summary>
        public DateTime Nacimiento { get; set; }
        /// <summary>
        /// Sexo persona.
        /// </summary>
        public int Sexo { get; set; }
        /// <summary>
        /// Numero de pasaporte
        /// </summary>
        public string Pasaporte { get; set; }
        /// <summary>
        /// Estado 
        /// <para>0--> Inactivo</para>
        /// <para>1--> Activo</para>
        /// </summary>
        public int Status { get; set; }
        /// <summary>
        /// Nombre persona.
        /// </summary>
        public string Nombre { get; set; }
        /// <summary>
        /// Apellido paterno
        /// </summary>
        public string Apepaterno { get; set; }
        /// <summary>
        /// Apellido materno
        /// </summary>
        public string Apematerno { get; set; }
        /// <summary>
        /// Codigo sucursal a la que pertenece la persona
        /// </summary>
        public int codSucursal { get; set; }
        /// <summary>
        /// Codigo area empresa asociada a la persona
        /// </summary>
        public int codArea { get; set; }
        /// <summary>
        /// Nombre area del trabajador.
        /// </summary>
        public string NombreArea { get; set; }
        /// <summary>
        /// Centro de costo
        /// </summary>
        public int codCosto { get; set; }
        /// <summary>
        /// Telefono persona.
        /// </summary>
        public string Telefono { get; set; }
        /// <summary>
        /// Fecha de inicio de contrato
        /// </summary>
        public DateTime Ingreso { get; set; }
        /// <summary>
        /// Fecha de termino de contrato
        /// </summary>
        public DateTime Salida { get; set; }
        /// <summary>
        /// Tipo de contrato
        /// </summary>
        public int Tipocontrato { get; set; }
        /// <summary>
        /// Tipo de regimen salarial
        /// <para>Variable</para>
        /// <para>Fijo</para>
        /// </summary>
        public int RegimenSalario { get; set; }
        /// <summary>
        /// Indica si la persona es jubilada o no
        /// </summary>
        public Int16 Jubilado { get; set; }
        /// <summary>
        /// Tipo de regimen que tiene la persona 
        /// Afp y Salud, Solo Afp, Solo Salud ...
        /// </summary>
        public int Regimen { get; set; }
        /// <summary>
        /// Codigo Afp
        /// </summary>
        public int codAfp { get; set; }
        /// <summary>
        /// Nombre afp.
        /// </summary>
        public string NombreAfp { get; set; }
        /// <summary>
        /// Codigo de salud a la que está asociada la persona. 
        /// </summary>
        public int codSalud { get; set; }
        /// <summary>
        /// Nombre entidad de salud.
        /// </summary>
        public string NombreSalud { get; set; }
        /// <summary>
        /// Codigo caja de prevision si aplica. 
        /// </summary>
        public int codCajaPrev { get; set; }
        /// <summary>
        /// Nombre entidad caja de prevision.
        /// </summary>
        public string NombreCajaPrev { get; set; }
        /// <summary>
        /// Fecha desde la que se empieza a considerar el calculo del seguro de cesantía.
        /// </summary>
        public DateTime FechaSeguroCes { get; set; }
        /// <summary>
        /// Tramo al que pertenece la persona. Para cargas familiares
        /// </summary>
        public int Tramo { get; set; }
        /// <summary>
        /// Codigo correspondiente a la forma de pago de remuneracion
        /// </summary>
        public int codFormaPago { get; set; }
        /// <summary>
        /// Descripcion forma de pago.
        /// </summary>
        public string NombreFormaPago { get; set; }
        /// <summary>
        /// Codigo de banco asociado
        /// </summary>
        public int codBanco { get; set; }
        /// <summary>
        /// Nombre entidad bancaria asociada al trabajador.
        /// </summary>
        public string NombreBanco { get; set; }
        /// <summary>
        /// Numero de cuenta bancaria
        /// </summary>
        public string NumCuenta { get; set; }
        /// <summary>
        /// Fecha de vacaciones
        /// </summary>
        public DateTime FechaVacacion { get; set; }
        /// <summary>
        /// Fecha inicio desde la cual se consideran los feriados progresivos
        /// </summary>
        public DateTime FechaProgresivo { get; set; }
        /// <summary>
        /// Cantidad de años progresivos. Esto en el caso de que tengan feriados desde otra empresa
        /// </summary>
        public double AnosProgresivos { get; set; }
        /// <summary>
        /// Se refiere si es cuenta vista, corriente, etc.
        /// </summary>
        public int Tipocuenta { get; set; }
        /// <summary>
        /// Nombre tipo de cuenta.
        /// </summary>
        public string NombreTipoCuenta { get; set; }
        /// <summary>
        /// Codigo de clase de remuneracion que tiene asociada la persona.
        /// </summary>
        public int codClase { get; set; }
        /// <summary>
        /// Codigo causal de termino de contrato.
        /// </summary>
        public int codCausal { get; set; }
        /// <summary>
        /// Descripcion causal de termino
        /// </summary>
        public string DescripcionCausal { get; set; }
        /// <summary>
        /// Artículo en el cual se basa la causal de termino de contrato.
        /// </summary>
        public string ArticuloCausal { get; set; }
        /// <summary>
        /// Numero de fun para las personas que tienen isapre
        /// </summary>
        public string Fun { get; set; }
        /// <summary>
        /// Codigo de ciudad en la cual vive la persona
        /// </summary>
        public int codCiudad { get; set; }
        /// <summary>
        /// Codigo del cargo al que pertenece la persona.
        /// </summary>
        public int codCargo { get; set; }
        /// <summary>
        /// Edad de la persona
        /// </summary>
        public int Edad { get; set; }
        /// <summary>
        /// Email de la persona
        /// </summary>
        public string Email { get; set; }
        /// <summary>
        /// Nos indica si la ficha de la persona tiene caracter de privado.
        /// </summary>
        public bool privado { get; set; }
        /// <summary>
        /// Muestra nombre completo del trabajador empezando por sus apellidos.
        /// </summary>
        public string ApellidoNombre { get; set; }
        /// <summary>
        /// Retorna nombre del centro costo asociado a la persona.
        /// </summary>
        public string centro { get; set; }
        /// <summary>
        /// Retorna el nombre de la sucursal en la que trabaja la persona
        /// </summary>
        public string sucursal { get; set; }
        /// <summary>
        /// Nivel de estudios del trabajador.
        /// </summary>
        public string Escolaridad { get; set; }
        /// <summary>
        /// Numero en caso de emergencia.
        /// </summary>
        public string FonoEmergencia { get; set; }
        /// <summary>
        /// Nombre persona contacto en caso de emergencia.
        /// </summary>
        public string NombreEmergencia { get; set; }
        /// <summary>
        /// Talla ropa.
        /// </summary>
        public string Talla { get; set; }
        /// <summary>
        /// Numero de calzado.
        /// </summary>
        public string Calzado { get; set; }
        /// <summary>
        /// Horario de trabajador.
        /// </summary>
        public string Horario { get; set; }
        /// <summary>
        /// jornada laboral
        /// <para>1--> Lunes-Viernes</para>
        /// <para>2--> Lunes-Sábado</para>
        /// <para>3--> Turnos</para>
        /// </summary>
        public int Jornada { get; set; }
        /// <summary>
        /// Codigo sindicato asociado.
        /// </summary>
        public int CodSindicato { get; set; }
        /// <summary>
        /// nombre sindicato asociado.
        /// </summary>
        public string NombreSindicato { get; set; }

        /// <summary>
        /// Indica si tiene suspension laboral
        /// </summary>
        public int Suslab { get; set; }

        #endregion

        //CONSTRUCTOR SIN PARAMETROS
        public Persona()
        {
            /*---*/
        }

        /// <summary>
        /// Constructor clase
        /// </summary>
        /// <param name="contrato">Numero de contrato asociado a persona</param>
        /// <param name="periodo">Periodo ficha asociado a persona</param>
        public Persona(string contrato, int periodo)
        {
            this.Contrato = contrato;
            this.PeriodoPersona = periodo;
        }

        //OBTENER EL REGIMEN PERSONA
        /*
         * 1 --> AFP-SALUD
         * 2 --> SOLO SALUD
         * 3 --> SOLO CAJA
         * 4 --> R.A (REGIMEN ANTIGUO) - SALUD
         * 5 --> R.A (REGIMEN ANTIGUO) - SOLO SALUD
         * 6 --> NO APLICA
         */
         /// <summary>
         /// Retorna el codigo del tipo de regimen que tiene la persona (Regimen previsional)
         /// </summary>
         /// <param name="pContrato">Numero de contrato asociado a persona</param>
         /// <param name="pPeriodo">Periodo que se desea consultar</param>
         /// <returns></returns>
        public static int GetRegimen(string pContrato, int pPeriodo)
        {
            string sql = "SELECT regimen FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            int regimen = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        regimen = Convert.ToInt32(cmd.ExecuteScalar());

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return regimen;
        }

        //PERSONA JUBILADA
        /*
         * 0 --> NO
         * 1 --> Si, No Cotiza
         * 2 --> Si, Cotiza
         */
         /// <summary>
         /// Nos indica a través de un código si la persona es jubilada o no.
         /// </summary>
         /// <param name="pContrato">Numero de contrato asociado a la persona</param>
         /// <param name="pPeriodo">Periodo que se desea consultar</param>
         /// <returns></returns>
        public static int GetJubilado(string pContrato, int pPeriodo)
        {
            int jubilado = 0;
            string sql = "SELECT jubilado FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        jubilado = Convert.ToInt32(cmd.ExecuteScalar());

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return jubilado;
        }

        /// <summary>
        /// Nos entrega el nombre completo de la persona
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado a la persona</param>
        /// <param name="pPeriodo">Periodo de la ficha que se desea consultar</param>
        /// <returns></returns>
        public static string GetNombreCompleto(string pContrato, int pPeriodo)
        {
            string sql = "SELECT CONCAT(nombre, ' ', apepaterno, ' ', apematerno) as nombre FROM " +
                "trabajador WHERE contrato=@pContrato AND anomes =@pPeriodo";
            string nombre = "";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        nombre = (string)cmd.ExecuteScalar();                       

                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return nombre;
        }

        /// <summary>
        /// Retorna el rut de la persona.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado a persona</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar</param>
        /// <returns></returns>
        public static string GetRutPersona(string pContrato, int pPeriodo)
        {
            string rut = "";
            string sql = "SELECT rut FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        rut = (string)cmd.ExecuteScalar();
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return rut;
        }

        /// <summary>
        /// Retorna el nombre de la ciudad en la que vive la persona.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado a persona</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar</param>
        /// <returns></returns>
        public static string GetCiudad(string pContrato, int pPeriodo)
        {
            string ciudad = "";
            string sql = "select ciudad.descCiudad FROM trabajador " +
                         "INNER JOIN ciudad ON ciudad.idCiudad = trabajador.ciudad " + 
                         " WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        ciudad = (string)cmd.ExecuteScalar();
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return ciudad;
        }

        /// <summary>
        /// Retorna el nombre de la sucursal en la que trabaja la persona
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado a persona</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar</param>
        /// <returns></returns>
        public static string GetSucursal(string pContrato, int pPeriodo)
        {
            string sucursal = "";
            string sql = "SELECT sucursal.descSucursal FROM trabajador " +
                         "INNER JOIN sucursal ON sucursal.codSucursal = trabajador.sucursal " +
                         "where contrato = @pContrato AND anomes = @pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        sucursal = (string)cmd.ExecuteScalar();
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return sucursal;
        }

        /// <summary>
        /// Retorna nombre del centro costo asociado a la persona.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado a la persona</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar</param>
        /// <returns></returns>
        public static string GetCentroCosto(string pContrato, int pPeriodo)
        {
            string centro = "";
            string sql = "SELECT ccosto.nombre FROM trabajador " +
                         "INNER JOIN ccosto ON ccosto.id = trabajador.ccosto " +
                        "where contrato = @pContrato AND anomes = @pPeriodo ";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        centro = (string)cmd.ExecuteScalar();
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return centro;
        }

        /// <summary>
        /// Retorna el cargo que tiene la persona en la empresa.
        /// Devuelve un objeto de tipo cargo con todas las propiedades.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado a la persona</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar</param>
        /// <returns></returns>
        public static Cargo GetCargo(string pContrato, int pPeriodo)
        {
            Cargo c = new Cargo();
            string sql = "SELECT id, cargo.nombre as nombre, dato01, dato02 FROM trabajador " +
                         "INNER JOIN cargo ON cargo.id = trabajador.cargo WHERE " +
                         "contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlDataReader rd;            
            
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pPeriodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                c.id = Convert.ToInt32(rd["id"]);
                                c.nombre = (string)rd["nombre"];
                                c.dato01 = (string)rd["dato01"];
                                c.dato02 = (string)rd["dato02"];                                
                            }
                        }
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return c;
        }

        //TIPO CONTRATO
        /*
         * 0 --> INDEFINIDO
         * 1 --> PLAZO FIJO
         * 2 --> FAENA
         */
         /// <summary>
         /// Retorna el tipo de contrato que tiene la persona.
         /// </summary>
         /// <param name="pContrato">Numero de contrato asociado a persona.</param>
         /// <param name="pPeriodo">Periodo ficha que se desea consultar.</param>
         /// <returns></returns>
        public static int GetTipoContrato(string pContrato, int pPeriodo)
        {
            int tipo = 0;
            string sql = "SELECT tipocontrato FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            item t = new item();
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARMAETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        object data = cmd.ExecuteScalar();
                        if (data != DBNull.Value)
                        {
                            tipo = Convert.ToInt32(data);
                        }
                        
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return tipo;
        }

        /// <summary>
        /// Obtiene el codigo de la afp asociada a la persona
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado a persona</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar</param>
        /// <returns></returns>
        public static int GetCodigoAfp(string pContrato, int pPeriodo)
        {
            string sql = "SELECT afp FROM trabajador WHERE contrato = @pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            int code = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        code = Convert.ToInt32(cmd.ExecuteScalar());
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }            

            return code;
        }

        /// <summary>
        /// Retorna informacion referente a la afp que tiene la persona
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar</param>
        /// <returns></returns>
        public static AseguradoraFondoPension GetAfp(string pContrato, int pPeriodo)
        {
            AseguradoraFondoPension aseguradora = new AseguradoraFondoPension();
            string sql = "SELECT id, afp.nombre as nombre, dato01, dato02, porcFondo, porcAdmin, " +
                        "afp.rut, porcOtro, claveExp " +
                        "FROM trabajador INNER JOIN afp ON afp.id = trabajador.afp " +
                        "WHERE contrato = @pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //GUARDAMOS DATOS EN OBJETO
                                aseguradora.id = Convert.ToInt32(rd["id"]);
                                aseguradora.nombre = (string)rd["nombre"];
                                aseguradora.rut = (string)rd["rut"];
                                aseguradora.porcFondo = Convert.ToDouble(rd["porcFondo"]);
                                aseguradora.porcOtro = Convert.ToDouble(rd["porcOtro"]);
                                aseguradora.porcAdmin = Convert.ToDouble(rd["porcAdmin"]);
                                aseguradora.dato01 = (string)rd["dato01"];
                                aseguradora.dato02 = (string)rd["dato02"];
                                aseguradora.claveExp = (string)rd["claveExp"];
                            }
                        }

                        cmd.Dispose();
                        rd.Close();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return aseguradora;
        }

        /// <summary>
        /// Retorna informacion referente al sistema de salud que tiene la persona
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar</param>
        /// <returns></returns>
        public static Isapre GetSalud(string pContrato, int pPeriodo)
        {
            Isapre isa = new Isapre();
            string sql = "SELECT id, isapre.nombre, dato01, dato02, isapre.rut FROM trabajador " +
                         "INNER JOIN isapre ON isapre.id = trabajador.salud WHERE " +
                         "contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //GUARDAMOS DATOS EN OBJETO
                                isa.id = Convert.ToInt32(rd["id"]);
                                isa.nombre = (string)rd["nombre"];
                                isa.rut = (string)rd["rut"];
                                isa.dato01 = (string)rd["dato01"];
                                isa.dato02 = (string)rd["dato02"];                                
                            }
                        }
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return isa;
        }

        /// <summary>
        /// Retorna informacion referente al area a la cual pertenece la persona.
        /// </summary>
        /// <param name="pContrato">NUmero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar.</param>
        /// <returns></returns>
        public static Area GetArea(string pContrato, int pPeriodo)
        {
            string sql = "SELECT id, area.nombre as nombre, dato01, dato02 FROM trabajador " +
                        "INNER JOIN area ON area.id = trabajador.area WHERE " +
                        "contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlDataReader rd;
            Area ar = new Area();
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS OBJETO
                                ar.id = Convert.ToInt32(rd["id"]);
                                ar.nombre = (string)rd["nombre"];
                                ar.dato01 = (string)rd["dato01"];
                                ar.dato02 = (string)rd["dato02"];
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return ar;
        }

        /// <summary>
        /// Nos indica si el trabajador tiene items en el mes evaluado.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar.</param>
        /// <returns></returns>
        public static bool TieneItems(string pContrato, int pPeriodo)
        {
            bool tiene = false;
            string sql = "SELECT count(*) FROM itemtrabajador " +
                         "WHERE anomes=@pPeriodo AND contrato=@pContrato";
            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                                tiene = true;

                            cmd.Dispose();
                        }
                    }                   
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return tiene;
        }        

        /// <summary>
        /// Nos indica si un item está siendo usado por un trabajador.
        /// </summary>
        /// <param name="pItem">Codigo de item</param>
        /// <returns></returns>
        public static bool ItemUsado(string pItem)
        {
            string sql = "SELECT count(*) FROM itemtrabajador WHERE coditem=@pItem";
            SqlCommand cmd;
            bool usado = false;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETRO                                  
                        cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                        //cmd.Parameters.Add(new SqlParameter("@pPeriodo", Calculo.PeriodoObservado));

                        if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                            usado = true;
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return usado;
        }

        /// <summary>
        /// Nos indica si existe un contrato para un periodo determinado
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="pPeriodo">Periodo que se desea consultar</param>
        /// <returns></returns>
        public static bool ExisteContrato(string pContrato, int pPeriodo)
        {
            bool existe = false;
            string sql = "SELECT count(*) FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                                existe = true;
                        }
                        cmd.Dispose();
                    }
                }               
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existe;
        }

        /// <summary>
        /// Retorna la edad del trabajador de acuerdo a su fecha de nacimiento.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo que se desea consultar.</param>
        /// <returns></returns>
        public static int GetEdad(string pContrato, int pPeriodo)
        {
            string sql = "SELECT fechanac FROM trabajador WHERE anomes=@pPeriodo AND contrato=@pContrato";
            int edad = 0;
            DateTime hoy = DateTime.Now.Date;
            DateTime Naci = DateTime.Now.Date;

            SqlCommand cmd;
      
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETRO
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        Naci = (DateTime)cmd.ExecuteScalar();
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();                        
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            //CALCULAMOS EDAD
            edad = hoy.Year - Naci.Year;

            return edad;
        }

        /// <summary>
        /// Retorna la edad de una persona.
        /// </summary>
        /// <param name="pNac"></param>
        /// <returns></returns>
        public static int GetEdadFromNac(DateTime pNac)
        {
            int edad = 0;
            DateTime hoy = DateTime.Now.Date;
            edad = hoy.Year - pNac.Year;
            return edad;
        }

        /// <summary>
        /// Nos indica a través del rut de una persona si tiene informacion histórica asociada.
        /// </summary>
        /// <param name="pRut">Rut persona</param>
        /// <param name="pPeriodo">Periodo ficha que se desea consultar</param>
        /// <returns></returns>
        public static bool TieneHistorico(string pRut, int pPeriodo)
        {
            string sql = "SELECT count(*) FROM trabajador WHERE rut=@pRut AND anomes<@pPeriodo";
            SqlCommand cmd;
            SqlConnection cn;
            bool tiene = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pRut", pRut));

                            if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                                tiene = true;

                            cmd.Dispose();                           
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return tiene;
        }

        /// <summary>
        /// Indica si un contrato en particular para un rut en particular, tiene historico
        /// </summary>
        /// <param name="pRut">Rtu trabajador</param>
        /// <param name="pContrato">Numero de contrato que se desea verificar</param>
        /// <param name="pPeriodo">Mes tope (Se buscan los meses anteriores a este)</param>
        /// <returns></returns>
        public static bool TieneHistoricoContrato(string pRut, string pContrato, int pPeriodo)
        {
            bool Primero = false, correcto = false;

            string sql = "SELECT count(*) FROM trabajador WHERE rut=@pRut AND contrato=@pContrato AND anomes<@pPeriodo";
            string ItemTrab = "Delete from itemtrabajador where rut=@pRut AND contrato=@pContrato AND anomes=@pPeriodo";
            string LiqHist = "DELETE from liquidacionhistorico WHERE contrato = @pContrato AND anomes=@pPeriodo";
            string CalMes = "DELETE FROM calculomensual WHERE contrato=@pContrato AND anomes=@pPeriodo";
            string SqlTrab = "DELETE FROM trabajador WHERE contrato=@pContrato AND rut=@pRut AND anomes=@pPeriodo";
            string Aus = "DELETE FROM ausentismo WHERE contrato=@pContrato";

            SqlCommand cmd;
            SqlConnection cn;
            SqlTransaction tr;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        tr = cn.BeginTransaction();

                        try
                        {
                            //Encontrar registros anteriores al periodo para el contrato seleccionado para un rut específico...
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                                cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                                cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                                cmd.Transaction = tr;

                                if (Convert.ToInt32(cmd.ExecuteScalar()) == 0)
                                    Primero = true;                                

                                cmd.Dispose();
                            }

                            //Es el primer contrato...
                            if (Primero)
                            {
                                //Eliminamos desde calculomensual
                                using (cmd = new SqlCommand(CalMes, cn))
                                {
                                    cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                                    cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                                    cmd.Transaction = tr;
                                    cmd.ExecuteNonQuery();
                                }

                                //Eliminamos desde liquidacion historica
                                using (cmd = new SqlCommand(LiqHist, cn))
                                {
                                    cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                                    cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                                    cmd.Transaction = tr;
                                    cmd.ExecuteNonQuery();
                                }

                                //Eliminamos desde itemtrabajador
                                using (cmd = new SqlCommand(ItemTrab, cn))
                                {
                                    cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                                    cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                                    cmd.Parameters.Add(new SqlParameter("@pRut", pRut));

                                    cmd.Transaction = tr;
                                    cmd.ExecuteNonQuery();
                                }

                                //Eliminamos desde trabajador
                                using (cmd = new SqlCommand(SqlTrab, cn))
                                {
                                    cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                                    cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                                    cmd.Parameters.Add(new SqlParameter("@pRut", pRut));

                                    cmd.Transaction = tr;
                                    cmd.ExecuteNonQuery();
                                }

                                //Hacemos commit
                                tr.Commit();
                                correcto = true;
                            }
                        }
                        catch (Exception ex)
                        {
                            tr.Rollback();
                            correcto = false;
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
               //Error...
                correcto = false;
            }

            return correcto;

        }

        /// <summary>
        /// Indica si es el numero de contrato es el primero que tiene para ese rut (Puede tener otros)
        /// </summary>
        /// <returns></returns>
        public static bool PrimerContratoRut(string pRut, string pContrato, int pPeriodo)
        {
            string sql = "SELECT count(*) FROM trabajador WHERE rut=@pRut AND contrato=@pContrato AND anomes<@pPeriodo";
            bool tiene = false;
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            if (Convert.ToInt32(cmd.ExecuteScalar()) == 0)
                                tiene = true;

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                tiene = false;
            }

            return tiene;
        }

        /// <summary>
        /// Nos indica si en un periodo determinado existen registros
        /// </summary>
        /// <param name="pPeriodo">Periodo a consultar.</param>
        /// <returns></returns>
        public static bool ExistenRegistros(int pPeriodo)
        {
            bool existen = false;
            string Filter = "", sql = "";
            Filter = User.GetUserFilter();
            bool ShowPrivados = User.ShowPrivadas();
            if (Filter == "0")
                sql = $"SELECT count(*) FROM trabajador WHERE anomes=@pPeriodo {(ShowPrivados == false? " AND privado=0":"")}";
            else
            {
                sql = $"SELECT count(*) FROM trabajador WHERE anomes=@pPeriodo AND {Conjunto.GetCondicionFromCode(Filter)} {(ShowPrivados == false? " AND privado=0" : "")}";
            }
                
            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                                existen = true;

                            cmd.Dispose();                         
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existen;
        }
        /// <summary>
        /// Nos indica si el trabajador tiene ausentismos en un determinado periodo.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo que se desea consultar. </param>
        /// <returns></returns>
        public static bool TieneAusentismos(string pContrato, int pPeriodo)
        {
            bool tiene = false;
            string sql = "SELECT sysdiastr FROM calculomensual WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            double dias = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        dias = Convert.ToDouble(cmd.ExecuteScalar());
                        if (dias < 30)
                            tiene = true;                            
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();                    
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return tiene;

        }

        /// <summary>
        /// Retorna el total imponible para un determinado periodo.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo que se desea consultar.</param>
        /// <returns></returns>
        public static double GetImponiblePeriodo(string pContrato, int pPeriodo)
        {
            double imp = 0;
            string sql = "SELECT SUM(systimp) FROM calculomensual WHERE anomes=@pPeriodo AND contrato=@pContrato";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        imp = Convert.ToDouble(cmd.ExecuteScalar());

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return imp;
        }

        //VERIFICAR SI CONTRATO EXISTE EN PERIODO ANTERIOR
        public static bool PrimerContrato(string pContrato, int periodo)
        {
            bool tiene = true;
            string sql = "SELECT count(*) FROM trabajador WHERE contrato=@pContrato AND anomes<@pPeriodo";
            SqlCommand cmd;
            int count = 0;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));

                        count = Convert.ToInt32(cmd.ExecuteScalar());
                        if (count > 0)
                            tiene = false;
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return tiene;
        }

        /// <summary>
        /// Retorna el rut de la persona de acuerdo a su numero de contrato asociado.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo que se desea evaluar.</param>
        /// <returns></returns>
        public static string GetRutFromContrato(string pContrato, int pPeriodo)
        {
            string rut = "";
            string sql = "SELECT rut FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        rut = (string)cmd.ExecuteScalar();

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();                        
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
                 

            return rut;
        }

        /// <summary>
        /// Indica si una persona tiene mas de un contrato en un periodo determinado
        /// </summary>
        /// <param name="pRut">Rut persona.</param>
        /// <param name="pPeriodo">Periodo que se desea consultar.</param>
        /// <returns></returns>
        public static bool TieneMasContratos(string pRut, int pPeriodo)
        {
            bool tiene = false;
            string sql = "SELECT count(*) FROM trabajador WHERE anomes=@pPeriodo AND rut=@pRut";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        if (Convert.ToInt32(cmd.ExecuteScalar()) > 1)
                            tiene = true;

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return tiene;
        }

        /// <summary>
        /// Retorna una lista con todos los contratos asociados a una persona en un determinado periodo.
        /// </summary>
        /// <param name="pRut">Rut de la persona.</param>
        /// <param name="pPeriodo">Periodo que se desea consultar.</param>
        /// <returns></returns>
        public static List<string> GetContratos(string pRut, int pPeriodo)
        {
            List<string> Contratos = new List<string>();
            string sql = "SELECT contrato FROM trabajador WHERE anomes=@pPeriodo AND rut=@pRut ORDER BY ingreso";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //AGREGAMOS A LISTADO
                                Contratos.Add((string)rd["contrato"]);
                            }
                        }

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return Contratos;
        }

        /// <summary>
        /// Retorna la fecha de termino de contrato de la persona.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo que se desea consultar.</param>
        /// <returns></returns>
        public static DateTime GetFechaTermino(string pContrato, int pPeriodo)
        {
            DateTime termino = DateTime.Now.Date;
            string sql = "SELECT salida FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        termino = Convert.ToDateTime(cmd.ExecuteScalar());
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return termino;
        }

        /// <summary>
        /// Retorna la fecha de inicio de contrato de una persona.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo que se desea evaluar.</param>
        /// <returns></returns>
        public static DateTime GetFechaInicio(string pContrato, int pPeriodo)
        {
            DateTime Inicio = DateTime.Now.Date;
            string sql = "SELECT ingreso FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        Inicio = Convert.ToDateTime(cmd.ExecuteScalar());
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return Inicio;
        }

        /// <summary>
        /// Retorna la cantidad de dias que lleva una persona en la empresa.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo ficha a consultar.</param>
        /// <returns></returns>
        public static DateTime GetYearEmpresa(string pContrato, int pPeriodo)
        {
            DateTime inicio = DateTime.Now.Date;
            DateTime termino = DateTime.Now.Date;
            int year = 0;

            inicio = GetFechaInicio(pContrato, pPeriodo);
            termino = inicio.AddYears(10);

            return termino;
        }

        /// <summary>
        /// Retorna un objeto de tipo persona con toda la informacion referente a la persona
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo que se desea consultar.</param>
        /// <returns></returns>
        public static Persona GetInfo(string pContrato, int pPeriodo)
        {
            Persona per = new Persona();
            string sql = "SELECT contrato, anomes, trabajador.rut, CONCAT(trabajador.nombre, ' ', apepaterno, ' ', apematerno) as nombre, fechanac," +                         
                         " cargo.nombre as cargo, ciudad.descCiudad as ciudad, direccion, ecivil.nombre as ecivil, nacion.nombre as nacionalidad, sexo, " +
                         " pasaporte, status, trabajador.nombre as NombreTrabajador, apepaterno, apematerno, " +
                         " ciudad as codciudad, sucursal as codSucursal, sucursal.descSucursal as nombreSucursal, area as codArea, ccosto, ccosto.nombre as centro, telefono, " +
						 " ingreso, salida, cargo as codCargo, tipocontrato, regimensalario, jubilado, regimen, " +
						 " afp, salud, cajaPrevision, fechaSegCes, tramo, formapago as codFormaPago, banco as codBanco, " +
						 " cuenta, fechavacacion, fechaprogresivo, tipocuenta, clase, fun, causal, privado, mail, nacion, " +
                         " CONCAT(apepaterno, ' ', apematerno, ' ', trabajador.nombre) as ApellidoNombre, " +
                         " escolaridad.descesc as esco, numemer, nomemer, talla, calzado, area.nombre as area," +
                         " afp.nombre as NombreAfp, isapre.nombre as NombreSalud, cajaprevision.nombre as NombreCajaPrevision, " +
                         " formapago.nombre as NombrePago, banco.nombre as NombreBanco, tipocuenta.nombre as NombreTipoCuenta," +
                         " causaltermino.descCausal as ArtCausal, causaltermino.justificacion as DescripCausal, " +
                         " horario.deschor as horario, anosprogresivo, jornada, sindicato.id as codSin, " +
                         " sindicato.descSin, suslab " +
                         "FROM trabajador " +
                         "INNER JOIN cargo ON cargo.id = trabajador.cargo " +
                         "INNER JOIN ccosto ON trabajador.ccosto = ccosto.id " +
                         "INNER JOIN sucursal ON trabajador.sucursal = sucursal.codSucursal " +
                         "INNER JOIN ciudad On ciudad.idCiudad = trabajador.ciudad " +
                         "INNER JOIN ecivil ON ecivil.id = trabajador.ecivil " +
                         "INNER JOIN nacion ON nacion.id = trabajador.nacion " +
                         "INNER JOIN escolaridad ON escolaridad.codesc = trabajador.esco " + 
                         "INNER JOIN area ON area.id = trabajador.area " +
                         "INNER JOIN afp On afp.id = trabajador.afp " +
                         "INNER JOIN isapre ON isapre.id = trabajador.salud " + 
                         "INNER JOIN cajaprevision On cajaprevision.id = trabajador.cajaprevision " +
                         "INNER JOIN formapago ON formapago.id = trabajador.formapago " + 
                         "INNER JOIN banco On banco.id = trabajador.banco " +
                         "INNER JOIN tipocuenta On tipocuenta.id = trabajador.tipocuenta " +
                         "INNER JOIN causaltermino On causaltermino.codcausal = trabajador.causal " +
                         "INNER JOIN horario On horario.id = trabajador.horario " + 
                         "INNER JOIN sindicato ON sindicato.id = trabajador.sindicato " +
                         "WHERE contrato=@pContrato AND anomes=@pPeriodo";

            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;
            
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    per.Cargo = (string)rd["cargo"];
                                    per.ciudad = (string)rd["ciudad"];
                                    per.Contrato = (string)rd["contrato"];
                                    per.direccion = (string)rd["direccion"];
                                    per.EstadoCivil = (string)rd["ecivil"];
                                    per.Nacimiento = Convert.ToDateTime(rd["fechanac"]);
                                    per.Nacionalidad = (string)rd["nacionalidad"];
                                    per.NombreCompleto = (string)rd["nombre"];
                                    per.PeriodoPersona = Convert.ToInt32(rd["anomes"]);
                                    per.Rut = (string)rd["rut"];
                                    per.Sexo = Convert.ToInt32(rd["sexo"]);
                                    per.Pasaporte = (string)rd["pasaporte"];
                                    per.Status = Convert.ToInt32(rd["status"]);
                                    per.Nombre = (string)rd["NombreTrabajador"];
                                    per.Apepaterno = (string)rd["apepaterno"];
                                    per.Apematerno = (string)rd["apematerno"];
                                    per.codCiudad = Convert.ToInt32(rd["codciudad"]);
                                    per.codSucursal = Convert.ToInt32(rd["codSucursal"]);
                                    per.codArea = Convert.ToInt32(rd["codArea"]);
                                    per.NombreArea = (string)rd["area"];
                                    per.codCosto = Convert.ToInt32(rd["ccosto"]);
                                    per.centro = (string)rd["centro"];
                                    per.sucursal = (string)rd["nombreSucursal"];
                                    per.Telefono = (string)rd["telefono"];
                                    per.Ingreso = Convert.ToDateTime(rd["ingreso"]);
                                    per.Salida = Convert.ToDateTime(rd["salida"]);
                                    per.codCargo = Convert.ToInt32(rd["codCargo"]);
                                    per.Tipocontrato = Convert.ToInt32(rd["tipocontrato"]);
                                    per.RegimenSalario = Convert.ToInt32(rd["regimensalario"]);
                                    per.Jubilado = Convert.ToInt16(rd["jubilado"]);
                                    per.Regimen = Convert.ToInt32(rd["regimen"]);
                                    per.codAfp = Convert.ToInt32(rd["afp"]);
                                    per.NombreAfp = (string)rd["NombreAfp"];
                                    per.codSalud = Convert.ToInt32(rd["salud"]);
                                    per.NombreSalud = (string)rd["NombreSalud"];
                                    per.codCajaPrev = Convert.ToInt32(rd["cajaPrevision"]);
                                    per.NombreCajaPrev = (string)rd["NombreCajaPrevision"];
                                    per.FechaSeguroCes = Convert.ToDateTime(rd["fechaSegCes"]);
                                    per.Tramo = Convert.ToInt32(rd["tramo"]);
                                    per.codFormaPago = Convert.ToInt32(rd["codFormaPago"]);
                                    per.NombreFormaPago = (string)rd["NombrePago"];
                                    per.codBanco = Convert.ToInt32(rd["codBanco"]);
                                    per.NombreBanco = (string)rd["NombreBanco"];
                                    per.NumCuenta = (string)rd["cuenta"];
                                    per.FechaVacacion = Convert.ToDateTime(rd["fechavacacion"]);
                                    per.FechaProgresivo = Convert.ToDateTime(rd["fechaprogresivo"]);
                                    per.Tipocuenta = Convert.ToInt32(rd["tipocuenta"]);
                                    per.NombreTipoCuenta = (string)rd["NombreTipoCuenta"];
                                    per.codClase = Convert.ToInt32(rd["clase"]);
                                    per.Fun = (string)rd["fun"];
                                    per.codCausal = Convert.ToInt32(rd["causal"]);
                                    per.ArticuloCausal = (string)rd["ArtCausal"];
                                    per.DescripcionCausal = (string)rd["DescripCausal"];
                                    per.Edad = (DateTime.Now.Date.Year - Convert.ToDateTime(rd["fechanac"]).Year);
                                    per.Email = (string)rd["mail"];
                                    per.privado = (bool)rd["privado"];
                                    per.codNacion = Convert.ToInt32(rd["nacion"]);
                                    per.ApellidoNombre = (string)rd["ApellidoNombre"];
                                    per.Escolaridad = (string)rd["esco"];
                                    per.FonoEmergencia = (string)rd["numemer"];
                                    per.NombreEmergencia = (string)rd["nomemer"];
                                    per.Talla = (string)rd["talla"];
                                    per.Calzado = (string)rd["calzado"];
                                    per.Horario = (string)rd["horario"];
                                    per.AnosProgresivos = Convert.ToDouble(rd["anosprogresivo"]);
                                    per.Jornada = Convert.ToInt16(rd["jornada"]);
                                    per.CodSindicato = Convert.ToInt32(rd["codSin"]);
                                    per.NombreSindicato = (string)rd["descSin"];
                                    per.Suslab = Convert.ToInt32(rd["suslab"]);
                                }
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return per;            
        }
        /// <summary>
        /// Retorna la información del trabajador en formato dataset
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="pPeriodo">Periodo que se desea consultar.</param>
        /// <returns></returns>
        public static DataSet GetInfoDataset(string pContrato, int pPeriodo)
        {
            DataSet info = new DataSet();
            string sql = "SELECT contrato, anomes, trabajador.rut, CONCAT(trabajador.nombre, ' ', apepaterno, ' ', apematerno) as nombre, fechanac, (SELECT DATEDIFF(YY, fechanac, GETDATE())) as edad, " +
                         "cargo.nombre as cargo, ciudad.descCiudad as ciudad, direccion, ecivil.nombre as ecivil, nacion.nombre as nacionalidad, sexo, " +
                         " pasaporte, status, trabajador.nombre as NombreTrabajador, apepaterno, apematerno, " +
                         " ciudad as codciudad, sucursal as codSucursal, sucursal.descSucursal as nombreSucursal, area as codArea, ccosto, ccosto.nombre as centro, telefono, " +
                         " ingreso, salida, cargo as codCargo, tipocontrato, regimensalario, jubilado, regimen, " +
                         " afp, salud, cajaPrevision, fechaSegCes, tramo, formapago as codFormaPago, banco as codBanco, " +
                         " cuenta, fechavacacion, fechaprogresivo, tipocuenta, clase, fun, causal, privado, mail, nacion, " +
                         " CONCAT(apepaterno, ' ', apematerno, ' ', trabajador.nombre) as ApellidoNombre, " +
                         " escolaridad.descesc as esco, numemer, nomemer, talla, calzado, area.nombre as area," +
                         " afp.nombre as NombreAfp, isapre.nombre as NombreSalud, cajaprevision.nombre as NombreCajaPrevision, " +
                         " formapago.nombre as NombrePago, banco.nombre as NombreBanco, tipocuenta.nombre as NombreTipoCuenta," +
                         " causaltermino.descCausal as ArtCausal, causaltermino.justificacion as DescripCausal, horario.deschor as horario " +                         
                         "FROM trabajador " +
                         "INNER JOIN cargo ON cargo.id = trabajador.cargo " +
                         "INNER JOIN ccosto ON trabajador.ccosto = ccosto.id " +
                         "INNER JOIN sucursal ON trabajador.sucursal = sucursal.codSucursal " +
                         "INNER JOIN ciudad On ciudad.idCiudad = trabajador.ciudad " +
                         "INNER JOIN ecivil ON ecivil.id = trabajador.ecivil " +
                         "INNER JOIN nacion ON nacion.id = trabajador.nacion " +
                         "INNER JOIN escolaridad ON escolaridad.codesc = trabajador.esco " +
                         "INNER JOIN area ON area.id = trabajador.area " +
                         "INNER JOIN afp On afp.id = trabajador.afp " +
                         "INNER JOIN isapre ON isapre.id = trabajador.salud " +
                         "INNER JOIN cajaprevision On cajaprevision.id = trabajador.cajaprevision " +
                         "INNER JOIN formapago ON formapago.id = trabajador.formapago " +
                         "INNER JOIN banco On banco.id = trabajador.banco " +
                         "INNER JOIN tipocuenta On tipocuenta.id = trabajador.tipocuenta " +
                         "INNER JOIN causaltermino On causaltermino.codcausal = trabajador.causal " +
                         "INNER JOIN horario On horario.id = trabajador.horario " +
                         "WHERE contrato=@pContrato AND anomes=@pPeriodo";

            SqlCommand cmd;
            SqlDataAdapter ad = new SqlDataAdapter();
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            ad.SelectCommand = cmd;
                            ad.Fill(info, "data");

                            ad.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
           
            return info;
        }

        /// <summary>
        /// Genera un dataset con informacion del trabajador para cartas de aviso.
        /// </summary>
        /// <param name="pContrato">Numero de contrato trabajador.</param>
        /// <param name="pPeriodo">Periodo consultado.</param>
        /// <returns></returns>
        public static DataSet GetDataAviso(string pContrato, int pPeriodo)
        {
            
            string sql = "SET LANGUAGE 'Spanish' " +
                        "SELECT concat(nombre, ' ', apepaterno, ' ', apematerno) as NombreTrabajador, causalTermino.descCausal as Codigo, " +
                         "causalTermino.justificacion as Detalle, salida, ingreso, "  +
                         "CONCAT(RIGHT(STUFF(DAY(getdate()), 1, 0, '0'), 2), ' de ', DATENAME(month, getdate()), ' de ', YEAR(getdate())) as 'Hoy', " +
                         " c.descCiudad as ciudad, direccion, dbo.fnformateaRut(rut) as rut " +
                         "FROM trabajador " +
                         "INNER JOIN ciudad c on c.idciudad = trabajador.ciudad " +
                         "INNER JOIN causalTermino ON causalTermino.codCausal = trabajador.causal " +
                         "WHERE anomes = @pPeriodo AND contrato=@pContrato";

            SqlCommand cmd;
            SqlConnection cn;
            DataSet data = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            ad.SelectCommand = cmd;
                            ad.Fill(data, "data");

                            ad.Dispose();
                            cmd.Dispose();

                            if (data.Tables[0].Rows.Count > 0)
                                return data;                            
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR
            }

            return data;
        }
        /// <summary>
        /// Genera dataset para finiquito.
        /// </summary>
        /// <param name="pContrato"></param>
        /// <param name="pPeriodo"></param>
        /// <returns></returns>
        public static DataSet GetDataFiniquito(string pContrato, int pPeriodo, string SqlParameters, string SqlDctos = "")
        {
            DataSet ds = new DataSet();
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataAdapter ad = new SqlDataAdapter();

            string sql = "SET LANGUAGE SPANISH " +
                         "DECLARE @RutEmpresa AS varchar(50) " +
                         "DECLARE @Representante AS varchar(100) " +
                         "DECLARE @Razon AS varchar(100) "  +
                         "DECLARE @Direccion AS VARCHAR(100) " +
                         "DECLARE @RutRepresentante AS varchar(20) " +
                         "DECLARE @SINDIG AS varchar(10) " +
                         "DECLARE @DIG AS varchar(10) " +
                         "DECLARE @FINAL AS VARCHAR(10) " +
			             "DECLARE @CiudadEmpresa AS varchar(10) " +
                         "SET @RutEmpresa = (SELECT rutemp FROM empresa) " +
                         "SET @Representante = (SELECT nombrerep FROM empresa) " +
                         "SET @Razon = (SELECT razon FROM empresa) " +
                         "SET @Direccion = (SELECT direccion FROM empresa) " +
                         "SET @RutRepresentante = (SELECT rutrep FROM empresa) " +
                         "SET @SINDIG = (SELECT SUBSTRING(rut, 0, LEN(rut)) FROM trabajador WHERE contrato = @pContrato AND anomes = @pPeriodo)  " +
                         "SET @DIG = (SELECT SUBSTRING(rut, LEN(rut), LEN(rut)) FROM trabajador WHERE contrato = @pContrato AND anomes = @pPeriodo)  " +
                         "SET @FINAL = (REPLACE(REPLACE(CONVERT(varchar, convert(money, @sindig), 1), '.00', ''), ',', '.')) " +
                         "SET @CiudadEmpresa = (SELECT ciudad.descCiudad FROM empresa INNER JOIN ciudad ON empresa.ciudad = ciudad.idciudad) "+                         
                         "Select trabajador.contrato as 'ContratoTrabajador', @FINAL + '-' + @DIG as 'RutTrabajador', CONCAT(trabajador.nombre, ' ', apepaterno, ' ', apematerno) as 'NombreTrabajador', " +
                         "direccion as Direccion, CONCAT(RIGHT(STUFF(DAY(ingreso), 1, 0, '0'), 2), ' de ', DATENAME(month, ingreso), ' de ', YEAR(ingreso)) as  'FechaIngreso',  " +
                         "CONCAT(RIGHT(STUFF(DAY(salida), 1, 0, '0'), 2), ' de ', DATENAME(month, salida), ' de ', YEAR(salida)) as 'FechaSalida', " +
                         "causalTermino.descCausal as 'Codigo', causalTermino.justificacion as 'Causal', ciudad.descciudad as ciudad," +
                         "CONCAT(RIGHT(STUFF(DAY(getdate()), 1, 0, '0'), 2), ' de ', DATENAME(month, getdate()), ' de ', YEAR(getdate())) as 'Hoy',  " +
                         "CONCAT((REPLACE(REPLACE(CONVERT(varchar, convert(money, SUBSTRING(@RutEmpresa, 0, LEN(@RutEmpresa))), 1), '.00', ''), ',', '.')), '-', SUBSTRING(@RutEmpresa, LEN(@RutEmpresa), LEN(@RutEmpresa))) as RutEmpresa,  " +
                         "@Representante as 'Representante', @Razon as 'RazonSocial', @Direccion as 'DireccionEmpresa', " +
                         "comuna.desccomuna as comuna, ccosto.nombre as CentroCosto, cargo.nombre as Cargo, " +
                         "CONCAT((REPLACE(REPLACE(CONVERT(varchar, convert(money, SUBSTRING(@RutRepresentante, 0, LEN(@RutRepresentante))), 1), '.00', ''), ',', '.')), '-', SUBSTRING(@RutRepresentante, LEN(@RutRepresentante), LEN(@RutRepresentante))) as RutRepresentante, " +
                         "{descuentos}" +
			             "@CiudadEmpresa as CiudadEmpresa, {parameters} " +
                        "FROM trabajador " +
                        "LEFT JOIN causalTermino ON causalTermino.codCausal = trabajador.causal " +
                        "LEFT JOIN ciudad ON ciudad.idCiudad = trabajador.ciudad " +
                        "LEFT join ccosto ON ccosto.id = trabajador.ccosto "  +
                        "LEFT JOIN cargo ON cargo.id = trabajador.cargo " + 
                        "INNER JOIN comuna ON comuna.codcomuna = trabajador.comuna " +
                        "WHERE trabajador.contrato = @pContrato AND trabajador.anomes = @pPeriodo";


            sql = sql.Replace("{parameters}", SqlParameters);
            if (SqlDctos != "")
                sql = sql.Replace("{descuentos}", SqlDctos);
            else
                sql = sql.Replace("{descuentos}", "");

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "data");

                            ad.Dispose();
                            cmd.Dispose();                               

                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...             
            }
            return ds;
        }

        /// <summary>
        /// Retorna un dataset con informacion del trabajador, para generación de contratos.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="pPeriodo">Periodo que se desea evaluar.</param>
        /// <returns></returns>
        public static DataSet GetDataSource(string pContrato, int pPeriodo)
        {
            DataSet ds = new DataSet();
            string sqlAdicional = "";
            sqlAdicional = GetParametrosItems(pContrato, pPeriodo);

            string sql = "SET LANGUAGE SPANISH " +
                         "DECLARE @RutEmpresa AS varchar(50) " +
                         "DECLARE @Representante AS varchar(100) " +
                         "DECLARE @Razon AS varchar(100) " +
                         "DECLARE @Cargo AS varchar(100) " +
                         "DECLARE @Direccion AS VARCHAR(100) " +
                         "DECLARE @RutRepresentante AS varchar(20) " +                         
                         "DECLARE @SINDIG AS varchar(10) " +
                         "DECLARE @DIG AS varchar(10) " +
                         "DECLARE @FINAL AS VARCHAR(10) " +          
                         "DECLARE @CiudadEmp AS VARCHAR(100) " +
                         "SET @CiudadEmp = (SELECT ciudad.descCiudad as ciudadempresa FROM empresa INNER JOIN ciudad ON ciudad.idCiudad = empresa.ciudad) " +
                         "SET @RutEmpresa = (SELECT rutemp FROM empresa) " +
                         "SET @Representante = (SELECT nombrerep FROM empresa) " +
                         "SET @Razon = (SELECT razon FROM empresa) " +
                         "SET @Cargo = (SELECT cargorrhh FROM empresa) " +
                         "SET @Direccion = (SELECT direccion FROM empresa) " +
                         "SET @RutRepresentante = (SELECT rutrep FROM empresa) " +                        
                         "SET @SINDIG = (SELECT SUBSTRING(rut, 0, LEN(rut)) FROM trabajador WHERE contrato = @pContrato AND anomes = @pPeriodo) " +
                         "SET @DIG = (SELECT SUBSTRING(rut, LEN(rut), LEN(rut)) FROM trabajador WHERE contrato = @pContrato AND anomes = @pPeriodo) " +
                         "SET @FINAL = (REPLACE(REPLACE(CONVERT(varchar, convert(money, @sindig), 1), '.00', ''), ',', '.')) " +
                         " " +
                         "Select contrato as 'ContratoTrabajador', @FINAL + '-' + @DIG as 'RutTrabajador', CONCAT(trabajador.nombre, ' ', apepaterno, ' ', apematerno) as 'NombreTrabajador',  " +
                         "CONCAT(RIGHT(STUFF(DAY(fechanac), 1, 0, '0'), 2), ' de ', DATENAME(month, fechanac), ' de ', YEAR(fechanac)) as 'FechaNacimiento', " +
                         "direccion as Direccion, telefono as Telefono, CONCAT(RIGHT(STUFF(DAY(ingreso), 1, 0, '0'), 2), ' de ', DATENAME(month, ingreso), ' de ', YEAR(ingreso)) as  'FechaIngreso',  " +
                         "CONCAT(RIGHT(STUFF(DAY(salida), 1, 0, '0'), 2), ' de ', DATENAME(month, salida), ' de ', YEAR(salida)) as 'FechaSalida', " +
                         "isapre.nombre as 'Salud', area.nombre as 'Area', banco.nombre as 'Banco', cuenta as 'NumeroCuenta', " +
                         "cargo.nombre as 'Cargo', causalTermino.descCausal as 'Causal', " +
                         "ccosto.nombre as 'CentroCosto', ciudad.descCiudad as Ciudad, ecivil.nombre as 'Civil', " +
                         "formapago.nombre as 'FormaPago', nacion.nombre as 'Nacionalidad', tipocuenta.nombre as TipoCuenta, afp.nombre as 'Afp', " +
                         "CONCAT(RIGHT(STUFF(DAY(getdate()), 1, 0, '0'), 2), ' de ', DATENAME(month, getdate()), ' de ', YEAR(getdate())) as 'Hoy', " +
                         "CONCAT((REPLACE(REPLACE(CONVERT(varchar, convert(money, SUBSTRING(@RutEmpresa, 0, LEN(@RutEmpresa))), 1), '.00', ''), ',', '.')), '-', SUBSTRING(@RutEmpresa, LEN(@RutEmpresa), LEN(@RutEmpresa))) as RutEmpresa, " +
                         "@Representante as 'Representante', @Razon as 'RazonSocial', @cargo as 'CargoRepresentante', @Direccion as 'DireccionEmpresa',  " +
                         "CONCAT((REPLACE(REPLACE(CONVERT(varchar, convert(money, SUBSTRING(@RutRepresentante, 0, LEN(@RutRepresentante))), 1), '.00', ''), ',', '.')), '-', SUBSTRING(@RutRepresentante, LEN(@RutRepresentante), LEN(@RutRepresentante))) as RutRepresentante, " +
                         "@CiudadEmp as CiudadEmpresa, horario.deschor as horario, comuna.descComuna as Comuna," +
                         "{parameters}" +
                         "(CASE " +
                            "WHEN tipocontrato = 0 THEN 'INDEFINIDO' " + 
                            "WHEN tipocontrato = 1 THEN 'PLAZO FIJO' " +
                            "WHEN tipocontrato = 2 THEN 'OBRA O FAENA' " +
                         "END " +
                         ") AS TipoContrato " +
                        "FROM trabajador " +
                        "LEFT JOIN isapre ON isapre.id = trabajador.salud " +
                        "LEFT JOIN area on area.id = trabajador.area " +
                        "LEFT JOIN banco on banco.id = trabajador.banco " +
                        "LEFT JOIN cajaPrevision ON cajaPrevision.id = trabajador.cajaPrevision " +
                        "LEFT JOIN cargo ON cargo.id = trabajador.cargo " +
                        "LEFT JOIN causalTermino ON causalTermino.codCausal = trabajador.causal " +
                        "LEFT JOIN ccosto ON ccosto.id = trabajador.ccosto " +
                        "LEFT JOIN ciudad ON ciudad.idCiudad = trabajador.ciudad " +
                        "LEFT JOIN ecivil ON ecivil.id = trabajador.ecivil " +
                        "LEFT JOIN formaPago ON formapago.id = trabajador.formapago " +
                        "LEFT JOIN nacion ON nacion.id = trabajador.nacion " +
                        "LEFT JOIN tipoCuenta ON tipoCuenta.id = trabajador.tipoCuenta " +
                        "LEFT JOIN afp on afp.id = trabajador.afp " +
                        "INNER JOIN horario ON horario.id = trabajador.horario " + 
                        "INNER JOIN comuna ON comuna.codComuna = trabajador.comuna " +
                        "WHERE trabajador.contrato = @pContrato AND trabajador.anomes = @pPeriodo";

            if (sqlAdicional.Length > 0)
                sql = sql.Replace("{parameters}", sqlAdicional);
            else
                sql = sql.Replace("{parameters}", "");

            SqlCommand cmd;
            SqlDataAdapter ad;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        ad = new SqlDataAdapter();
                        ad.SelectCommand = cmd;
                        ad.Fill(ds);

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();

                        if (ds.Tables[0].Rows.Count > 0)
                            return ds;
                        else
                            return null;
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return ds;
        }
        /// <summary>
        /// Retorna un sql adicional con todos los items del trabajador para generacion de contrato.
        /// </summary>
        /// <param name="pContrato"></param>
        /// <param name="pPeriodo"></param>
        private static string GetParametrosItems(string pContrato, int pPeriodo)
        {
            string sql = "SELECT coditem, valor FROM itemtrabajador WHERE contrato = @pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            string cadena = "";

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {                                
                                while (rd.Read())
                                {
                                    cadena = cadena + $"FORMAT({Convert.ToInt32(rd["valor"])}, 'N0') as {rd["coditem"].ToString()}, ";
                                }
                            }

                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return cadena;
        }

        /// <summary>
        /// Retorna sql dinamico para listado de items.
        /// </summary>
        /// <param name="pPeriodo">Periodo consultado.</param>
        /// <returns></returns>
        private static string GetSqlColumnasDinamicas(int pPeriodo)
        {
            string sql = "", res = "";
            #region "SQL dinamico"
            sql = string.Format("DECLARE @doc xml " +
                                "DECLARE @cadena AS nvarchar(MAX) " +
                                "SET @doc = (SELECT DISTINCT concat(',', coditem), tipo, orden FROM itemtrabajador WHERE anomes = {0} ORDER BY tipo, orden FOR XML PATH(''))" +
                                "set @doc.modify('delete //tipo') " +
                                "SET @doc.modify('delete //orden') " +
                                "SET @cadena = CONVERT(nvarchar(MAX), @doc) " +
                                "SET @cadena = SUBSTRING(@cadena, 2, LEN(@cadena)) " +
                                "SET @cadena = 'SELECT dbo.fnrutguion(rut) as rut, contrato, nombre, apepaterno, apematerno, " +
                                " ccosto, sucursal, area, ' + @cadena + N' from " +
                                "  ( " +
                                "     SELECT trabajador.rut, trabajador.contrato, trabajador.nombre, " +
                                "             apepaterno, apematerno, ccosto.nombre as ccosto, sucursal.descSucursal as Sucursal, " +
                                "             area.nombre as area, coditem, valorcalculado as valor " +
                                "              FROM itemtrabajador " +
                                "              INNER JOIN trabajador On trabajador.contrato = itemtrabajador.contrato AND trabajador.anomes = itemtrabajador.anomes " +
                                "              INNER JOIN ccosto ON ccosto.id = trabajador.ccosto " +
                                "              INNER JOIN sucursal ON sucursal.codSucursal = trabajador.sucursal " +
                                "              INNER JOIN area ON area.id = trabajador.area " +
                                "              where trabajador.anomes = {1} AND suspendido = 0 " +
                                "           ) as DataSource " +
                                "           PIVOT " +
                                "            ( " +
                                "            SUM(valor) " +
                                "            FOR coditem IN(' + @cadena + N') " +
                                "            ) p ' " +                                
                                "SELECT CONVERT(varchar(MAX), @cadena) + '[condition]' as data ", pPeriodo, pPeriodo);
            #endregion
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            //cmd.Parameters.Add(new SqlParameter("@contrato", pContrato));
                            //cmd.Parameters.Add(new SqlParameter("@periodo", pPeriodo));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                res = data.ToString();                            
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR
            }
            return res;
        }

        /// <summary>
        /// Genera un datatable desde un sql dinamico.
        /// </summary>
        /// <param name="pPeriodo"></param>
        public static DataTable GetDataDinamic(int pPeriodo, string pConjunto = "")
        {
            string sql = "", filtro = "";
            sql = GetSqlColumnasDinamicas(pPeriodo);

            filtro = Calculo.GetSqlFiltro(User.GetUserFilter(), pConjunto, User.ShowPrivadas());
            if (filtro != "")
                sql = sql.Replace("[condition]", $" WHERE contrato IN (SELECT contrato FROM trabajador WHERE anomes={pPeriodo} {filtro}) ORDER BY ccosto, sucursal, area, apepaterno ");
            else
                sql = sql.Replace("[condition]", " ORDER BY ccosto, sucursal, area, apepaterno ");

           

            SqlConnection cn;
            SqlCommand cmd;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            DataTable Tabla = new DataTable();

            if (sql.Length > 0)
            {
                try
                {
                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                ad.SelectCommand = cmd;
                                ad.Fill(ds, "data");

                                if (ds.Tables[0].Rows.Count > 0)
                                {
                                    Tabla = ds.Tables[0];
                                }
                            }
                            cmd.Dispose();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    //ERROR...
                }
            }

            return Tabla;

        }

        public static void AddColumnsDataSet(DataSet pData)
        {
            if (pData.Tables[0].Rows.Count > 0)
            {
                string Item = "SUBASE";
                //NOMBRE ITEM
                pData.Tables[0].Columns.Add(Item, typeof(string));

                foreach (DataRow dr in pData.Tables[0].Rows)
                {
                    foreach (DataColumn column in pData.Tables[0].Columns)
                    {
                        if (column.ColumnName == Item)
                            dr[column] = 0;
                    }
                }
            }
        }

        /// <summary>
        /// Indica si la ficha de una determinada persona tiene el caracter de privada.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado</param>
        /// <param name="pPeriodo">Periodo que se desea consultar</param>
        /// <returns></returns>
        public static bool Esprivado(string pContrato, int pPeriodo)
        {
            string sql = "SELECT privado FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            bool privado = false;
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS    
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                        object data = cmd.ExecuteScalar();
                        if (data != DBNull.Value)
                        {
                            if (Convert.ToBoolean(data))
                                privado = true;
                        }

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return privado;
        }

        /// <summary>
        /// Setea como privadas todas las fichas de la persona.
        /// </summary>
        /// <param name="pContrato">Numero de contrato asociado.</param>
        /// <param name="NoPrivadas">Parametro opcional que nos indica, si es verdadero, que deseamos setear las fichas de la persona como no privadas.</param>
        public static void FichasPrivadas(string pContrato, bool? NoPrivadas = false)
        {
            string sql = "";
            sql = "UPDATE trabajador SET privado=1 WHERE contrato=@pContrato";

            if ((bool)NoPrivadas)
                sql = "UPDATE trabajador SET privado=0 WHERE contrato=@pContrato";

            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            cmd.ExecuteNonQuery();
                            cmd.Dispose();                            
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
        }

        /// <summary>
        /// Retorna el ultimo periodo en el cual una persona tuvo registros.
        /// </summary>
        /// <param name="pContrato">Nunero de contrato asociado.</param>
        /// <returns></returns>
        public static int LastFicha(string pContrato)
        {
            int Last = 0;
            string sql = "SELECT anomes FROM trabajador WHERE contrato=@pContrato AND " +
                "anomes = (SELECT MAX(anomes) FROM trabajador WHERE contrato=@pContrato)";

            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                        object data = cmd.ExecuteScalar();
                        if (data != DBNull.Value)
                            Last = Convert.ToInt32(data);

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return Last;
        }

        /// <summary>
        /// Genera reporte de liquidaciones de sueldo para un listado de personas.
        /// </summary>
        /// <param name="pLiquidaciones">Listado con liquidaciones de un grupo determinado de personas.</param>
        /// <param name="SaveZipFile">Parametro opcional que nos indica, si es verdadero, que las liquidaciones generadas se guardarán comprimidas.</param>
        public static void GeneraPdfLiquidaciones(List<LiquidacionHistorico> pLiquidaciones, bool? SaveZipFile = false)
        {
            //RUTA DESDE DONDE SE ABRE EL PROGRAMA
            string Path = Environment.CurrentDirectory;
            //PARA DIRECTORIO TEMPORAL
            string Temp = @"\TempDoc";
            string FinalPath = "", AuxContrato = "", rutAux = "";
            int count = 0;
            ZipArchive ZipFile = new ZipArchive();
            List<string> PathList = new List<string>();

            if (pLiquidaciones.Count > 0)
            {
                try
                {
                    //RECORREMOS LISTADO DE OBJETOS
                    for(int pos = 0; pos < pLiquidaciones.Count; pos++)
                    {
                        Documento docu = new Documento(pLiquidaciones[pos].Contrato, pLiquidaciones[pos].Periodo);
                        XtraReport reporte = new XtraReport();                        
                        AuxContrato = pLiquidaciones[pos].Contrato;
                        rutAux = pLiquidaciones[pos].Rut;                       

                        //GENERAMOS LIQUIDACION POR CADA CONTRATO
                        //if (pLiquidaciones[pos].Periodo == Calculo.PeriodoObservado)
                          //  reporte = docu.SoloHaberes();
                        //else
                            reporte = docu.SoloHaberesAnteriores();                       

                        reporte.CreateDocument();
                        reporte.DisplayName = $"{pLiquidaciones[pos].Contrato}-{fnSistema.PrimerMayuscula(fnSistema.FechaFormatoSoloMes(fnSistema.FechaPeriodo(pLiquidaciones[pos].Periodo)))}.pdf";

                        //RUTA FINAL
                        FinalPath = Path + Temp + @"\" + pLiquidaciones[pos].Contrato + @"\" + reporte.DisplayName;
                      

                        //PREGUNTAMOS SI YA EXISTE EL DIRECTORIO
                        if (Directory.Exists(Path + Temp + @"\" + pLiquidaciones[pos].Contrato))
                        {
                            //CLEAN DIRECTORY
                            if(count == 0)
                                CleanDirectory(Path + Temp + @"\" + pLiquidaciones[pos].Contrato);

                            //SOLO GUARDAMOS DATOS
                            reporte.ExportToPdf(FinalPath);                       
                        }
                        else
                        {

                            //CREAMOS EL DIRECTORIO
                            Directory.CreateDirectory(Path + Temp + @"\" + pLiquidaciones[pos].Contrato);
                            if (Directory.Exists(Path + Temp + @"\" + pLiquidaciones[pos].Contrato))
                                reporte.ExportToPdf(FinalPath);

                            //CREAMOS ARCHIVO EN BASE A CONTRATO AUXILIAR (GUARDA EL CONTRATO PENULTIMO VISUALIZADO)
                        }
                        count++;

                        //GUARDAMOS RUTA
                        PathList.Add(FinalPath);

                    }

                    //SOLO PARA VALIDAR QUE EL DIRECTORIO TIENE ARCHIVOS
                    //if (TieneArchivos(Path + Temp + @"\" + AuxContrato))
                    //    Correcto = true;

                    if ((bool)SaveZipFile && PathList.Count > 0)
                    {
                        Documento doc = new Documento("", 0);
                        doc.ExportToZipBackground(PathList, Path + Temp + @"\" + rutAux + ".zip");

                        //VERIFICAMOS SI EXISTE EL ARCHIVO
                        if (File.Exists(Path + Temp + @"\" + rutAux + ".zip"))
                        {
                            DialogResult Pregunta = XtraMessageBox.Show($"Archivo generado correctamente en {(Path + Temp + @"\" + rutAux + ".zip") + Environment.NewLine}¿Deseas Abrir archivo?", "Archivo", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                            if (Pregunta == DialogResult.Yes)
                                System.Diagnostics.Process.Start(Path + Temp + @"\" + rutAux + ".zip");
                        }
                    }
                }
                catch (Exception ex)
                {
                    //ERROR
                    
                }               
            }

        }

   

        /// <summary>
        /// Genera todas las liquidaciones de sueldo.
        /// </summary>
        /// <param name="pLiquidaciones">Listado de pares [contrato-periodo]</param>
        /// <param name="SaveZipFile">Parametro opcional que nos indica, si es verdadero, que la sliquidaciones se guardaran en un archivo comprimido.</param>
        /// <returns></returns>
        public static List<Paquete> GeneraPdfLiquidacionesTodos(List<LiquidacionHistorico> pLiquidaciones, bool? SaveZipFile = false)
        {
            //RUTA DESDE DONDE SE ABRE EL PROGRAMA
            string Path = Environment.CurrentDirectory;
            //PARA DIRECTORIO TEMPORAL
            string Temp = @"\TempDoc";
            string FinalPath = "", AuxContrato = "", rutAux = "";
            int count = 0;
            ZipArchive ZipFile = new ZipArchive();
            List<string> PathList = new List<string>();
            //LISTADO PARA GUARDAR RUTA DEL ARCHIVO, RUT Y CORREO ELECTRONICO...
            List<Paquete> Paquetes = new List<Paquete>();

                if (pLiquidaciones.Count > 0)
                {
                    try
                    {
                        //RECORREMOS LISTADO DE OBJETOS
                        for (int pos = 0; pos < pLiquidaciones.Count; pos++)
                        {
                            Documento docu = new Documento(pLiquidaciones[pos].Contrato, pLiquidaciones[pos].Periodo);
                            XtraReport reporte = new XtraReport();

                            if (pos > 0)
                                AuxContrato = pLiquidaciones[pos - 1].Contrato;
                            else
                                AuxContrato = pLiquidaciones[pos].Contrato;

                            //SOLO PARA COMPARAR CON EL CONTRATO ANTERIOR
                            if (pos > 0)
                                rutAux = pLiquidaciones[pos - 1].Rut;
                            else
                                rutAux = pLiquidaciones[pos].Rut;

                            //GENERAMOS LIQUIDACION POR CADA CONTRATO                         
                            reporte = docu.SoloHaberesAnteriores();

                            reporte.CreateDocument();
                            reporte.DisplayName = $"{pLiquidaciones[pos].Contrato}-{fnSistema.PrimerMayuscula(fnSistema.FechaFormatoSoloMes(fnSistema.FechaPeriodo(pLiquidaciones[pos].Periodo)))}.pdf";

                            //RUTA FINAL
                            FinalPath = Path + Temp + @"\" + pLiquidaciones[pos].Contrato + @"\" + reporte.DisplayName;

                            //SI CAMBIA CONTRATO DEJAMOS COUNT EN 0 PARA LIMPIAR DIRECTORIO DE NUEVO CONTRATO SI ES QUE EXISTE
                            if (AuxContrato != pLiquidaciones[pos].Contrato)
                                count = 0;

                            //PREGUNTAMOS SI YA EXISTE EL DIRECTORIO
                            if (Directory.Exists(Path + Temp + @"\" + pLiquidaciones[pos].Contrato))
                            {
                                //CLEAN DIRECTORY
                                if (count == 0)
                                    CleanDirectory(Path + Temp + @"\" + pLiquidaciones[pos].Contrato);

                                //SOLO GUARDAMOS DATOS
                                reporte.ExportToPdf(FinalPath);
                            }
                            else
                            {

                                //CREAMOS EL DIRECTORIO
                                Directory.CreateDirectory(Path + Temp + @"\" + pLiquidaciones[pos].Contrato);
                                if (Directory.Exists(Path + Temp + @"\" + pLiquidaciones[pos].Contrato))
                                    reporte.ExportToPdf(FinalPath);
                            }

                            count++;

                            //GUARDAMOS RUTA SIEMPRE Y CUANDO SEA EL MISMO RUT
                            if (rutAux == pLiquidaciones[pos].Rut)
                                PathList.Add(FinalPath);

                            //PREGUNTAMOS SI EL RUT CAMBIA (ES OTRO TRABAJADOR)                            
                            if (rutAux != pLiquidaciones[pos].Rut)
                            {
                                //GENERAMOS ARCHIVO RAR PARA TODAS LAS LIQUIDACIONES DE ESTE TRABAJADOR
                                if ((bool)SaveZipFile && PathList.Count > 0)
                                {
                                    docu.ExportToZipBackground(PathList, Path + Temp + @"\" + rutAux + ".zip");
                                    //LIMPIARMOS LISTA
                                    PathList.Clear();
                                    //GUARDAMOS EN LISTA EL CONTRATO ACTUAL
                                    PathList.Add(FinalPath);

                                    //GUARDAMOS RUTA DE ARCHIVOS RAR GENERADOS...
                                    if (File.Exists(Path + Temp + @"\" + rutAux + ".zip"))
                                    {
                                        //GUARDAMOS RUT Y RUTA DEL ARCHIVO   
                                        Paquetes.Add(new Paquete() { Ruta = Path + Temp + @"\" + rutAux + ".zip", Rut = rutAux, Destinatario = pLiquidaciones[pos - 1].Mail });
                                    }
                                }
                            }
                            else
                            {
                                //SI ES EL ULTIMO REGISTRO
                                if (pos == pLiquidaciones.Count - 1)
                                {
                                    //GENERAMOS ZIP
                                    if ((bool)SaveZipFile && PathList.Count > 0)
                                    {
                                        docu.ExportToZipBackground(PathList, Path + Temp + @"\" + rutAux + ".zip");
                                        //LIMPIARMOS LISTA
                                        PathList.Clear();
                                        //GUARDAMOS EN LISTA EL CONTRATO ACTUAL
                                        PathList.Add(FinalPath);

                                        //GUARDAMOS RUTA DE ARCHIVOS RAR GENERADOS...
                                        if (File.Exists(Path + Temp + @"\" + rutAux + ".zip"))
                                        {
                                            //GUARDAMOS RUT Y RUTA DEL ARCHIVO
                                            Paquetes.Add(new Paquete() { Ruta = Path + Temp + @"\" + rutAux + ".zip", Destinatario = pLiquidaciones[pos].Mail, Rut = rutAux });
                                        }
                                    }
                                }
                            }                            
                        }
                    }
                    catch (Exception ex)
                    {
                        //ERROR
                    }               
                }                  

            return Paquetes;

        }

        /// <summary>
        /// Genera listado de liquidaciones (contrato y periodo) para generacion de liquidaciones.
        /// </summary>
        /// <param name="pSql">Consulta sql</param>
        /// <returns></returns>
        public static List<LiquidacionHistorico> ListadoLiquidaciones(string pSql)
        {
            List<LiquidacionHistorico> Listado = new List<LiquidacionHistorico>();            

            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(pSql, cn))
                        {
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //LLENAMOS LISTADO
                                    Listado.Add(new LiquidacionHistorico() { Contrato = (string)rd["contrato"], Periodo = Convert.ToInt32(rd["anomes"]), Rut = (string)rd["rut"], Mail = (string)rd["mail"] });
                                }
                            }

                            rd.Close();
                            cmd.Dispose();
                        }
                    }
             
                }
            }
            catch (SqlException ex)
            {
                //PARAMETROS
            }

            return Listado;
        }

        /// <summary>
        /// Limpia el directorio donde se guardaran las liquidaciones generadas
        /// </summary>
        /// <param name="pPath">Ruta de directorio</param>
        private static void CleanDirectory(string pPath)
        {
            if (pPath.Length > 0)
            {
                DirectoryInfo Information = new DirectoryInfo(pPath);
                
                foreach (FileInfo File in Information.GetFiles())
                {
                    File.Delete();
                }
            }
        }

        /// <summary>
        /// Indica si un directorio tiene archivos o no.
        /// </summary>
        /// <param name="pPath">Ruta de la carpeta.</param>
        /// <returns></returns>
        public static bool TieneArchivos(string pPath)
        {
            bool existe = false;
            if (pPath.Length > 0)
            {
                try
                {
                    DirectoryInfo Information = new DirectoryInfo(pPath);
                    FileInfo[] Files = Information.GetFiles();

                    if (Files.Length > 0)
                        existe = true;
                    else
                        existe = false;
                }
                catch (Exception ex)
                {
                    //ERROR
                }                             
            }

            return existe;
        }

        /// <summary>
        /// Obtiene la direccion de correo de la persona
        /// </summary>
        /// <param name="pRut">Rut de la persona.</param>
        /// <returns></returns>
        public static string GetMail(string pRut)
        {
            string sql = "SELECT mail FROM trabajador WHERE rut = @pRut " +
                         "AND anomes = (SELECT MAX(anomes) FROM trabajador WHERE rut = @pRut)";

            string Email = "";

            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pRut", pRut));

                        object data = cmd.ExecuteScalar();
                        if (data != null)
                            Email = (string)data;
                    }

                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return Email;
        }
        
    }

    //CLASE PAR AMANIPULAR LOS CONJUTOS DE CONDICIONES 
    class Conjunto
    {
        private string codigo = "";
        private string descripcion = "";
        private string cadena = "";

        public Conjunto()
        {

        }

        public Conjunto(string code)
        {
            Codigo = code;
        }

        public string Codigo
        {
            get { return this.codigo; }
            set { this.codigo = value; }
        }

        public string Descripcion
        {
            get { return this.descripcion; }
            set { this.descripcion = value; }
        }

        public string Cadena
        {
            get { return this.cadena; }
            set { this.cadena = value; }
        }

        //OBTENER LA CADENA CONDICIONAL DE ACUERDO A CODIGO DE CONJUNTO
        public static string GetCondicionFromCode(string code)
        {
            string condicion = "";
            string sql = "SELECT cadena FROM conjunto WHERE codigo=@code";
            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@code", code));
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    condicion = (string)rd["cadena"];
                                }
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }
            return condicion;
        }

        //VERIFICAR SI EXISTE CODIGO DE CONJUNTO
        public static bool ExisteConjunto(string code)
        {
            string sql = "SELECT codigo FROM conjunto WHERE codigo=@codigo";
            SqlCommand cmd;
            SqlDataReader rd;
            bool existe = false;

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@codigo", code));
                        rd = cmd.ExecuteReader();

                        if (rd.HasRows)
                            existe = true;
                        else
                            existe = false;                       

                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existe;
        }

        /// <summary>
        /// Entrega la descripcion de un conjunto o condición
        /// </summary>
        /// <param name="pCode"></param>
        /// <returns></returns>
        public static string GetDescConjunto(string pCode)
        {
            //Se cambia descripción de conjunto al no existir el código o no seleccionar alguno
            string desc = "No aplica";
            string sql = "SELECT descripcion FROM conjunto WHERE codigo=@pCodigo";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS    
                            cmd.Parameters.Add(new SqlParameter("@pCodigo", pCode));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                desc = (string)data;
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return desc;
        }

        /// <summary>
        /// Retorna texto a mostrar el reporte de acuerdo a condicion seleccionada...
        /// </summary>
        /// <param name="pConjunto"></param>
        /// <param name="pFiltroUsuario"></param>
        /// <returns></returns>
        public static string GetCondicionReporte(string pConjunto, string pFiltroUsuario)
        {
            string data = "";

            if (pConjunto.Length > 0)
            {
                if (pFiltroUsuario != "0" && pFiltroUsuario.Length > 0)
                    data = GetDescConjunto(pFiltroUsuario) + ";" + GetDescConjunto(pConjunto);
                else
                    data = GetDescConjunto(pConjunto);
            }
            else if (pFiltroUsuario != "0" && pFiltroUsuario.Length > 0)
            {
                data = GetDescConjunto(pFiltroUsuario);
            }
            else
            {
                data = "No Aplica";
            }

            return data;
        }
    }

    class Employe
    {
        public string rut { get; set; } = "";
        public string contrato { get; set; } = "";
        public string nombre { get; set; } = "";
        public int anomes { get; set; } = 0;
    }

    class objeto
    {
        //CODIGO OBJETO
        private string codigo = "";
        private Int16 acceso = 0;

       public string Codigo {
            get { return codigo; }
            set { this.codigo = value; }
        }

        public Int16 Acceso {
            get { return acceso; }
            set { this.acceso = value; }
        }

        //VERIFICAR SI TIENE ACCESO A FORMULARIO
        /*SI EL VALOR DEVUELTO ES 1, TIENE ACCESO, CASO CONTRARIO NO PUEDE USAR ESA FUNCION...*/
        public static bool ValidaAcceso(int pGrupo, string pWindow)
        {
            //... CODE

            //SI GRUPO ES 0 Y USUARIO ES SUPER DEJAMOS PASAR
            if (pGrupo == 0 && User.getUser().ToLower() == "super")
                return true;

            string sql = "SELECT acceso FROM autorizacion WHERE grupo=@pGrupo AND objeto=@pWindow";
            SqlCommand cmd;
            Int16 acceso = 0;
            bool valida = false;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pGrupo", pGrupo));
                        cmd.Parameters.Add(new SqlParameter("@pWindow", pWindow));

                        object data = cmd.ExecuteScalar();
                        if(data != DBNull.Value)
                            acceso = Convert.ToInt16(data);

                        if (acceso == 1)
                            valida = true;

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return valida;
        }

        //OBTENER LISTADO DE OBJETOS DESDE TABLA OBJETO
        public static List<objeto> GetListObjetos()
        {
            List<objeto> lista = new List<objeto>();
            string sql = "SELECT codobjeto FROM objeto";
            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS LISTADO
                                lista.Add(new objeto() { codigo = (string)rd["codobjeto"], acceso = 0 });
                            }
                        }
                        else
                            lista = null;
                    }
                    cmd.Dispose();
                    fnSistema.sqlConn.Close();
                    rd.Close();
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }


            return lista;
        }
    }

    class Parametro
    {
        //FECHA NACIMIENTO
        public DateTime FechaNacimiento { get; set; }
        //SEXO
        public Int16 Sexo { get; set; }
        //TIPO CONTRATO
        public int TipoContrato { get; set; }
        //CODIGO ITEM
        public string CodItem { get; set; }
        //DESCRIPCION
        public string Descripcion { get; set; }
        //NUMERO ITEM
        public int NumItem { get; set; }
        //ORDEN
        public int Orden { get; set; }
        //TIPO
        public int Tipo { get; set; }
        //EXPRESION FORMULA
        public string ExpresionFormula { get; set; }
        //CODIGO FORMULA
        public string CodeFormula { get; set; }
        //PROPORCIONAL
        public bool Proporcional { get; set; }
        //VALOR ITEM
        public double ValorOriginal { get; set; }
        //CODIGO AFP
        public int CodigoAfp { get; set; }
        //CODIGO SALUD
        public int CodigoSalud { get; set; }


        //GENERA LISTADO PARA PREVIRED...
        public static List<Parametro> GetListParameters(string contrato, int periodo)
        {
            List<Parametro> listado = new List<Parametro>();
            string sql = "SELECT nombre, fechanac, sexo, tipocontrato, afp, salud, itemTrabajador.coditem, " +
                        "item.descripcion, itemtrabajador.valor, itemTrabajador.formula as codformula, formula.valor as valueformula, numitem, " +
                        "itemtrabajador.orden, itemTrabajador.tipo, itemtrabajador.proporcional FROM itemtrabajador " +
                        "INNER JOIN trabajador ON trabajador.contrato = itemtrabajador.contrato AND " +
                        "trabajador.anomes = itemTrabajador.anomes " +
                        "INNER JOIN item ON item.coditem = itemTrabajador.coditem " +
                        "INNER JOIN formula ON formula.codFormula = itemTrabajador.formula " +
                        "WHERE itemtrabajador.contrato = @pContrato AND itemTrabajador.anomes = @pPeriodo " +
                        "ORDER BY TIPO, ORDEN ";

            SqlCommand cmd;
            SqlDataReader rd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));

                        rd = cmd.ExecuteReader();
                        if (rd.HasRows)
                        {
                            while (rd.Read())
                            {
                                //LLENAMOS LISTA DE OBJETOS
                                listado.Add(new Parametro() { TipoContrato = Convert.ToInt32(rd["tipocontrato"]),
                                Sexo = Convert.ToInt16(rd["sexo"]), FechaNacimiento = Convert.ToDateTime(rd["fechanac"]),
                                CodItem = (string)rd["coditem"], Descripcion = (string)rd["descripcion"],
                                Tipo = Convert.ToInt32(rd["tipo"]), Orden = Convert.ToInt32(rd["orden"]),
                                NumItem = Convert.ToInt32(rd["numitem"]), CodeFormula = (string)rd["codformula"],
                                ExpresionFormula = (string)rd["valueformula"], Proporcional = (bool)rd["proporcional"],
                                ValorOriginal = Convert.ToDouble(rd["valor"]), CodigoAfp = Convert.ToInt32(rd["afp"]),
                                CodigoSalud = Convert.ToInt32(rd["salud"])});
                            }
                        }
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return listado;
        }
    }

    /*CLASE PARA MANIPULAR DATA CORRESPONDIENTE A ASIGNACIONES FAMILIARES*/
    class Familiar
    {
        //CONTRATO TRABAJADOR
        public string contrato { get; set; }
        //PERIODO
        public int periodo { get; set; } = 0;        
        
        /*CONSTRUCTOR*/
        public Familiar(string pContrato, int pPeriodo)
        {
            contrato = pContrato;
            periodo = pPeriodo;          
        }

        //OBTENER LA CANTIDAD DE CARGAS FAMILIARES SIMPLES
        public int GetNumCargasSimples()
        {            
            int cantidad = 0;
            string sql = "SELECT count(*) FROM cargafamiliar WHERE contrato=@pContrato AND (invalido = 0 AND maternal = 0) AND fechatermino>=@pFecha";
            SqlCommand cmd;
            DateTime fechaPeriodo = DateTime.Now.Date;
            fechaPeriodo = fnSistema.PrimerDiaMes(Calculo.PeriodoObservado);

            if (contrato != "")
            {
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                            cmd.Parameters.Add(new SqlParameter("@pFecha", fechaPeriodo));

                            cantidad = Convert.ToInt32(cmd.ExecuteScalar());

                            cmd.Dispose();
                            fnSistema.sqlConn.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }
          

            return cantidad;
        }

        //OBTENER LA CANTIDAD DE CARGAS FAMILIARES SIMPLES V2
        public int GetNumCargasSimplesV2()
        {
            int cargas = 0, edad = 0;
            string sql = "SELECT sexo, fechanac, parentesco, relacionlegal, fechaingreso, fechatermino " +
                         "FROM cargafamiliar WHERE contrato= @pContrato AND invalido = 0 AND maternal = 0";
            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;
            DateTime Ingreso = DateTime.Now.Date;
            DateTime Salida = DateTime.Now.Date;
            DateTime Nacimiento = DateTime.Now.Date;
            DateTime FechaCumple = DateTime.Now.Date;
            int sexo = 0;

            /*
             * PARENTESCO
             * 0 --> CONYUGE
             * 1 --> HIJO(A)
             * 2 --> MADRE
             * 3 --> PADRE
             */

            if (contrato != "")
            {
                try
                {
                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));

                                rd = cmd.ExecuteReader();
                                if (rd.HasRows)
                                {
                                    while (rd.Read())
                                    {
                                        //FECHA DE NACIMIENTO
                                        Nacimiento = Convert.ToDateTime(rd["fechanac"]);
                                        //INGRESO
                                        Ingreso = Convert.ToDateTime(rd["fechaingreso"]);
                                        //TERMINO
                                        Salida = Convert.ToDateTime(rd["fechatermino"]);
                                        sexo = Convert.ToInt32(rd["sexo"]);
                                        edad = DateTime.Now.Date.Year - Nacimiento.Year;
                                        //FECHA EN DONDE SE CUMPLIRIAN LOS 18 AÑOS
                                        FechaCumple = Nacimiento.AddYears(18);

                                        /*0--> MASCULINO; 1--> FEMENINO*/

                                        //FECHA DE TERMINO ES MAYOR O IGUAL AL PERIODO OBSERVADO
                                        if (Salida >= fnSistema.PrimerDiaMes(Calculo.PeriodoObservado))
                                        {
                                            //1 - CONYUGE FEMENINA                                     
                                            if (sexo == 1 && Convert.ToInt32(rd["parentesco"]) == 0)
                                            {
                                                cargas++;
                                            }
                                            //SI ES HIJO O HIJA
                                            else if (Convert.ToInt32(rd["parentesco"]) == 1)
                                            {
                                                //MENOR O IGUAL DE 18 AÑOS?
                                                //HASTA 24 AÑOS SI ESTA ESTUDIANDO?
                                                // if (edad <= 18 && FechaCumple >= fnSistema.UltimoDiaMes(Calculo.PeriodoObservado))
                                                //   cargas++;

                                                /*
                                                 * CONSIDERACIONES:
                                                 * ES CARGA SI ES MENOR O IGUAL A 18 AÑOS
                                                 * ES CARGA SI ES MAYOR DE 18 SIEMPRE Y CUANDO ESTUDIE Y SU EDAD NO SUPERE LOS 24
                                                 */

                                                //if (FechaCumple >= fnSistema.PrimerDiaMes(Calculo.PeriodoObservado))
                                                //  cargas++;
                                                if (Salida >= fnSistema.PrimerDiaMes(Calculo.PeriodoObservado))
                                                    cargas++;
                                            }
                                            //PADRE 
                                            else if (Convert.ToInt32(rd["parentesco"]) == 3)
                                            {
                                                //MAYOR DE 65?
                                                if (edad > 65)
                                                    cargas++;
                                            }
                                        }
                                    }
                                }

                                cmd.Dispose();
                                rd.Close();
                            }
                        }  
                    }                  
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }

            return cargas;
        }

        //OBTENER LA CANTIDAD DE CARGAS FAMILIARES CON INVALIDEZ
        public int GetNumCargasInvalidez()
        {
            int cantidad = 0;
            string sql = "SELECT count(*) FROM cargafamiliar WHERE contrato=@pContrato AND invalido=1 AND fechatermino>=@pFecha";
            DateTime fechaPeriodo = DateTime.Now.Date;
            fechaPeriodo = fnSistema.PrimerDiaMes(Calculo.PeriodoObservado);
            SqlCommand cmd;
            if (contrato != "")
            {
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            //PARAMETRO                            
                            cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                            cmd.Parameters.Add(new SqlParameter("@pFecha", fechaPeriodo));

                            cantidad = Convert.ToInt32(cmd.ExecuteScalar());

                            cmd.Dispose();
                            fnSistema.sqlConn.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }

            return cantidad;
        }

        //OBTENER LA CANTIDAD DE CARGAS FAMILIARES CON INVALIDEZ
        public int GetNumCargasInvalidezV2()
        {
            int cargas = 0, edad = 0;
            string sql = "SELECT sexo, fechanac, parentesco, relacionlegal, fechaingreso, fechatermino " +
                         "FROM cargafamiliar WHERE contrato= @pContrato AND invalido = 1";
            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;
            DateTime Ingreso = DateTime.Now.Date;
            DateTime Salida = DateTime.Now.Date;
            DateTime Nacimiento = DateTime.Now.Date;
            int sexo = 0;

            /*
             * PARENTESCO
             * 0 --> CONYUGE
             * 1 --> HIJO(A)
             * 2 --> MADRE
             * 3 --> PADRE
             */

            if (contrato != "")
            {
                try
                {
                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));

                                rd = cmd.ExecuteReader();
                                if (rd.HasRows)
                                {
                                    while (rd.Read())
                                    {
                                        //FECHA DE NACIMIENTO
                                        Nacimiento = Convert.ToDateTime(rd["fechanac"]);
                                        //INGRESO
                                        Ingreso = Convert.ToDateTime(rd["fechaingreso"]);
                                        //TERMINO
                                        Salida = Convert.ToDateTime(rd["fechatermino"]);
                                        sexo = Convert.ToInt32(rd["sexo"]);
                                        edad = DateTime.Now.Date.Year - Nacimiento.Year;

                                        /*0--> MASCULINO; 1--> FEMENINO*/

                                        //FECHA DE TERMINO ES MAYOR O IGUAL AL PERIODO OBSERVADO
                                        if (Salida >= fnSistema.PrimerDiaMes(Calculo.PeriodoObservado))
                                        {
                                            //1 - CONYUGE FEMENINA                                     
                                            if (sexo == 1 && Convert.ToInt32(rd["parentesco"]) == 0)
                                            {
                                                cargas++;
                                            }
                                            // CONYUGE HOMBRE (SOLO SI ES INVALIDO)
                                            else if (sexo == 0 && Convert.ToInt32(rd["parentesco"]) == 0)
                                            {
                                                cargas++;
                                            }
                                            //SI ES HIJO O HIJA
                                            else if (Convert.ToInt32(rd["parentesco"]) == 1)
                                            {
                                                //SI ES INVALIDO NO IMPORTA LA EDAD                                            
                                                cargas++;
                                            }
                                            //PADRE 
                                            else if (Convert.ToInt32(rd["parentesco"]) == 3 && sexo == 1)
                                            {
                                                //SI ES INVALIDO NO IMPORTA LA EDAD                                            
                                                cargas++;
                                            }
                                        }
                                    }
                                }
                            }

                            cmd.Dispose();
                            rd.Close();
                        }
                        ConnectionState estado = cn.State;
                    }
                  
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }

            return cargas;
        }

        //OBTENER LA CANTIDAD DE CARGAS MATERNALES 
        public int GetNumCargasMaternal()
        {
            int cantidad = 0;
            string sql = "SELECT count(*) FROM cargafamiliar WHERE contrato=@pContrato AND maternal=1 AND fechatermino>=@pFecha";
            DateTime fechaPeriodo = DateTime.Now.Date;
            fechaPeriodo = fnSistema.PrimerDiaMes(Calculo.PeriodoObservado);
            SqlCommand cmd;
            SqlConnection cn;
            if (contrato != "")
            {
                try
                {
                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                                cmd.Parameters.Add(new SqlParameter("@pFecha", fechaPeriodo));

                                cantidad = Convert.ToInt32(cmd.ExecuteScalar());

                                cmd.Dispose();                           
                            }
                        }
                    }                 
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }         

            return cantidad;
        }

        //OBTENER EL VALOR DEL TRAMO AL QUE PERTENECE EL CONTRATO
        public double GetValTramo()
        {
            string sqlTramo = "select valor from trabajador " +
                              "INNER JOIN asignacionFamiliar ON asignacionFamiliar.tramo = trabajador.tramo " +
                              "WHERE anomes = @pPeriodo AND contrato = @pContrato";
            SqlCommand cmd;
            double valor = 0;     
            
            if (contrato != "" && periodo != 0)
            {
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {

                        /*OBTENER EL VALOR DE ACUERDO A TRAMO*/
                        using (cmd = new SqlCommand(sqlTramo, fnSistema.sqlConn))
                        {

                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));

                            valor = Convert.ToDouble(cmd.ExecuteScalar());

                            cmd.Dispose();
                            fnSistema.sqlConn.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }
            return valor;
        }

        //OBTENER EL TRAMO AL QUE PERTENECE EL CONTRATO
        public string GetTramoTrab()
        {
            string sql = "SELECT tramo FROM trabajador WHERE contrato=@pContrato AND anomes=@pPeriodo";
            SqlCommand cmd;
            string tramo = "";

            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));

                        tramo = (string)cmd.ExecuteScalar();
                        if (tramo == "1")
                            tramo = "A";
                        else if (tramo == "2")
                            tramo = "B";
                        else if (tramo == "3")
                            tramo = "C";
                        else if (tramo == "4")
                            tramo = "D";                       


                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return tramo;
        }

        //OBTENER EL TOTAL DE ASIGNACIONES FAMILIARES SIMPLES
        public double GetTotalAsignacionesSimples()
        {
            double total = 0;
            string sql = "SELECT ISNULL((SUM(valorcalculado)), 0) as valorcalculado  FROM itemtrabajador " +
                "WHERE contrato=@pContrato AND anomes=@pPeriodo AND coditem = 'ASIGFAM' AND suspendido=0";
            SqlCommand cmd;

            if (contrato != "" && periodo != 0)
            {
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));

                            total = Convert.ToDouble(cmd.ExecuteScalar());

                            cmd.Dispose();
                            fnSistema.sqlConn.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }          

            return total;
        }

        //OBTENER EL TOTAL DE ASIGANACIONES FAMILIARES POR INVALIDEZ
        public double GetTotalAsignacionesInvalidez()
        {
            double total = 0;
            string sql = "SELECT ISNULL((SUM(valorcalculado)), 0) as valorcalculado  FROM itemtrabajador " +
                "WHERE contrato=@pContrato AND anomes=@pPeriodo AND coditem = 'ASIGINV'";
            SqlCommand cmd;
            if (contrato != "" && periodo != 0)
            {
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));

                            total = Convert.ToDouble(cmd.ExecuteScalar());

                            cmd.Dispose();
                            fnSistema.sqlConn.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }          

            return total;
        }

        //OBTENER EL TOTAL DE ASIGNACIONES FAMILIARES POR MATERNAL
        public double GetTotalAsignacionesMaternal()
        {
            double total = 0;
            string sql = "SELECT ISNULL((SUM(valorcalculado)), 0) as valorcalculado  FROM itemtrabajador " +
                "WHERE contrato=@pContrato AND anomes=@pPeriodo AND coditem = 'ASIGMAT'";
            SqlCommand cmd;
            if (contrato != "" && periodo != 0)
            {
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));

                            total = Convert.ToDouble(cmd.ExecuteScalar());

                            cmd.Dispose();
                            fnSistema.sqlConn.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }

            return total;
        }

        //OBTENER EL TOTAL DE ASIGNACIONES FAMILIARES POR RETROACTIVO
        public double GetTotalAsignacionesRetroc()
        {
            double total = 0;
            string sql = "SELECT ISNULL((SUM(valorcalculado)), 0) as valorcalculado  FROM itemtrabajador " +
                "WHERE contrato=@pContrato AND anomes=@pPeriodo AND coditem = 'ASIFAR' AND suspendido=0";
            SqlCommand cmd;

            if (contrato != "" && periodo != 0)
            {
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", contrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", periodo));

                            total = Convert.ToDouble(cmd.ExecuteScalar());

                            cmd.Dispose();
                            fnSistema.sqlConn.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }         

            return total;
        }

        //SABER SI UN CONTRATO TIENE ITEM ASIGNACIONES EN UN PERIODO X
        public bool CalculaAsignacion(string pCoditem)
        {
            bool calcula = false;
            string sql = "";
            int count = 0;
            SqlCommand cmd;
            if (contrato != "" && periodo != 0)
            {
                sql = $" SELECT count(*) as total from itemtrabajador where contrato='{contrato}'" +
                      $" AND anomes ={periodo}  AND CODITEM ='{pCoditem}' AND suspendido=0";

                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                        {
                            count = Convert.ToInt32(cmd.ExecuteScalar());

                            if (count > 0)
                                calcula = true;
                        }
                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }            

            return calcula;
        }

    }

    /*CLASE PARA MANIPULAR BOTONES NAVEGACIONALES PARA PREVISUALIZACION DE LIQUIDACIONES*/
    class NavegacionT
    {
        //DATOS DE ENTRADA CONTRATO Y PERIODO PERSONA
        public string Contrato { get; set; } = "";
        public int Periodo { get; set; } = 0;
        public string Rut { get; set; } = "";

        //PUNTO DE PARTIDA
        public int Inicio { get; set; } = 0;

        //LISTADO 
        public List<LiquidacionHistorico> Listado { get; set; }

        //TOTAL UNIVERSO
        public int Universo { get; set; }

        //QUERY CONSULTA
        public string sqlQuery { get; set; }

        //CONSTRUCTOR SIN PARAMETROS
        public NavegacionT() { }

        //CONSTRUCTOR
        public NavegacionT(string pContrato, int pPeriodo)
        {
            this.Contrato = pContrato;
            this.Periodo = pPeriodo;
            //OBTENEMOS EL RUT EN BASE A EL NUMERO DE CONTRATO
            this.Rut = Persona.GetRutFromContrato(pContrato, pPeriodo);
            this.Universo = GetCantidadRegistro();
            this.Listado = SetListado();          
        }

        /*OBTENER LA CANTIDAD DE REGISTROS O LIQUIDACIONES DISPONIBLES PARA PERSONA*/
        private int GetCantidadRegistro()
        {
            int cantidad = 0;
            string sql = "SELECT count(*) FROM liquidacionHistorico WHERE contrato=@pContrato";

            //QUERY CONSIDERANDO TODOS LOS CONTRATOS ASOCIADOS A UN RUT
            string sql2 = "SELECT count(*) as total FROM liquidacionHistorico " +
                          "INNER JOIN trabajador ON trabajador.contrato = liquidacionHistorico.contrato AND " +
                          "trabajador.anomes = liquidacionHistorico.anomes " +
                          "WHERE rut = @pRut";

            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql2, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pRut", Rut));
                        cantidad = Convert.ToInt32(cmd.ExecuteScalar());

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return cantidad;
        }

        /*OBTENER LISTADO PERIODOS*/
        private List<LiquidacionHistorico> SetListado()
        {
            Listado = new List<LiquidacionHistorico>();
            if (Contrato != "" && Periodo != 0)
            {
                string sql = "Select anomes FROM liquidacionHistorico WHERE contrato=@pContrato ORDER BY anomes";

                /*QUERY CONSIDERANDO TODOS LOS CONTRATOS ASOCIADOS A UN RUT*/
                string sql2 = "Select liquidacionHistorico.anomes, liquidacionHistorico.contrato FROM liquidacionHistorico " +
                              "INNER JOIN trabajador ON trabajador.contrato = liquidacionHistorico.contrato AND " +
                              "trabajador.anomes = liquidacionHistorico.anomes " +
                              "WHERE rut = @pRut ORDER BY ingreso";

                SqlCommand cmd;
                SqlDataReader rd;
                try
                {
                    if (fnSistema.ConectarSQLServer())
                    {
                        using (cmd = new SqlCommand(sql2, fnSistema.sqlConn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pRut", Rut));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //GUARDAMOS DATOS EN LISTA
                                    Listado.Add(new LiquidacionHistorico() { Contrato = (string)rd["contrato"], Periodo = Convert.ToInt32(rd["anomes"])});
                                }
                            }

                            cmd.Dispose();
                            fnSistema.sqlConn.Close();
                            rd.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }
            }

            return Listado;
        }

        /*SIGUIENTE ELEMENTO*/
        public void Siguiente()
        {
            /*UNIVERSO CORRESPONDE A LA CANTIDAD DE REGISTROS*/
            if (Inicio >=0 && Inicio < Universo)
            {
                if (Inicio == Universo - 1)
                {
                    //ESTAMOS EN EL ULTIMO ELEMENTO DEL UNIVERSO
                    //MOSTRAMOS DATa
                    Inicio = 0;
                }
                else
                {
                    //AUMENTAMOS POSICION
                    Inicio++;
                    //MOSTRAMOS DATA
                }                
            }
        }

        /*ELEMENTO ANTERIOR*/
        public void Anterior()
        {
            if (Inicio >= 0 && Inicio < Universo)
            {
                if (Inicio == 0)
                {
                    //PRIMER ELEMENTO
                    //CARGO DATA Y RESETEO
                    Inicio = Universo - 1;
                }
                else
                {
                    //MOSTRAMOS ELEMENTO ANTERIOR
                    Inicio--;
                    //CARGAMOS DATA
                }
            }
        }

        /*PRIMER ELEMENTO*/
        public void Primer()
        {
            if (Inicio >= 0 && Inicio < Universo)
            {
                Inicio = 0;
            }
        }

        /*ULTIMO ELEMENTO*/
        public void Ultimo()
        {
            if (Inicio >=0 && Inicio < Universo)
            {
                Inicio = Universo - 1;
            }
        }

    }

    /*CLASE PARA MANIPULAR BOTONES NAVEGACIONALES PARA PREVISUALIZACION DE TRABAJADORES*/
    class NavegaTrabajador
    {
        //PUNTO DE PARTIDA
        public int Posicion { get; set; } = 0;

        //LAST POSITION
        public static string LastSearch { get; set; } = "";

        //LISTADO (N° CONTRATO Y ULTIMO PERIODO ACTIVO)
        public List<Persona> Listado { get; set; }

        //TOTAL UNIVERSO
        public int Universo { get; set; }

        //QUERY CONSULTA
        public string sqlQuery { get; set; }

        //ORDEN DE DATOS
        public string Orden { get; set; }

        //SOLO PARA SABER SI CAMBIA ORDEN
        public bool ChangeOrder { get; set; }

        //PARA COMBO
        public CheckedComboBoxEdit Combo { get; set; }

        //VISUALIZA FICHAS PRIVADAS
        public bool ShowPrivate { get; set; }

        //CONSTRUCTOR 
        public NavegaTrabajador(string pOrder, DevExpress.XtraEditors.CheckedComboBoxEdit pCombo) {
            this.Orden = pOrder;
            //this.Universo = GetCantidadRegistro();
            this.Combo = pCombo;
            this.Listado = SetListado(Orden, pCombo);
            this.Universo = this.Listado.Count;
        }

        /*OBTENER LA CANTIDAD DE TRABAJADORES PARA UN PERIODO ESPECIFICO*/
        private int GetCantidadRegistro()
        {
            int cantidad = 0;
            string sql = "SELECT count(*) FROM trabajador WHERE anomes=@pPeriodo";
            SqlCommand cmd;
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pPeriodo", Calculo.PeriodoObservado));

                        cantidad = Convert.ToInt32(cmd.ExecuteScalar());

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return cantidad;
        }

        /*OBTENER LISTADO PERIODOS*/
        /*SI CAMBIA EL ORDEN VOLVER A SETEAR EL LISTADO CON NUEVO ORDEN*/
        private List<Persona> SetListado(string pOrden, DevExpress.XtraEditors.CheckedComboBoxEdit pCombo)
        {
           Listado = new List<Persona>();
           string sql = "", FiltroUsuario = "";

            //SI FILTRO ES 0, USER NO TIENE FILTRO
            FiltroUsuario = User.GetUserFilter();

            //SI LA PROPIEDAD SHOWPRIVATE ES TRUE, EL USUARIO PUEDE VER FICHAS PRIVADAS
            ShowPrivate = User.ShowPrivadas();

            if (FiltroUsuario == "0")
            {
                //CASE 1: VISUALIZA ACTIVOS     
                if(VisualizaElemento("activos", pCombo))
                    //sql = $"SELECT contrato FROM trabajador WHERE anomes=@pPeriodo AND status=1 {(ShowPrivate == false? " AND privado=0 ": "")}  {GetcadenaOrden(Orden)}";
                    sql = $"SELECT anomes, contrato FROM trabajador WHERE anomes={Calculo.PeriodoObservado} AND status=1 {(ShowPrivate == false ? " AND privado=0 " : "")}" +
                          $"{GetcadenaOrden(Orden)}";
                //CASE 2: VISUALIZA INACTIVOS
                /*MUESTRA TODOS LOS CONTRATOS CUYO PERIODO MAXIMO NO SEA IGUAL PERIODO EN CURSO*/
                if (VisualizaElemento("inactivos", pCombo))
                    //sql = $"SELECT contrato FROM trabajador WHERE anomes=@pPeriodo AND status=0 {(ShowPrivate == false ? " AND privado=0 " : "")} {GetcadenaOrden(Orden)}";
                    //sql = $"SELECT MAX(anomes) as anomes, contrato FROM trabajador " +
                    //    $"WHERE status = 0 AND contrato " +
                    //    $"NOT IN (SELECT contrato FROM trabajador GROUP BY contrato HAVING MAX(anomes) = {Calculo.PeriodoObservado}) {(ShowPrivate == false ? " AND privado=0 " : "")}" +
                    //    $"GROUP BY contrato {GetcadenaAgrupa(Orden)} " +
                    //    $"{GetcadenaOrden(Orden)}";
                    sql = $"SELECT MAX(anomes) as anomes, contrato FROM trabajador " +
                       $"WHERE contrato " +
                       $"NOT IN (SELECT contrato FROM trabajador GROUP BY contrato HAVING MAX(anomes) = {Calculo.PeriodoObservado}) OR status=0 {(ShowPrivate == false ? " AND privado=0 " : "")}" +
                       $"GROUP BY contrato {GetcadenaAgrupa(Orden)} " +
                       $"{GetcadenaOrden(Orden)}";
                //CASE 3: VISUALIZA AMBOS
                if (VisualizaElemento("activos", pCombo) && VisualizaElemento("inactivos", pCombo))
                    //sql = $"SELECT contrato FROM trabajador WHERE anomes=@pPeriodo AND (status=1 OR status = 0) {(ShowPrivate == false ? " AND privado=0 " : "")} {GetcadenaOrden(Orden)}";
                    //sql = $"SELECT MAX(anomes) as anomes, contrato FROM trabajador " +
                    //      $"WHERE ((status=0 AND contrato NOT IN (SELECT contrato FROM trabajador GROUP BY contrato HAVING MAX(anomes) = {Calculo.PeriodoObservado})) " +
                    //      $"OR status = 1) { (ShowPrivate == false ? " AND privado=0 " : "")}" +
                    //      $"GROUP BY contrato {GetcadenaAgrupa(Orden)} " +
                    //      $"{GetcadenaOrden(Orden)}";
                    sql = $"SELECT MAX(anomes) as anomes, contrato FROM trabajador " +
                          $"WHERE (contrato NOT IN (SELECT contrato FROM trabajador GROUP BY contrato HAVING MAX(anomes) = {Calculo.PeriodoObservado})) " +
                          $"OR status = 0 OR (status=1 AND anomes={Calculo.PeriodoObservado}) { (ShowPrivate == false ? " AND privado=0 " : "")}" +
                          $"GROUP BY contrato {GetcadenaAgrupa(Orden)} " +
                          $"{GetcadenaOrden(Orden)}";
            }
            else
            {
                if(VisualizaElemento("activos", pCombo))
                    //sql = $"SELECT contrato FROM trabajador WHERE anomes=@pPeriodo AND {Conjunto.GetCondicionFromCode(FiltroUsuario)} AND status=1 {(ShowPrivate == false ? " AND privado=0 " : "")} {GetcadenaOrden(Orden)}";
                    //ACTIVOS
                    sql = $"SELECT anomes, contrato FROM trabajador WHERE anomes={Calculo.PeriodoObservado} AND status=1 AND {Conjunto.GetCondicionFromCode(FiltroUsuario)} {(ShowPrivate == false ? " AND privado=0 " : "")}" +
                       $"{GetcadenaOrden(Orden)}";

                if (VisualizaElemento("inactivos", pCombo))
                    //sql = $"SELECT contrato FROM trabajador WHERE anomes=@pPeriodo AND {Conjunto.GetCondicionFromCode(FiltroUsuario)} AND status=0 {(ShowPrivate == false ? " AND privado=0 " : "")} {GetcadenaOrden(Orden)}";
                    //INACTIVOS
                    sql = $"SELECT MAX(anomes) as anomes, contrato FROM trabajador " +
                      $"WHERE contrato " +
                      $"NOT IN (SELECT contrato FROM trabajador GROUP BY contrato HAVING MAX(anomes) = {Calculo.PeriodoObservado}) OR status=0 AND {Conjunto.GetCondicionFromCode(FiltroUsuario)} {(ShowPrivate == false ? " AND privado=0 " : "")}" +
                      $"GROUP BY contrato {GetcadenaAgrupa(Orden)} " +
                      $"{GetcadenaOrden(Orden)}";

                if (VisualizaElemento("activos", pCombo) && VisualizaElemento("inactivos", pCombo))
                    //sql = $"SELECT contrato FROM trabajador WHERE anomes=@pPeriodo AND {Conjunto.GetCondicionFromCode(FiltroUsuario)} AND (status=0 OR status=1) {(ShowPrivate == false ? " AND privado=0 " : "")} {GetcadenaOrden(Orden)}";
                    //ACTIVOS E INACTIVOS (TODOS)
                    sql = $"SELECT MAX(anomes) as anomes, contrato FROM trabajador WHERE (contrato NOT IN (SELECT contrato FROM trabajador GROUP BY contrato HAVING MAX(anomes) = {Calculo.PeriodoObservado})) " +
                          $"OR status = 0 OR (status=1 AND anomes={Calculo.PeriodoObservado}) AND {Conjunto.GetCondicionFromCode(FiltroUsuario)} { (ShowPrivate == false ? " AND privado=0 " : "")}" +
                          $"GROUP BY contrato {GetcadenaAgrupa(Orden)} " +
                          $"{GetcadenaOrden(Orden)}";
            }
      
                SqlCommand cmd;
                SqlDataReader rd;
                SqlConnection cn;
                try
                {

                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pPeriodo", Calculo.PeriodoObservado));

                                rd = cmd.ExecuteReader();
                                if (rd.HasRows)
                                {
                                    while (rd.Read())
                                    {
                                        //GUARDAMOS DATOS EN LISTA
                                        Listado.Add(new Persona() { PeriodoPersona = Convert.ToInt32(rd["anomes"]), Contrato = (string)rd["contrato"] });
                                        //    Listado.Add((string)rd["contrato"]);
                                    }
                                }

                                cmd.Dispose();                                
                                rd.Close();
                            }
                        }
                    }
              
                }
                catch (SqlException ex)
                {
                    XtraMessageBox.Show(ex.Message);
                }

            return Listado;
        }

        /*SIGUIENTE ELEMENTO*/
        public void Siguiente()
        {
            /*UNIVERSO CORRESPONDE A LA CANTIDAD DE REGISTROS*/
            if (Posicion >= 0 && Posicion < Universo)
            {
                if (Posicion == Universo - 1)
                {
                    //ESTAMOS EN EL ULTIMO ELEMENTO DEL UNIVERSO
                    //MOSTRAMOS DATa
                    Posicion = 0;
                }
                else
                {
                    //AUMENTAMOS POSICION
                    Posicion++;
                    //MOSTRAMOS DATA
                }
            }
        }

        /*ELEMENTO ANTERIOR*/
        public void Anterior()
        {
            if (Posicion >= 0 && Posicion < Universo)
            {
                if (Posicion == 0)
                {
                    //PRIMER ELEMENTO
                    //CARGO DATA Y RESETEO
                    Posicion = Universo - 1;
                }
                else
                {
                    //MOSTRAMOS ELEMENTO ANTERIOR
                    Posicion--;
                    //CARGAMOS DATA
                }
            }
        }

        /*PRIMER ELEMENTO*/
        public void Primer()
        {
            if (Posicion >= 0 && Posicion < Universo)
            {
                Posicion = 0;
            }
        }

        /*ULTIMO ELEMENTO*/
        public void Ultimo()
        {
            if (Posicion >= 0 && Posicion < Universo)
            {
                Posicion = Universo - 1;
            }
        }

        //RETORNA CADENA ORDEN
        private string GetcadenaOrden(string value)
        {
            string cad = "";

            switch (value.ToLower())
            {
                case "rut":
                    cad = " ORDER BY rut";
                    break;
                case "contrato":
                    cad = " ORDER BY contrato";
                    break;
                case "nombre":
                    cad = " ORDER BY nombre";
                    break;
                case "centro costo":
                    cad = " ORDER BY ccosto";
                    break;
                case "apellido":
                    cad = " ORDER BY apepaterno";
                    break;
                default:
                    cad = " ORDER BY nombre, apepaterno";
                    break;
            }

            return cad;
        }

        //RETORNA CADENA PARA GROUP BY
        private string GetcadenaAgrupa(string value)
        {
            string cad = "";

            switch (value.ToLower())
            {
                case "rut":
                    cad = ", rut";
                    break;
                case "contrato":
                    cad = "";
                    break;
                case "nombre":
                    cad = ", nombre";
                    break;
                case "centro costo":
                    cad = ", ccosto";
                    break;
                case "apellido":
                    cad = ", apepaterno";
                    break;
                default:
                    cad = ", nombre, apepaterno";
                    break;
            }

            return cad;
        }

        //PREGUNTAR SI ESTA ACTIVO LA BUSQUEDA DE TRABAJADORES ACTIVO
        private bool VisualizaElemento(string pDescripcion, DevExpress.XtraEditors.CheckedComboBoxEdit pCombo)
        {
            bool busca = false;

            CheckedListBoxItemCollection items = pCombo.Properties.Items;

            foreach (CheckedListBoxItem elemento in items)
            {
                if (elemento.CheckState == CheckState.Checked && elemento.Description.ToLower() == pDescripcion.ToLower())
                    busca = true;
            }

            return busca;
        }

        //SETEAR POSICION (PARA CUANDO SE REALIZA UNA BUSQUEDA)
        public void SetPosition(string pContrato)
        {
            //BUSCAR LA POSICION EN LISTA
            if (Listado.Count > 0)
            {
                for (int i = 0; i < Listado.Count; i++)
                {
                    if (Listado[i].Contrato.Equals(pContrato))
                    {
                        Posicion = i;
                        break;
                    }                        
                }
            }
        }

        //OBTENER LA ULTIMA POSICION VISUALIZADA
        public int GetPosition()
        {
            return Posicion;
        }

        //SETEAR ORDEN (EN EL CASO DE QUE SE SELECCIONE UN NUEVO ORDEN)
        public void SetOrden(string pOrden)
        {
            if(pOrden.Length > 0)
                this.Orden = pOrden;   
        }

        //SOLO PARA SABER SI CAMBIA ORDEN
        public void IsChangeOrder(string pOrder, CheckedComboBoxEdit pCombo)
        {
            if (pOrder.Length > 0)
                if (pOrder.ToLower() != this.Orden.ToLower())
                {
                    this.Orden = pOrder;
                    this.Listado = SetListado(this.Orden, this.Combo);
                    this.Universo = this.Listado.Count;
                    this.Combo = pCombo;
                    //Primer();
                }                    
        }

        public void CambiaVisualizacion(CheckedComboBoxEdit pCombo)
        {
            if (pCombo.Properties.Items.Count>0)
            {
                this.Combo = pCombo;
                this.Listado = SetListado(this.Orden, this.Combo);
                this.Universo = this.Listado.Count;
                Posicion = 0;
            }
        }

        //RECARGAR COMBO SI ES QUE CAMBIA LA VISUALIZACION
        public void SetCombo(CheckedComboBoxEdit pCombo)
        {
            this.Combo = pCombo;
        }
    }

    class Navegar
    {
        //UNIVERSO DONDE NAVEGAR
        public int Universo { get; set; }

        //CONTROLA LA POSICION 
        public int Posicion { get; set; } = 0;

        //CONSTRUCTOR
        public Navegar(int pUniverso)
        {
            this.Universo = pUniverso;
        }

        /*SIGUIENTE ELEMENTO*/
        public void Siguiente()
        {
            /*UNIVERSO CORRESPONDE A LA CANTIDAD DE REGISTROS*/
            if (Posicion >= 0 && Posicion < Universo)
            {
                if (Posicion == Universo - 1)
                {
                    //ESTAMOS EN EL ULTIMO ELEMENTO DEL UNIVERSO
                    //MOSTRAMOS DATa
                    Posicion = 0;
                }
                else
                {
                    //AUMENTAMOS POSICION
                    Posicion++;
                    //MOSTRAMOS DATA
                }
            }
        }

        /*ELEMENTO ANTERIOR*/
        public void Anterior()
        {
            if (Posicion >= 0 && Posicion < Universo)
            {
                if (Posicion == 0)
                {
                    //PRIMER ELEMENTO
                    //CARGO DATA Y RESETEO
                    Posicion = Universo - 1;
                }
                else
                {
                    //MOSTRAMOS ELEMENTO ANTERIOR
                    Posicion--;
                    //CARGAMOS DATA
                }
            }
        }

        /*PRIMER ELEMENTO*/
        public void Primer()
        {
            if (Posicion >= 0 && Posicion < Universo)
            {
                Posicion = 0;
            }
        }

        /*ULTIMO ELEMENTO*/
        public void Ultimo()
        {
            if (Posicion >= 0 && Posicion < Universo)
            {
                Posicion = Universo - 1;
            }
        }
    }

    //CLASE QUE HEREDE DE NAVEGAR
    class NavegaLiquidaciones: Navegar
    {  
        //BASAR EL CONSTRUCTOR DE CLASE DE ACUERDO A CONSTRUCTOR DE CLASE MADRE
        public NavegaLiquidaciones(int pUniverso) : base(pUniverso)
        {
             //..
        }
        //GENERAR LISTADO CON LIQUIDACIONES...
    }   

    /*SOLO PARA CARGAR GRILLA CON SUMATORIOS AGRUPADAS POR ITEM EN FORMULARIO CARGA MASIVA*/
    class ResumenItemMasivo
    {
        public string key { get; set; } = "";
        public double value { get; set; } = 0;        

        //ACTUALIZAR VALOR LISTA
        public static void Actualizar(List<ResumenItemMasivo> Lista, double pNewValue, string pElement)
        {
            if (Lista.Count>0)
            {
                foreach (ResumenItemMasivo item in Lista)
                {
                    if (item.key.ToLower() == pElement.ToLower())
                    {
                        item.value = item.value + pNewValue;
                        break;
                    }                        
                }
            }           
        }

        public static string getNameItem(string pValue)
        {
            string name = "";
            string sql = "SELECT descripcion FROM item WHERE coditem=@pCoditem";
            SqlCommand cmd;
     
            try
            {
                if (fnSistema.ConectarSQLServer())
                {
                    using (cmd = new SqlCommand(sql, fnSistema.sqlConn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pCoditem", pValue));
                        name = (string)cmd.ExecuteScalar();

                        if (name.Length == 0)
                            name = pValue;

                        cmd.Dispose();
                        fnSistema.sqlConn.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return name;
        }

        //EXISTE ELEMENTO EN LISTA
        public static bool ExisteItem(List<ResumenItemMasivo> listado, string pCod)
        {
            int count = 0;
            if (listado.Count > 0)
            {
                foreach (ResumenItemMasivo item in listado)
                {                    
                    if (item.key.ToLower() == pCod.ToLower())
                        count++;
                }

                if (count > 0)
                    return true;
            }
            return false;
        }
    }

    /*CLASE AFP*/
    class AseguradoraFondoPension
    {
        public int id { get; set; }
        public string nombre { get; set; }
        public string dato01 { get; set; }
        public string dato02 { get; set; }
        public double porcFondo { get; set; }
        public double porcOtro { get; set; }
        public double porcAdmin { get; set; }
        public string claveExp { get; set; }
        public string rut { get; set; }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM afp ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "afp");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    /*CLASE CARGO*/
    class Cargo
    {
        public int id { get; set; }
        public string nombre { get; set; }
        public string dato01 { get; set; }
        public string dato02 { get; set; }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM cargo ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "cargo");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    /*CLASE SALUD*/
    class Isapre
    {
        public int id { get; set; }
        public string nombre { get; set; }
        public string dato01 { get; set; }
        public string dato02 { get; set; }
        public string rut { get; set; }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM isapre ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "salud");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    /*AREA*/
    class Area
    {
        public int id { get; set; }
        public string nombre { get; set; }
        public string dato01 { get; set; }
        public string dato02 { get; set; }

        /// <summary>
        /// Genera informacion de Areas
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM area ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "area");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    class item
    {
        public string coditem { get; set; }
        public int periodo { get; set; }
        public string contrato { get; set; }
        public string rut { get; set; }
        public int numitem { get; set; }
        public string formula { get; set; }
        public int tipo { get; set; }
        public int orden { get; set; }
        public bool esclase { get; set; }
        public decimal valor { get; set; }
        public decimal valorcalculado { get; set; }
        public bool proporcional { get; set; }
        public bool permanente { get; set; }
    }

    class LiquidacionHistorico
    {
        public int Periodo { get; set; }
        public string Contrato { get; set; }

        public string Rut { get; set; }

        //SOLO PARA ENVIAR LAS LIQUIDACIONES
        public string Mail { get; set; }
    }

    /*SOLO PARA GENERAR UNA LISTA QUE CONTENGA RUTA Y RUT */
    class Paquete
    {
        //RUTA ARCHIVO
        public string Ruta { get; set; }
        //CORREO A QUIEN SE ENVIA
        public string Destinatario { get; set; }
        //RUT PERSONA
        public string Rut { get; set; }
    }

    class Operacion
    {

        /*
         * CASE: 
         *      FALSE   : NO SE CANCELA OPERACION 
         *      TRUE    : SE CANCELA OPERACION
         *      DEFAULT : OPERACION NO CANCELADA
         */
        private bool cancela;

        //CONSTRUCTOR
        public Operacion() {
            this.cancela = false;
        }

        public bool Cancela {
            get { return cancela; }
            set { cancela = value; }
        }

        /*SETEAR TEXTO Y TOOLTIP CONTROL*/
        public void SetButtonProperties(SimpleButton pButton, int pOption)
        {
            if (pOption == 1)
            {
                pButton.Text = "Nuevo";
                pButton.ToolTip = "Nuevo registro";
            }
            if (pOption == 2)
            {
                pButton.Text = "Cancelar";
                pButton.ToolTip = "Cancelar operacion";
            }
        }
    }

    /*SOLO PARA GENERAR UN LISTADO PARA VER QUE ITEM DE QUE CONTRATO SUPERA EL TOPE DEL 15%*/
    /*
     * 1- N° CONTRATO
     * 2- CODIGO ITEM
     * 3- N° ITEM
     * 4- VALOR
     * 5- NOMBRE COMPLETO DEL TRABAJADOR
     */
    class ItemTope
    {        
        public string Contrato { get; set; }
        public string Trabajador { get; set; }
        public int NumItem { get; set; }
        public string Coditem { get; set; }
        public double Valor { get; set; }
    }

    class Banco
    {
        public int id { get; set; }
        public string Nombre { get; set; }
        public string Dato01 { get; set; }
        public string Dato02 { get; set; }
        private string Contrato { get; set; }
        private int Periodo { get; set; }

        //CONSTRUCTOR
        public Banco(string pContrato, int pPeriodo)
        {
            Contrato = pContrato;
            Periodo = pPeriodo;
        }

        public Banco()
        {

        }

        /*OBTENER INFORMACION DEL BANCO ASOCIADO AL TRABAJADOR*/
        public void SetInfo()
        {
            string sql = "SELECT id, banco.nombre, dato01, dato02 FROM " +
                         "banco INNER JOIN trabajador ON trabajador.banco = banco.id " +
                         "WHERE contrato = @pContrato AND anomes = @pPeriodo";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            if (Contrato.Length > 0 && Periodo != 0)
            {
                try
                {
                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pContrato", Contrato));
                                cmd.Parameters.Add(new SqlParameter("@pPeriodo", Periodo));

                                rd = cmd.ExecuteReader();
                                if (rd.HasRows)
                                {
                                    while (rd.Read())
                                    {
                                        //SETEAMOS PROPIEDADES
                                        id = Convert.ToInt32(rd["id"]);
                                        Nombre = rd["nombre"].ToString();
                                        Dato01 = rd["dato01"].ToString();
                                        Dato02 = rd["dato02"].ToString();
                                    }
                                }
                            }
                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
                catch (SqlException ex)
                {
                 //ERROR SQL
                }
            }
        }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM banco ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "banco");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }
    
    class Ausentismo
    {        

        /// <summary>
        /// Constuctor
        /// </summary>
        public Ausentismo()
        { }
        
        /// <summary>
        /// Ingresa un nuevo ausentismo para un contrato específico
        /// </summary>
        /// <param name="pContrato">Contrato trabajador</param>
        /// <param name="pInicio">Fecha inicio de ausentismo</param>
        /// <param name="pTermino">Fecha termino de ausentismo</param>
        /// <param name="pMotivo">Motivo ausentismo</param>
        /// <param name="pDescripcion">Descripcion ausentismo</param>
        /// <param name="pRebSueldo">0 --> Rebaja Sueldo; 1 --> No Rebaja sueldo</param>
        /// <param name="pAnterior">Periodo Anterior</param>
        /// <param name="pDias">Cantidad de dias de ausentismo</param>
        /// <param name="pSiguiente">Periodo siguiente</param>
        public void Ingresar(string pContrato, DateTime pInicio, DateTime pTermino, int pMotivo, string pDescripcion,
            bool pRebSueldo, int pAnterior, int pDias, int pSiguiente)
        {
            string sql = "INSERT INTO ausentismo(contrato, fechaevento, fechaaplic, fecfin, fecfinapli, motivo, " +
                         "descripcion, rebsueldo, periodoanterior, diasanterior, periodosiguiente, diassiguiente," +
                         "numdias, folio) VALUES(@pContrato, @pFechaEvento, @pFechaAplic, @pFecfin, @pFecFinApli, " +
                         "@pMotivo, @pDescripcion, @pRebSueldo, @pAnterior, @pDiasAnterior, @pSiguiente, @pDiasSiguiente, " +
                         "@pNumdias, @pFolio)";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            //ULTIMO FOLIO INGRESADO
            int UltimoFolio = LastFolio(pContrato);

            //DIAS DEL MES Y DIAS RESTANTES
            Hashtable DataDias = DiasMes(pDias, pInicio, pTermino);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pFechaEvento", pInicio));
                            cmd.Parameters.Add(new SqlParameter("@pFechaAplic", pInicio));
                            cmd.Parameters.Add(new SqlParameter("@pFecfin", pTermino));
                            cmd.Parameters.Add(new SqlParameter("@pFecFinApli", pTermino));
                            cmd.Parameters.Add(new SqlParameter("@pMotivo", pMotivo));
                            cmd.Parameters.Add(new SqlParameter("@pDescripcion", pDescripcion));
                            cmd.Parameters.Add(new SqlParameter("@pRebSueldo", pAnterior));
                            cmd.Parameters.Add(new SqlParameter("@pAnterior", pAnterior));
                            cmd.Parameters.Add(new SqlParameter("@pDiasAnterior", DataDias["DiasDelMes"]));
                            cmd.Parameters.Add(new SqlParameter("@pSiguiente", pSiguiente));
                            cmd.Parameters.Add(new SqlParameter("@pDiasSiguiente", DataDias["DiasRestantes"]));
                            cmd.Parameters.Add(new SqlParameter("@pNumdias", pDias));
                            cmd.Parameters.Add(new SqlParameter("@pFolio", UltimoFolio + 1));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                XtraMessageBox.Show("Ingreso correcto");
                            }                         
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }                      
        }

        /// <summary>
        /// Retorna el último número de folio ingresado.
        /// </summary>
        /// <param name="pContrato">Numero de contrato trabajador.</param>
        private int LastFolio(string pContrato)
        {
            int Last = 0;
            string sql = "SELECT MAX(folio) FROM ausentismo WHERE contrato=@pContrato";
            SqlCommand cmd;
            SqlConnection cn;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETRO
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));

                            Last = Convert.ToInt32(cmd.ExecuteScalar());
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return Last;
        }

        /// <summary>
        /// Retorna un hashtable con el total de dias correspondiente al mes evaluado y el total de dias restantes.
        /// </summary>
        /// <param name="pDiasAusentismo">Total de dias de ausentismo</param>
        /// <param name="pFechaInicio">Representa la fecha en que comienza el ausentismo</param>
        /// <param name="pFechaTermino">Representa la fecha en que termina el ausentismo</param>
        public Hashtable DiasMes(int pDiasAusentismo, DateTime pFechaInicio, DateTime pFechaTermino)
        {
            //SOLO PARA OBTENER LA CANTIDAD DE DIAS QUE TIENE EL MES
            int DiasMes = 0, DiasdelMes = 0, diasRestantes = 0;
            DateTime UltimoDiaMes = DateTime.Now.Date;
            TimeSpan Diferencia;
            Hashtable DataDias = new Hashtable();

            if (pDiasAusentismo > 0)
            {
                DiasMes = fnSistema.DiasMes(pFechaInicio.Year, pFechaInicio.Month);
                //GENERA FECHA CON EL ULTIMO DIA DEL MES EN EL CUAL COMIENZA EL AUSENTISMO
                UltimoDiaMes = DateTime.Parse(pFechaInicio.Year + "-" + pFechaInicio.Month + "-" + DiasMes);

                //FECHA INICIO Y FECHA TERMINO TIENES MESES DISTINTOS
                if (pFechaInicio.Month != pFechaTermino.Month)
                {
                    //CONSIDERAMOS HASTA EL ULTIMO DIA DEL MES (FECHA INICIO)
                    Diferencia = UltimoDiaMes.Subtract(pFechaInicio);
                    DiasdelMes = (Diferencia.Days) + 1;
                    diasRestantes = pDiasAusentismo - DiasdelMes;
                }
                else
                {
                    //SON MESES IGUALES
                    //SI ES EL MISMO MES SOLO CALCULAMOS LA DIFERENCIA DE DIAS ENTRE LA FECHA DE EVENTO Y LA FECHA DE FIN
                    if (pFechaInicio == pFechaTermino)
                    {
                        DiasdelMes = pDiasAusentismo;
                        diasRestantes = 0;
                    }
                    else
                    {
                        TimeSpan dias = pFechaTermino.Subtract(pFechaInicio);
                        DiasdelMes = (dias.Days) + 1;                       
                        diasRestantes = pDiasAusentismo - DiasdelMes;
                    }
                }

                //GUARDAMOS DATOS EN HASHTABLE
                DataDias.Add("DiasDelMes", DiasdelMes);
                DataDias.Add("DiasRestantes", diasRestantes);
            }

            return DataDias;
        }

        /// <summary>
        /// Verifica que las fechas ingresadas, tengan el correcto sentido.
        /// </summary>
        /// <param name="pInicio">Fecha inicial.</param>
        /// <param name="pTermino">Fecha termino.</param>
        /// <returns></returns>
        private bool FechaCorrecta(DateTime pInicio, DateTime pTermino)
        {
            bool valida = false;

            //SI FECHA DE TERMINO ES MENOR A LA FECHA DE INICIO NO SON VALIDAS LAS FECHAS
            if (pTermino < pInicio)
                valida = false;
            else
                valida = true;

            return valida;
        }

    }

    /// <summary>
    /// Representa la tabla escolaridad
    /// </summary>
    class Escolaridad
    {
        /// <summary>
        /// Permite ingresar una nueva escolaridad.
        /// </summary>
        /// <param name="pCodigo">Codigo que identifica al registro.</param>
        /// <param name="pDesc">Escolaridad.</param>
        /// <returns></returns>
        public bool NuevaEscolaridad(TextEdit pCodigo, TextEdit pDesc)
        {
            string sql = "INSERT INTO escolaridad(codesc, descesc) VALUES(@pCod, @pDesc)";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool Registrado = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", Convert.ToInt32(pCodigo.Text)));
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc.Text));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                                Registrado = true;

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }

            return Registrado;
        }

        /// <summary>
        /// Permite actualizar una escolaridad.
        /// </summary>
        /// <param name="pCodigo">Codigo registro.</param>
        /// <param name="pDesc">Nueva descripcion.</param>
        /// <returns>Retorna un booleano que indica si se actualizó o no el registro.</returns>
        public bool ActualizarEscolaridad(int pCodigo, TextEdit pDesc)
        {
            string sql = "UPDATE escolaridad SET descesc=@pDesc WHERE codesc=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool Actualizado = false;

            Hashtable data = PrecargaData(pCodigo);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc.Text));
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCodigo));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Actualizado = true;
                                RegEvento(data, pDesc.Text);
                            }                                

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return Actualizado;
        }

        /// <summary>
        /// Permite eliminar un registro.
        /// </summary>
        /// <param name="pCodigo">Codigo de registro.</param>
        public bool EliminaEscolaridad(int pCodigo)
        {
            string sql = "DELETE FROM escolaridad WHERE codesc=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool Eliminado = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCodigo));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Eliminado = true;                               
                            }                               

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return Eliminado;
        }

        /// <summary>
        /// Indica si existe o no un registro en tabla escolaridad.
        /// </summary>
        /// <param name="pCodigo">Código asociado al registro.</param>
        public bool ExisteCodigo(int pCodigo)
        {
            string sql = "SELECT count(*) FROM escolaridad WHERE codesc=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            bool existe = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCodigo));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    existe = true;
                            }
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return existe;
        }     

        /// <summary>
        /// Indica si hay cambios sin guardar en alguna caja de texto del formulario.
        /// </summary>
        /// <param name="pGrid">Grilla con datos.</param>
        /// <param name="pCod">Codigo caja de texto</param>
        /// <param name="pDesc">caja de texto de descripcion.</param>
        /// <returns></returns>
        public bool CambiosSinGuardar(DevExpress.XtraGrid.Views.Grid.GridView pGrid, TextEdit pCod, TextEdit pDesc)
        {
            string CodDb = "", descDb = "";
            bool cambia = false;
            if (pGrid.RowCount > 0)
            {
                CodDb = Convert.ToInt32(pGrid.GetFocusedDataRow()["codesc"]) + "";
                descDb = pGrid.GetFocusedDataRow()["descesc"].ToString();

                if (pCod.Text != CodDb) { cambia = true; }
                if (pDesc.Text != descDb) { cambia = true; }
            }

            return cambia;
        }

        /// <summary>
        /// Nos indica si un item de la tabla está asociado a algun trabajador.
        /// </summary>
        /// <param name="pCod">Codigo asociado a registro.</param>
        public bool EscolarEnUso(int pCod)
        {
            string sql = "SELECT count(*) FROM trabajador WHERE escolaridad=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool usado = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                count = Convert.ToInt32(data);
                                if (count > 0)
                                    usado = true;
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return usado;
        }
        
        #region "PARA LOG"
        /// <summary>
        /// Extrae informacion de unh registro.
        /// </summary>
        /// <param name="pCod">Codigo asociado a registro.</param>
        /// <returns></returns>
        public Hashtable PrecargaData(int pCod)
        {
            Hashtable data = new Hashtable();
            string sql = "SELECT codesc, descesc FROM escolaridad WHERE cod=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //LLENAMOS HASHTABLE
                                    data.Add("descesc", rd["descesc"].ToString());
                                }
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR..
            }

            return data;
        }
        /// <summary>
        /// Registra nueva evento si hubieron cambios en registro.
        /// </summary>
        /// <param name="pData">Informacion registro.</param>
        /// <param name="pNuevaDesc">Nuevo valor a ingresar.</param>
        private void RegEvento(Hashtable pData, string pNuevaDesc)
        {
            if (pData.Count > 0)
            {
                if (pData["descesc"].ToString() != pNuevaDesc)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE ACTUALIZA DESCRIPCION ", "ESCOLARIDAD", pData["descesc"].ToString(), pNuevaDesc, "MODIFICAR");
                    log.Log();
                }
            }
        }

        #endregion

        /// <summary>
        /// Devuelve un datatable con los datos.
        /// </summary>
        public DataTable Getinfo()
        {
            string sql = "SELECT codesc as id, descesc as descripcion from escolaridad ORDER BY codesc";
            SqlCommand cmd;
            SqlConnection cn;
            DataTable pTabla = new DataTable();
            SqlDataAdapter ad = new SqlDataAdapter();
            DataSet ds = new DataSet();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "data");

                            if (ds.Tables[0].Rows.Count > 0)
                                pTabla = ds.Tables[0];

                            cmd.Dispose();
                            ad.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                Console.WriteLine(ex.Message);
            }

            return pTabla;
        }

        public void OpcionesGrilla(DevExpress.XtraGrid.Views.Grid.GridView pGrid)
        {
            if (pGrid.RowCount > 0)
            {
                pGrid.Columns[0].Caption = "Codigo";
                pGrid.Columns[0].Width = 20;
                pGrid.Columns[1].Caption = "Descripcion";
                pGrid.Columns[1].Width = 100;
                pGrid.Columns[1].AppearanceCell.FontStyleDelta = System.Drawing.FontStyle.Bold;
            }
           
        }
    }

    /// <summary>
    /// Representa a la tabla tipo de cuenta
    /// </summary>
    class TipoCuenta
    {
        /// <summary>
        /// Permite ingresar un nuevo tipo de cuenta.
        /// </summary>
        /// <param name="pNombre">Nombre cuenta</param>
        /// <returns></returns>
        public bool NuevaCuenta(TextEdit pNombre, TextEdit pDato01, TextEdit pDato02)
        {
            string sql = "INSERT INTO tipocuenta(nombre, dato01, dato02) VALUES(@pNombre, @pDato1, @pDato2)";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool correcto = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS                            
                            cmd.Parameters.Add(new SqlParameter("@pNombre", pNombre.Text));
                            cmd.Parameters.Add(new SqlParameter("@pDato1", pDato01.Text));
                            cmd.Parameters.Add(new SqlParameter("@pDato2", pDato02.Text));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;

                                logRegistro log = new logRegistro(User.getUser(), "SE INGRESA NUEVO TIPO DE CUENTA " + pNombre.Text, "TIPOCUENTA", "", pNombre.Text, "INGRESAR");
                                log.Log();
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return correcto;
        }

        /// <summary>
        /// Permite modificar un tipo de cuenta
        /// </summary>
        /// <param name="pId">Codigo registro.</param>
        /// <param name="pNombre">Nuevo nombre registro</param>
        /// <returns></returns>
        public bool ModificarCuenta(int pId, TextEdit pNombre, TextEdit pDato01, TextEdit pDato02)
        {
            string sql = "UPDATE tipocuenta SET nombre=@pNombre, dato01=@pDato1, dato02=@pDato2 WHERE id=@pId";
            SqlCommand cmd;
            SqlConnection cnd;
            int count = 0;
            bool correcto = false;

            Hashtable data = new Hashtable();
            data = PrecargaData(pId);

            try
            {
                cnd = fnSistema.OpenConnection();
                if (cnd != null)
                {
                    using (cnd)
                    {
                        using (cmd = new SqlCommand(sql, cnd))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));
                            cmd.Parameters.Add(new SqlParameter("@pNombre", pNombre.Text));
                            cmd.Parameters.Add(new SqlParameter("@pDato1", pDato01.Text));
                            cmd.Parameters.Add(new SqlParameter("@pDato2", pDato02.Text));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;

                                //REGISTRAMOS EN LOG.
                                RegEvento(data, pNombre.Text, pDato01.Text, pDato02.Text);
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return correcto;
           
        }
        /// <summary>
        /// Permite eliminar un tipo de cuenta.
        /// </summary>
        /// <param name="pId">Codigo registro.</param>
        /// <param name="pNombre">Nombre tipo de cuenta.</param>
        /// <returns></returns>
        public bool EliminarCuenta(int pId, string pNombre)
        {
            string sql = "DELETE FROM tipocuenta WHERE id=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool correcto = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;

                                logRegistro log = new logRegistro(User.getUser(), "SE ELIMINA TIPO DE CUENTA CON CODIGO :" + pId, "TIPOCUENTA", pNombre, "", "ELIMINAR");
                                log.Log();
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return correcto;
        }
        /// <summary>
        /// Nos indica si existe o no un registro.
        /// </summary>
        /// <param name="pId">Codigo de registro a consultar.</param>
        /// <returns></returns>
        public bool ExisteCodigo(int pId)
        {
            string sql = "SELECT count(*) FROM tipocuenta WHERE id=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool existe = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                count = Convert.ToInt32(data);
                                if (count > 0)
                                    existe = true;
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existe;
        }
        /// <summary>
        /// Nos indica si un tipo de cueta esta asociada a algún trabajador.
        /// </summary>
        /// <param name="pId"></param>
        /// <returns></returns>
        public bool RegistroUsado(int pId)
        {
            string sql = "SELECT count(*) FROM trabajador WHERE tipocuenta=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool usado = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                count = Convert.ToInt32(data);
                                if (count > 0)
                                    usado = true;
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return usado;
        }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM tipocuenta ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "TipoCuenta");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }

        #region "LOG EVENTOS"
        /// <summary>
        /// Retorna un hashtable con informacion de un registro.
        /// </summary>
        /// <param name="pId">Codigo que se desea consultar.</param>
        /// <returns></returns>
        private Hashtable PrecargaData(int pId)
        {
            Hashtable data = new Hashtable();
            string sql = "SELECT id, nombre, dato01, dato02 FROM tipocuenta WHERE id=@pId";
            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    data.Add("nombre", rd["nombre"].ToString());
                                    data.Add("dato1", rd["dato01"].ToString());
                                    data.Add("dato2", rd["dato02"].ToString());
                                }
                            }
                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR..
            }

            return data;
        }
        /// <summary>
        /// Registra en tabla log algun evento de cambio.
        /// </summary>
        /// <param name="pData">Data del registro.</param>
        /// <param name="pNuevoNombre">nueva cadena modificada.</param>
        private void RegEvento(Hashtable pData, string pNuevoNombre, string pDato1, string pDato2)
        {
            if (pData.Count > 0)
            {
                if (pData["nombre"].ToString() != pNuevoNombre)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA TIPO CUENTA " + pData["nombre"], "TIPOCUENTA", pData["nombre"].ToString(), pNuevoNombre, "MODIFICAR");
                    log.Log();
                }
                if (pData["dato1"].ToString() != pDato1)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA DATO01 TIPO CUENTA " + pData["nombre"], "TIPOCUENTA", pData["dato1"].ToString(), pDato1, "MODIFICAR");
                    log.Log();
                }
                if (pData["dato2"].ToString() != pDato2)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA DATO02 TIPO CUENTA " + pData["nombre"], "TIPOCUENTA", pData["dato2"].ToString(), pDato2, "MODIFICAR");
                    log.Log();
                }
            }
        }

        #endregion
    }

    /// <summary>
    /// Representa a la tabla cajaprevision
    /// </summary>
    class CajaPrevision
    {
        public int id { get; set; }
        /// <summary>
        /// Nombre caja prevision
        /// </summary>
        public string Nombre { get; set; }
        public string dato01 { get; set; }
        public string dato02 { get; set; }
        /// <summary>
        /// Porcentaje de pension.
        /// </summary>
        public double porcPension { get; set; }
        /// <summary>
        /// Porcentaje salud
        /// </summary>
        public double porcSalud { get; set; }
        /// <summary>
        /// Rut entidad
        /// </summary>
        public string rutCaja { get; set; }
        public double porcOtro  { get; set; }
        public string ClaveEx { get; set; }
        /// <summary>
        /// Porcentaje accidente del trabajo.
        /// </summary>
        public double PorcAccidente { get; set; }
        /// <summary>
        /// Suma de PorcPension + salud + porcAccidente
        /// <para>Salud es 0 si la persona está afiliada a isapre</para>
        /// <para>Porcentaje accdidente es 0 si la persona está afiliada a mutual</para>
        /// 
        /// </summary>
        public double TotalCotizacion { get; set; }

        /// <summary>
        /// Setea todas las propiedades de la caja de prevision asociada al trabajador.
        /// </summary>
        /// <param name="pContrato"></param>
        /// <param name="pPerido"></param>
        public void SetInfo(string pContrato, int pPerido)
        {
            string sql = "SELECT cajaprevision.id, cajaPrevision.nombre, cajaprevision.dato01," +
                         "cajaprevision.dato02, porcPension, " +
                         "porcSalud, cajaprevision.rut, " +
                         "porcOtro, claveExp, porcAccidente, trabajador.salud, " +
                         "(SELECT nombremut FROM empresa) as mutual " +
                         "FROM trabajador " +
                         " INNER JOIN cajaprevision ON cajaprevision.id = trabajador.cajaPrevision " +
                         " INNER JOIN isapre ON isapre.id = trabajador.salud " +
                         "WHERE contrato = @pContrato AND anomes = @pPeriodo";            

            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            int codSalud = 0, codMutual = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pContrato", pContrato));
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPerido));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //SETEAMOS PROPIEDADES
                                    id = Convert.ToInt32(rd["id"]);
                                    Nombre = (string)rd["nombre"];
                                    dato01 = (string)rd["dato01"];
                                    dato02 = (string)rd["dato02"];

                                    //Codigo salud
                                    codSalud = Convert.ToInt32(rd["salud"]);
                                    //Codigo mutual
                                    codMutual = Convert.ToInt32(rd["mutual"]);

                                    porcPension = (Convert.ToDouble(rd["porcPension"]))/100;
                                    //Si la persona esta en isapre el porcentaje de salud es 0
                                    //1 --> FONASA                                    
                                    porcSalud = codSalud == 1?  (Convert.ToDouble(rd["porcSalud"]))/100 : 0;
                                    rutCaja = (string)rd["rut"];
                                    porcOtro = Convert.ToDouble(rd["porcotro"]);
                                    ClaveEx = (string)rd["claveexp"];
                                    //Si la persona está en una mutual este porcentaje es 0
                                    // 1 --> SIN MUTUAL
                                    PorcAccidente = codMutual == 1? (Convert.ToDouble(rd["porcAccidente"]))/100 : 0;

                                    //Total Porcentaje.
                                    TotalCotizacion = porcPension + porcSalud + PorcAccidente;
                                }
                            }
                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR..
            }
        }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM cajaprevision ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "caja");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    /// <summary>
    /// Representa la tabla horario.
    /// </summary>
    class Horario
    {
        /// <summary>
        /// Ingresa un nuevo horario.
        /// </summary>
        /// <param name="pId">Codigo registro.</param>
        /// <param name="pDesc">Descripcion registro.</param>
        /// <returns></returns>
        public bool NuevoHorario(TextEdit pId, TextEdit pDesc, MemoEdit pMemo)
        {
            string sql = "INSERT INTO horario (id, deschor, detalle) VALUES(@pId, @pDesc, @pDetalle)";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool correcto = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", Convert.ToInt32(pId.Text)));
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc.Text));                            
                            cmd.Parameters.Add(new SqlParameter("@pDetalle", pMemo.Text));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;
                                logRegistro log = new logRegistro(User.getUser(), "SE INGRESA NUEVO HORARIO CON CODIGO " + Convert.ToInt32(pId.Text), "HORARIO", "", pDesc.Text, "INGRESAR");
                                log.Log();
                            }                                

                            cmd.Dispose();
                        }
                    }
                }

            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return correcto;
        }
        /// <summary>
        /// Actualiza un horario.
        /// </summary>
        /// <param name="pId">Codigo registro.</param>
        /// <param name="pDesc">Nueva descripcion horario.</param>
        /// <returns></returns>
        public bool ActualizaHorario(int pId, TextEdit pDesc, MemoEdit pMemo)
        {
            string sql = "UPDATE horario SET deschor = @pDesc, detalle=@pDetalle WHERE id=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool correcto = false;

            Hashtable data = new Hashtable();
            data = PrecargaData(pId);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc.Text));
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));                            
                            cmd.Parameters.Add(new SqlParameter("@pDetalle", pMemo.Text));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;
                                RegEventos(data, pDesc.Text, pMemo.Text);
                            }                                

                            cmd.Dispose();
                        }
                    }
                }
                    
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return correcto;            
        }
        /// <summary>
        /// Permite eliminar un registro.
        /// </summary>
        /// <param name="pId"></param>
        /// <param name="pDesc">Descripcion registro.</param>
        /// <returns></returns>
        public bool EliminarHorario(int pId, string pDesc)
        {
            string sql = "DELETE from Horario WHERE id=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool correcto = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;

                                logRegistro log = new logRegistro(User.getUser(), "SE ELIMINA HORARIO CODIGO " + pId, "HORARIO", pDesc, "", "ELIMINAR");
                                log.Log();
                            }                                

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return correcto;

        }
        /// <summary>
        /// Indica si existe un registro o no en tabla horario.
        /// </summary>
        /// <param name="pId">Codigo registro.</param>
        public bool ExisteRegistro(int pId)
        {
            string sql = "SELECT count(*) FROM horario WHERE id=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool existe = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                count = Convert.ToInt32(data);
                                if (count > 0)
                                    existe = true;
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message);
            }

            return existe;           
        }
        /// <summary>
        /// Indica si un horario está asociado a un trabajador.
        /// </summary>
        /// <param name="pId"></param>
        /// <returns></returns>
        public bool RegistroEnUso(int pId)
        {
            string sql = "SELECT count(*) FROM trabajador where horario=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool usado = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                count = Convert.ToInt32(data);
                                if (count > 0)
                                    usado = true;
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }

            return usado;
        }

        #region "LOG EVENTOS"
        /// <summary>
        /// Precarga los datoa del registro en observaci´´on.
        /// </summary>
        /// <param name="pId">Codigo asociado al registro.</param>
        /// <returns></returns>
        private Hashtable PrecargaData(int pId)
        {
            Hashtable Data = new Hashtable();
            string sql = "SELECT id, deschor, detalle FROM horario WHERE id = @pId";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //LLENAMOS DATA
                                    Data.Add("id", Convert.ToInt32(rd["id"]));
                                    Data.Add("deschor", (string)rd["deschor"]);                         
                                    Data.Add("detalle", (string)rd["detalle"]);

                                }
                            }

                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
            }

            return Data;
        }
        /// <summary>
        /// Registra un nuevo evento en tabla log.
        /// </summary>
        /// <param name="pData">HashTable con información de registro.</param>
        /// <param name="pNuevaDesc">Nueva información para campo.</param>
        private void RegEventos(Hashtable pData, string pNuevaDesc, string pDetalle)
        {
            if (pData.Count > 0)
            {
                if ((string)pData["deschor"] != pNuevaDesc)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA DESCRIPCIÓN HORARIO codigo " + Convert.ToInt32(pData["id"]), "HORARIO", pData["deschor"].ToString(), pNuevaDesc, "MODIFICAR");
                    log.Log();
                }
                
                if ((string)pData["detalle"] != pDetalle)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA CAMPO <<VALORG>> HORARIO codigo " + Convert.ToInt32(pData["id"]), "HORARIO", pData["detalle"].ToString(), pDetalle, "MODIFICAR");
                    log.Log();
                }


            }
        }
        #endregion

        /// <summary>
        /// Retorna un datatable
        /// </summary>
        public DataTable GetInfo()
        {
            string sql = "SELECT id, deschor as descripcion, detale FROM horario ORDER BY id";
            DataTable pTabla = new DataTable();
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "data");

                            if (ds.Tables[0].Rows.Count > 0)
                                pTabla = ds.Tables[0];

                            ad.Dispose();
                            cmd.Dispose();
                            ds.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return pTabla;
        }
    }

    /// <summary>
    /// Clase para manipular indices mensuales de cálculo.
    /// </summary>
    class IndiceMensual
    {
        /// <summary>
        /// Valor uf en pesos ultimo dia mes.
        /// </summary>
        public double Uf { get; set; }
        /// <summary>
        /// Valor uf mes anterior ultimo dia mes.
        /// </summary>
        public double UfMesAnterior { get; set; }
        /// <summary>
        /// Valor ingreso minimo en pesos.
        /// </summary>
        public double IngresoMinimo { get; set; }
        /// <summary>
        /// Valor utm en pesos.
        /// </summary>
        public double Utm { get; set; }
        /// <summary>
        /// Porcentaje seguro de invalidez
        /// </summary>
        public double Sis { get; set; }
        /// <summary>
        /// Porcentaje tope afp en UF
        /// </summary>
        public double TopeAfp { get; set; }
        /// <summary>
        /// Tope afp en pesos
        /// </summary>
        public double TopeAfpPesos { get; set; }
        /// <summary>
        /// Tope seguro de cesantia en uf
        /// </summary>
        public double TopeSec { get; set; }
        /// <summary>
        /// Tope seguro de cesantia en pesos
        /// </summary>
        public double TopeSecPesos { get; set; }
        /// <summary>
        /// Porcentaje sanna.
        /// </summary>
        public double Sanna { get; set; }
        /// <summary>
        /// Tope imponible ips en UF
        /// </summary>
        public double TopeIps { get; set; }
        /// <summary>
        /// Tope imponible ips en pesos
        /// </summary>
        public double TopeIpsPesos { get; set; }
        /// <summary>
        /// Tope Ahorro previsional voluntario.
        /// </summary>
        public double TopeMesApv { get; set; }
        /// <summary>
        /// Tope en pesos ahorro previsional voluntario.
        /// </summary>
        public double TopeMesApvPesos { get; set; }

        /// <summary>
        /// Permite obtener todos los indices de un determinado mes.
        /// </summary>
        public void SetInfoMes(int pPeriodo)
        {
            string sql = "SELECT anomes, ISNULL(uf, 0) as uf, ISNULL(ufMesAnt, 0) as ufMesAnt, " +
                        "ISNULL(ingresominimo, 0) as ingresominimo, ISNULL(utm, 0) as utm, ISNULL(sis, 0) as sis, " +
                        "ISNULL(topeAfp, 0) as topeAfp, " +
                         "topeafp * uf as TopeAfpPesos, ISNULL(topesec, 0) as topesec, topeSec* uf as topeSecPesos, " +
                         "(sanna/100) as sanna, ISNULL(topeips, 0) as topeips, topeips* uf as TopeIpsPesos, ISNULL(topeMesApv, 0) as topeMesApv,  " +
                         "topeMesApv* uf as TopeMesApvPesos " +
                         "FROM valoresMes " +
                         "WHERE anomes = @pPeriodo";

            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pPeriodo", pPeriodo));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //SETEAMOS PROPPIEDADES
                                    Uf = Math.Round(Convert.ToDouble(rd["uf"]), 2);
                                    UfMesAnterior = Math.Round(Convert.ToDouble(rd["ufMesAnt"]), 2);
                                    IngresoMinimo = Convert.ToDouble(rd["ingresominimo"]);
                                    Utm = Convert.ToDouble(rd["utm"]);
                                    Sis = Math.Round(Convert.ToDouble(rd["sis"]), 2);
                                    TopeAfp = Math.Round(Convert.ToDouble(rd["topeAfp"]), 2);
                                    TopeAfpPesos = Math.Round(Convert.ToDouble(rd["topeAfppesos"]), 2);
                                    TopeSec = Math.Round(Convert.ToDouble(rd["topeSec"]), 2);
                                    TopeSecPesos = Math.Round(Convert.ToDouble(rd["topeSecPesos"]), 2);
                                    Sanna = Math.Round(Convert.ToDouble(rd["sanna"]), 4);
                                    TopeIps = Math.Round(Convert.ToDouble(rd["topeips"]), 2);
                                    TopeIpsPesos = Math.Round(Convert.ToDouble(rd["topeIpsPesos"]), 2);
                                    TopeMesApv = Math.Round(Convert.ToDouble(rd["topeMesApv"]), 2);
                                    TopeMesApvPesos = Math.Round(Convert.ToDouble(rd["topeMesApvPesos"]), 2);
                                }
                            }
                        }
                        cmd.Dispose();
                        rd.Close();
                    }
                }                
            }
            catch (SqlException ex)
            {
                //XtraMessageBox.Show(ex.Message);
            }
        }
    }

    class Nacionalidad
    {
        /// <summary>
        /// Codigo interno registro.
        /// </summary>
        public int Id { get; set; }
        /// <summary>
        /// Nombre registro.
        /// </summary>
        public string Desc { get; set; }
        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM nacion ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "nacion");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return dt;
        }
        
    }

    class EstadoCivil
    {
        /// <summary>
        /// Codigo interno registro.
        /// </summary>
        public int Id { get; set; }
        /// <summary>
        /// Nombre registro.
        /// </summary>
        public string Desc { get; set; }
        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM ecivil ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "ecivil");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }

    }

    class Ciudad
    {
        /// <summary>
        /// Codigo interno registro.
        /// </summary>
        public int Id { get; set; }
        /// <summary>
        /// Nombre registro.
        /// </summary>
        public string Desc { get; set; }
        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT idCiudad, descCiudad FROM ciudad ORDER BY region";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "ciudad");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }

    }

    class CentroCosto
    {
        public int Id { get; set; }
        public string Desc { get; set; }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM ccosto ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "ccosto");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    class Regimen
    {
        public int Id { get; set; }
        public string Desc { get; set; }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM regimen ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "regimen");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    class FormaPago
    {
        public int Id { get; set; }
        public string Desc { get; set; }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT id, nombre FROM Formapago ORDER BY id";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "FormaPago");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    class ClaseRemuneracion
    {
        public int Id { get; set; }
        public string Desc { get; set; }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();          
            string sql = "SELECT codClase, descClase FROM clase ORDER BY codClase";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "ClaseRemuneracion");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    class Sucursal
    {
        public int Id { get; set; }
        public string Desc { get; set; }

        /// <summary>
        /// Genera informacion de nacionalidades
        /// </summary>
        /// <returns></returns>
        public DataTable GetInfo()
        {
            DataTable dt = new DataTable();
            string sql = "SELECT codSucursal, descSucursal FROM Sucursal ORDER BY codSucursal";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "Sucursal");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                dt = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return dt;
        }
    }

    /// <summary>
    /// Representa a la tabla PARFOR
    /// </summary>
    class ParametroFormula
    {
        /// <summary>
        /// Codigo parametro
        /// </summary>
        public string codPar { get; set; }
        /// <summary>
        /// Descripcion parametro
        /// </summary>
        public string descPar { get; set; }
        /// <summary>
        /// Valor parametro
        /// </summary>
        public double valPar { get; set; }

        /// <summary>
        /// Permite actualzar los datos de un parametro.
        /// </summary>
        /// <param name="pCod">Codigo parmetro.</param>
        /// <param name="pDesc">Descripcion parametro.</param>
        /// <param name="pVal">Valor parametro.</param>
        public void Actualizar(string pCod, string pDesc, double pVal)
        {
            string sql = "UPDATE parfor SET descPar=@pDesc, valPar=@pVal WHERE codPar=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            Hashtable Data = new Hashtable();
            Data = PrecargaData(pCod);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc));
                            cmd.Parameters.Add(new SqlParameter("@pVal", pVal));
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                XtraMessageBox.Show("Parametro actualizado correctamente", "Informacion", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                //Escribir informacion en log
                                EscribeEvento(Data, pDesc, pVal, pCod);
                            }
                            else
                            {
                                XtraMessageBox.Show("No se pudo actualizar parametro", "Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }
        }

        /// <summary>
        /// Nos indica si existe o no un parametro.
        /// </summary>
        /// <param name="pCod">Codigo parametro</param>
        public bool ExisteParametro(string pCod)
        {
            string sql = "SELECT count(*) FROM parfor WHERE codPar=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            bool existe = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETRO
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    existe = true;
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
               //ERROR...
            }

            return existe;
        }

        /// <summary>
        /// Genera un listado de parametros existentes.
        /// </summary>
        /// <returns></returns>
        public List<ParametroFormula> GetListado()
        {
            List<ParametroFormula> Listado = new List<ParametroFormula>();
            string sql = "SELECT codPar, descPar, valPar FROM parfor";

            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Listado.Add(new ParametroFormula()
                                    {
                                        codPar = (string)rd["codPar"],
                                        descPar = (string)rd["descPar"],
                                        valPar = Convert.ToDouble(rd["valPar"])
                                    });
                                }                     
                            }

                            cmd.Dispose();                            
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
               //ERROR...
            }

            return Listado;
        }
        /// <summary>
        /// Obtiene el valor de un parametro.
        /// </summary>
        /// <param name="pCod">Codigo parametro consultado.</param>
        public double GetValue(string pCod)
        {
            string sql = "SELECT valPar FROM parfor WHERE codPar=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            double Valor = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                Valor = Convert.ToDouble(data);
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...  
            }

            return Valor;
        }

        #region "LOG"
        /// <summary>
        /// Obtiene informacion relacionada a un parametro.
        /// </summary>
        /// <param name="pCod">Codigo parametro a consultar.</param>
        /// <returns></returns>
        private Hashtable PrecargaData(string pCod)
        {
            string sql = "SELECT descPar, valPar FROM parfor WHERE codPar=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            Hashtable Data = new Hashtable();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETRO
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Data.Add("descpar", (string)rd["descPar"]);
                                    Data.Add("valpar", Convert.ToDouble(rd["valPar"]));
                                }                               
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return Data;
        }
        /// <summary>
        /// Escribe informacion en log.
        /// </summary>
        /// <param name="pData">HashTable con informacion del parametro.</param>
        /// <param name="pDesc">Nueva descripcion del parametro.</param>
        /// <param name="pVal">Nuevo valor del parametro.</param>
        /// <param name="pCod">Codigo del parametro.</param>
        private void EscribeEvento(Hashtable pData, string pDesc, double pVal, string pCod)
        {
            if (pData.Count > 0)
            {
                if ((string)pData["descpar"] != pDesc)
                {
                    logRegistro log = new logRegistro(User.getUser(), $"SE MODIFICA DESCRIPCION PARAMETRO {pCod}", "PARFOR", pData["descpar"].ToString(), pDesc, "MODIFICAR");
                    log.Log();
                }
                if (Convert.ToDouble(pData["valpar"]) != pVal)
                {
                    logRegistro log = new logRegistro(User.getUser(), $"SE MODIFICA VALOR PARAMETRO {pCod}", "PARFOR", pData["valpar"].ToString(), pVal.ToString(), "MODIFICAR");
                    log.Log();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Representa la tabla sindicato
    /// </summary>
    class Sindicato
    {
        public int id { get; set; }
        public string DescSin { get; set; }

        /// <summary>
        /// Ingresa un nuevo registro
        /// </summary>
        /// <param name="pId">Codigo registro.</param>
        /// <param name="pDesc">Nombre registro.</param>
        public void Nuevo(int pId, string pDesc)
        {
            string sql = "INSERT INTO sindicato(id, descSin) VALUES(@pId, @pDesc)";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                XtraMessageBox.Show("Registro guardado correctamente", "información", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                logRegistro log = new logRegistro(User.getUser(), "SE INGRESA NUEVO SINDICATO " + pDesc, "SINDICATO", "", pDesc, "INGRESAR");
                                log.Log();
                            }
                            else
                            {
                                XtraMessageBox.Show("No se pudo realizar registro", "Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }
        }

        /// <summary>
        /// Actualiza un registro
        /// </summary>
        /// <param name="pId">Codigo registro.</param>
        /// <param name="pDesc">Nombre registro.</param>
        public void Actualizar(int pId, string pDesc)
        {
            string sql = "UPDATE sindicato SET descSin=@pDesc WHERE id=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            Hashtable Data = new Hashtable();
            Data = Precarga(pId);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                XtraMessageBox.Show("Registro Actualizado correctamente", "información", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                //Escribirmos en Log.
                                WriteLog(pId, pDesc, Data);
                            }
                            else
                            {
                                XtraMessageBox.Show("No se pudo actualizar registro", "Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }
        }

        /// <summary>
        /// Elimina un registro.
        /// </summary>
        /// <param name="pId">Codigo registro.</param>
        public void Eliminar(int pId)
        {
            string sql = "DELETE FROM sindicato WHERE id=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                XtraMessageBox.Show("Registro eliminado correctamente", "Información", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                logRegistro log = new logRegistro(User.getUser(), "SE ELIMINA SINDICATO CODIGO " + pId, "SINDICATO", pId.ToString(), "", "ELIMINAR");
                                log.Log();
                            }
                            else
                            {
                                XtraMessageBox.Show("Registro no se pudo eliminar", "Error", MessageBoxButtons.OK, MessageBoxIcon.Stop);
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }
        }

        /// <summary>
        /// Nos indica si existe un registro o no.
        /// </summary>
        /// <param name="pId">Codigo registro consultado.</param>
        /// <returns></returns>
        public bool Existe(int pId)
        {
            bool existe = false;
            string sql = "SELECT count(*) FROM sindicato WHERE id=@pId";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    existe = true;
                            }
                        }

                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return existe;
        }
        /// <summary>
        /// Indica si un registro está usado por un trabajador.
        /// </summary>
        /// <returns></returns>
        public bool RegistroUsado(int pId)
        {
            bool usado = false;
            string sql = "SELECT count(*) FROM trabajador WHERE sindicado=@pId";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cmd = new SqlCommand(sql, cn))
                    {
                        //PARAMETROS
                        cmd.Parameters.Add(new SqlParameter("@pId", pId));

                        object data = cmd.ExecuteScalar();
                        if (data != null)
                        {
                            if (Convert.ToInt32(data) > 0)
                                usado = true;
                        }
                    }
                    cmd.Dispose();
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return usado;
        }

        /// <summary>
        /// Dataset con todos los registros de la tabla.
        /// </summary>
        /// <returns></returns>
        public DataSet GetDataSource()
        {
            string sql = "SELECT id, descsin FROM sindicato ORDER BY id";
            SqlCommand cmd;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "data");

                            ad.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return ds;
        }        

        #region "LOG"
        /// <summary>
        /// Obtiene informacion desde base de datos.
        /// </summary>
        /// <param name="pId">Codigo de base de datos.</param>
        /// <returns></returns>
        private Hashtable Precarga(int pId)
        {
            Hashtable pData = new Hashtable();
            string sql = "SELECT id, descSin FROM sindicato WHERE id=@pId";
            SqlCommand cmd;
            SqlDataReader rd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pId", pId));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //LLENAMOS DATOS
                                    pData.Add("descsin", (string)rd["descSin"]);
                                }
                            }
                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return pData;
        }
        /// <summary>
        /// Escribe informacion en registro.
        /// </summary>
        /// <param name="pId">Codigo registro.</param>
        /// <param name="pDesc">Nueva descripcion de registro.</param>
        /// <param name="pData">Informacion desde base de datos.</param>
        private void WriteLog(int pId, string pDesc, Hashtable pData)
        {
            if (pData.Count > 0)
            {
                if (pDesc != (string)pData["descsin"])
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA REGISTRO SINDICADO CODIGO " + pId, "SINDICATO", (string)pData["descsin"], pDesc, "MODIFICAR");
                    log.Log();
                }                
            }
        }
        #endregion



    }

    class Jubilado
    {
        public int Id { get; set; }
        public string Descripcion { get; set; }

        /// <summary>
        /// Retorna un Datatable
        /// </summary>
        public DataTable GetInfo()
        {
            Jubilado jub = new Jubilado();
            DataTable pTabla = new DataTable();
            pTabla.Columns.Add("Id", typeof(int));
            pTabla.Columns.Add("Descripcion", typeof(string));

            DataRow Row;

            Row = pTabla.NewRow();
            Row["Id"] = 0;
            Row["Descripcion"] = "No";
            pTabla.Rows.Add(Row);

            Row = pTabla.NewRow();
            Row["Id"] = 1;
            Row["Descripcion"] = "Si, No Cotiza";
            pTabla.Rows.Add(Row);

            Row = pTabla.NewRow();
            Row["Id"] = 2;
            Row["Descripcion"] = "Si, Cotiza";
            pTabla.Rows.Add(Row);


            return pTabla;
        }

    }

    class TipoContrato
    {
        public int Id { get; set; }
        public string Descripcion { get; set; }

        /// <summary>
        /// Retorna un Datatable
        /// </summary>
        public DataTable GetInfo()
        {
            TipoContrato jub = new TipoContrato();
            DataTable pTabla = new DataTable();
            pTabla.Columns.Add("Id", typeof(int));
            pTabla.Columns.Add("Descripcion", typeof(string));

            DataRow Row;

            Row = pTabla.NewRow();
            Row["Id"] = 0;
            Row["Descripcion"] = "Indefinido";
            pTabla.Rows.Add(Row);

            Row = pTabla.NewRow();
            Row["Id"] = 1;
            Row["Descripcion"] = "Plazo Fijo";
            pTabla.Rows.Add(Row);

            Row = pTabla.NewRow();
            Row["Id"] = 2;
            Row["Descripcion"] = "Obra o Faena";
            pTabla.Rows.Add(Row);

            return pTabla;
        }

    }

    class Sexo
    {
        public string Id { get; set; }
        public string Descripcion { get; set; }

        /// <summary>
        /// Retorna un Datatable
        /// </summary>
        public DataTable GetInfo()
        {
            Sexo jub = new Sexo();
            DataTable pTabla = new DataTable();
            pTabla.Columns.Add("Id", typeof(string));
            pTabla.Columns.Add("Descripcion", typeof(string));            
            DataRow Row;

            Row = pTabla.NewRow();
            Row["Id"] = "m";
            Row["Descripcion"] = "Masculino";
            pTabla.Rows.Add(Row);

            Row = pTabla.NewRow();
            Row["Id"] = "f";
            Row["Descripcion"] = "Femenino";
            pTabla.Rows.Add(Row);         

            return pTabla;
        }

    }

    class JornadaLaboral
    {
        public int Id { get; set; }
        public string Descripcion { get; set; }

        /// <summary>
        /// Retorna un Datatable
        /// </summary>
        public DataTable GetInfo()
        {
            JornadaLaboral jub = new JornadaLaboral();
            DataTable pTabla = new DataTable();
            pTabla.Columns.Add("Id", typeof(int));
            pTabla.Columns.Add("Descripcion", typeof(string));
            DataRow Row;

            Row = pTabla.NewRow();
            Row["Id"] = 1;
            Row["Descripcion"] = "Lunes - Viernes";
            pTabla.Rows.Add(Row);

            Row = pTabla.NewRow();
            Row["Id"] = 2;
            Row["Descripcion"] = "Lunes - Sábado";
            pTabla.Rows.Add(Row);

            Row = pTabla.NewRow();
            Row["Id"] = 2;
            Row["Descripcion"] = "Turnos";
            pTabla.Rows.Add(Row);

            return pTabla;
        }

    }

    class RegimenSalarial
    {
        public int Id { get; set; }
        public string Descripcion { get; set; }

        /// <summary>
        /// Retorna un Datatable
        /// </summary>
        public DataTable GetInfo()
        {
           
            RegimenSalarial jub = new RegimenSalarial();
            DataTable pTabla = new DataTable();
            pTabla.Columns.Add("Id", typeof(int));
            pTabla.Columns.Add("Descripcion", typeof(string));
            DataRow Row;

            Row = pTabla.NewRow();
            Row["Id"] = 0;
            Row["Descripcion"] = "Variable";
            pTabla.Rows.Add(Row);

            Row = pTabla.NewRow();
            Row["Id"] = 1;
            Row["Descripcion"] = "Fijo";
            pTabla.Rows.Add(Row);

            return pTabla;
        }

    }

    /// <summary>
    /// Solo paramostrar combo con opciones (INGRESAR, MODIFICAR, ELIMINAR)
    /// </summary>
    class Opcion
    {
        public int Id { get; set; }
        public string Descripcion { get; set; }

        /// <summary>
        /// Cargar un control LookupEdit
        /// </summary>
        /// <param name="pCombo"></param>
        public void CargarCombo(LookUpEdit pCombo)
        {
            List<Opcion> lista = new List<Opcion>();

            lista.Add(new Opcion() { Id = 1, Descripcion = "Ingresar"});
            lista.Add(new Opcion() { Id = 2, Descripcion = "Modificar" });

            //PROPIEDADES COMBOBOX
            pCombo.Properties.DataSource = lista.ToList();
            pCombo.Properties.ValueMember = "Id";
            pCombo.Properties.DisplayMember = "Descripcion";

            pCombo.Properties.PopulateColumns();

            //ocultamos la columan key
            pCombo.Properties.Columns[0].Visible = false;

            pCombo.Properties.SearchMode = DevExpress.XtraEditors.Controls.SearchMode.AutoComplete;
            pCombo.Properties.AutoSearchColumnIndex = 1;
            pCombo.Properties.ShowHeader = false;

            if (pCombo.Properties.DataSource != null)
                pCombo.ItemIndex = 0;
        }
    }

    /// <summary>
    /// Representa a la tabla Cuenta contable
    /// </summary>
    class Cuenta
    {
        /// <summary>
        /// Codigo cuenta contable
        /// </summary>
        public int CodCuenta { get; set; }
        /// <summary>
        /// Descripcion cuenta contable
        /// </summary>
        public string DescCuenta { get; set; }
        /// <summary>
        /// Codigo esquema contable al que pertenece la cuenta contable.
        /// </summary>
        public int CodEs { get; set; }

        /// <summary>
        /// Indica si agrupa o no por rut
        /// </summary>
        public int AgRut { get; set; }

        /// <summary>
        /// Ingresa una nueva cuenta contable.
        /// </summary>
        public bool IngresarCuenta(int pCod, string pDesc, int pEsc, int pAgRut)
        {
            string sql = "INSERT INTO cuenta(codCuenta, descCuenta, codEs, agRut) " +
                         "VALUES(@pCod, @pDesc, @pEsq, @pAgRut)";
            SqlCommand cmd;
            SqlConnection cn;

            int count = 0;
            bool Correcto = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc));
                            cmd.Parameters.Add(new SqlParameter("@pEsq", pEsc));
                            cmd.Parameters.Add(new SqlParameter("@pAgRut", pAgRut));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;

                                logRegistro Log = new logRegistro(User.getUser(), $"SE INGRESA NUEVA CUENTA CONTABLE N° {pCod}", "CUENTA", "", pCod.ToString(), "INGRESAR");
                                Log.Log();
                            }                                

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                Correcto = false;
            }

            return Correcto;
        }
        /// <summary>
        /// Modifica una cuenta contable..
        /// </summary>
        /// <param name="pCod"></param>
        /// <param name="pDesc"></param>
        /// <returns></returns>
        public bool ModificarCuenta(int pCod, string pDesc, int pEsc, int pAgRut)
        {
            bool Correcto = false;
            string sql = "UPDATE cuenta SET descCuenta=@pDesc, AgRut=@pAgRut WHERE codCuenta=@pCod AND codEs=@pEsq";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            Hashtable pData = new Hashtable();
            pData = Precarga(pCod);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc));
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                            cmd.Parameters.Add(new SqlParameter("@pEsq", pEsc));
                            cmd.Parameters.Add(new SqlParameter("@pAgRut", pAgRut));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                //Escribimos dato en log.
                                WriteLog(pData, pDesc, pAgRut);
                            }                                

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                Correcto = true;
            }

            return Correcto;
        }
        /// <summary>
        /// Eliminar una cuenta contable.
        /// </summary>
        /// <param name="pCod"></param>
        /// <returns></returns>
        public bool EliminarCuenta(int pCod, int pEsquema)
        {
            bool Correcto = false;
            string sql = "DELETE FROM cuenta WHERE codCuenta=@pCod AND codEs=@pEsq";
            string sqlDelDetalle = "DELETE FROM detallecuenta WHERE cuenta=@pCod AND codEs=@pEsq";
            string sqlDelGrupoCont = "DELETE FROM grupoContable WHERE codCuenta=@pCod AND codEs=@pEsq";
            SqlCommand cmd;
            SqlConnection cn;
            SqlTransaction tr;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    tr = cn.BeginTransaction();
                    try
                    {
                        using (cn)
                        {
                            //ELIMINAR DE TABLA GRUPO CONTABLE
                            using (cmd = new SqlCommand(sqlDelGrupoCont, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                                cmd.Parameters.Add(new SqlParameter("@pEsq", pEsquema));

                                cmd.Transaction = tr;
                                count = cmd.ExecuteNonQuery();
                                if (count > 0)
                                {
                                    logRegistro Log = new logRegistro(User.getUser(), $"SE ELIMINA DETALLECUENTA N° {pCod} DE ESQUEMA {pEsquema}", "DETALLECUENTA", pCod.ToString(), "", "ELIMINAR");
                                    Log.Log();
                                }
                            }

                            //ELIMINAR DETALLE DE CUENTA 
                            using (cmd = new SqlCommand(sqlDelDetalle, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                                cmd.Parameters.Add(new SqlParameter("@pEsq", pEsquema));

                                cmd.Transaction = tr;
                                count = cmd.ExecuteNonQuery();
                                if (count > 0)
                                {
                                    logRegistro Log = new logRegistro(User.getUser(), $"SE ELIMINA DETALLECUENTA N° {pCod} DE ESQUEMA {pEsquema}", "DETALLECUENTA", pCod.ToString(), "", "ELIMINAR");
                                    Log.Log();
                                }
                            }

                            //ELIMINAR CUENTA
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS    
                                cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                                cmd.Parameters.Add(new SqlParameter("@pEsq", pEsquema));

                                cmd.Transaction = tr;

                                count = cmd.ExecuteNonQuery();
                                if (count > 0)
                                {
                                    logRegistro Log = new logRegistro(User.getUser(), $"SE ELIMINA CUENTA N° {pCod} DE ESQUEMA {pEsquema}", "CUENTA", pCod.ToString(), "", "ELIMINAR");
                                    Log.Log();
                                }

                                cmd.Dispose();
                            }

                            tr.Commit();
                            Correcto = true;
                        }
                    }
                    catch (SqlException ex)
                    {
                        tr.Rollback();
                        Correcto = false;
                    }
                }
            }
            catch (SqlException ex)
            {
                
                Correcto = false;
            }

            return Correcto;
        }

        /// <summary>
        /// Indica si existe o no una cuenta contable.
        /// </summary>
        /// <param name="pCod"></param>
        /// <returns></returns>
        public bool ExisteCuenta(int pCod, int pEsquema)
        {
            SqlCommand cmd;
            SqlConnection cn;
            string sql = "SELECT count(*) FROM cuenta WHERE codcuenta=@pCod AND codEs=@pEsq";
            bool existe = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                            cmd.Parameters.Add(new SqlParameter("@pEsq", pEsquema));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    existe = true;
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR
                existe = false;
            }

            return existe;

        }

        #region "LOG"
        /// <summary>
        /// Precarga informacion de un item desde bd
        /// </summary>
        /// <param name="pCod"></param>
        private Hashtable Precarga(int pCod)
        {
            string sql = "SELECT codCuenta, descCuenta, AgRut FROM cuenta WHERE codCuenta=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            Hashtable Tabla = new Hashtable();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod",pCod));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Tabla.Add("descCuenta", (string)rd["descCuenta"]);
                                    Tabla.Add("agrut", Convert.ToInt32(rd["AgRut"]));
                                    Tabla.Add("codcuenta", Convert.ToInt32(rd["codCuenta"]));
                                }
                            }
                            rd.Close();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return Tabla;
        }

        /// <summary>
        /// Escribe informacion modificada en tabla log
        /// </summary>
        /// <param name="pTabla">Hashtable con información de elemento.</param>
        /// <param name="pDesc"></param>
        private void WriteLog(Hashtable pTabla, string pDesc, int pAgRut)
        {
            if (pTabla.Count > 0)
            {
                if ((string)pTabla["descCuenta"] != pDesc)
                {
                    logRegistro Log = new logRegistro(User.getUser(), $"SE MODIFICA CAMPO DESCUENTA PARA CUENTA N° {Convert.ToInt32(pTabla["codcuenta"])}", "CUENTA", (string)pTabla["descCuenta"], pDesc, "MODIFICAR");
                    Log.Log();
                }
                if (Convert.ToInt32(pTabla["agrut"]) != pAgRut)
                {
                   
                    logRegistro Log = new logRegistro(User.getUser(), $"SE MODIFICA CAMPO AGRUT PARA CUENTA N° {Convert.ToInt32(pTabla["codcuenta"])}", "CUENTA", (pTabla["agrut"]) + "", pAgRut.ToString(), "MODIFICAR");
                    Log.Log();
                }
            }
        }

        #endregion

        /// <summary>
        /// Obtiene un datatable con todos los datos de la tabla.
        /// </summary>
        public DataTable GetDataSource()
        {
            string sql = "SELECT codEs, codCuenta, descCuenta, AgRut FROM cuenta ORDER BY codCuenta";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            DataTable Tabla = new DataTable();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "data");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                Tabla = ds.Tables[0];
                            }
                            else
                            {
                                Tabla = null;
                            }

                            ad.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return Tabla;
        }

        /// <summary>
        /// Indica si la cuenta esta siendo usada o está asociada a algun item.
        /// </summary>
        /// <param name="pCuenta"></param>
        /// <returns></returns>
        public bool CuentaUsada(int pCuenta, int pEsquema)
        {
            string sql = "SELECT count(*) FROM grupoContable WHERE codCuenta=@pCuenta AND codEs=@pEsq";
            SqlCommand cmd;
            SqlConnection cn;
            bool usada = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMERTOS
                            cmd.Parameters.Add(new SqlParameter("@pCuenta", pCuenta));
                            cmd.Parameters.Add(new SqlParameter("@pEsq", pEsquema));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    usada = true;

                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return usada;
        }

        /// <summary>
        /// Indica si una determinada cuenta tiene o no registros.
        /// </summary>
        /// <param name="pCuenta"></param>
        /// <returns></returns>
        public bool CuentaVacia(int pCuenta)
        {
            bool tiene = false;
            string sql = "SELECT count(*) FROM detallecuenta WHERE cuenta=@pCod";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROs
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCuenta));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    tiene = true;
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return tiene;
        }

        /// <summary>
        /// Genera el listado de todos los elementos.
        /// </summary>
        public List<Cuenta> GetList()
        {
            string sql = "SELECT codCuenta, descCuenta, codEs FROM cuenta ORDER BY codCuenta, codEs";
            SqlCommand cmd;
            SqlConnection cn;

            List<Cuenta> Listado = new List<Cuenta>();
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Listado.Add(new Cuenta() { CodCuenta = Convert.ToInt32(rd["codCuenta"]),
                                    CodEs = Convert.ToInt32(rd["codEs"]), DescCuenta = (string)rd["descCuenta"]});
                                }
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return Listado;
        }
                
    }

    /// <summary>
    /// Representa a cada elemento de una cuenta contable.
    /// </summary>
    class DetalleCuenta
    {
        /// <summary>
        /// Codigo de cuenta maestra asociada.
        /// </summary>
        public int Cuenta { get; set; }
        /// <summary>
        /// Codigo que tendrá cada elemento de una cuenta maestra
        /// </summary>
        public int codElemento { get; set; }
        /// <summary>
        /// Descripcion o nombre del elemento asociado a una cuenta maestra.
        /// </summary>
        public string DescElemento { get; set; }

        /// <summary>
        /// Codigo esquema contable.
        /// </summary>
        public int CodEs { get; set; }

        /// <summary>
        /// Tipo seleccionado de acerdo a combobox
        /// </summary>
        public int TipoSel { get; set; }

        /// <summary>
        /// Valor de acuerdo a seleccion.
        /// </summary>
        public int valorSel { get; set; }

        /// <summary>
        /// Permite ingresar un nuevo elemento a una cuenta maestra especifica.
        /// </summary>
        public bool IngresarElemento(int pCodCuenta, int pCodElemento, string pDescElemento, int pTipoSel, string pValorSel)
        {
            string sql = "INSERT INTO DetalleCuenta(cuenta, codElemento, descElemento, tiposel, valorsel)" +
                         "VALUES(@pCuenta, @pCodElemento, @pDescElemento, @pTipoSel, @pValorSel)";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool Correcto = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCuenta", pCodCuenta));
                            cmd.Parameters.Add(new SqlParameter("@pCodElemento", pCodElemento));
                            cmd.Parameters.Add(new SqlParameter("@pDescElemento", pDescElemento));
                            cmd.Parameters.Add(new SqlParameter("@pTipoSel", pTipoSel));
                            cmd.Parameters.Add(new SqlParameter("@pValorSel", pValorSel));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                logRegistro Log = new logRegistro(User.getUser(), $"SE INGRESA NUEVO ELEMENTO A CUENTA N° {pCodCuenta}", "DETALLECUENTA", "", pCodElemento.ToString(), "INGRESAR");
                                Log.Log();
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR..
            }

            return Correcto;
        }
        /// <summary>
        /// Permite modificar un elemento de una cuenta maestra.
        /// </summary>
        /// <param name="pCodCuenta"></param>
        /// <param name="pCodElemento"></param>
        /// <param name="pDescElemento"></param>
        /// <param name="pValor"></param>
        /// <returns></returns>
        public bool ModificarElemento(int pCodCuenta, int pCodElemento, string pDescElemento, int pTipoSel, string pValorSel)
        {
            string sql = "UPDATE DetalleCuenta SET descElemento=@pDescElemento, tipoSel=@pTipoSel, valorSel=@pValorSel " +
                         "WHERE codElemento=@pCodElemento AND cuenta=@pCuenta";
                         
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool Correcto = false;

            Hashtable pTabla = new Hashtable();
            pTabla = Precarga(pCodCuenta, pCodElemento);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCuenta", pCodCuenta));
                            cmd.Parameters.Add(new SqlParameter("@pCodElemento", pCodElemento));
                            cmd.Parameters.Add(new SqlParameter("@pDescElemento", pDescElemento));
                            cmd.Parameters.Add(new SqlParameter("@pTipoSel", pTipoSel));
                            cmd.Parameters.Add(new SqlParameter("@pValorSel", pValorSel));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                //Escribirmos informacion en log.
                                WriteLog(pTabla, pDescElemento, pTipoSel, pValorSel);
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR..
            }

            return Correcto;
        }

        /// <summary>
        /// Permite eliminar un elemento de una cuenta maestra.
        /// </summary>
        /// <param name="pCodElemento">Codigo del elemento que se desea eliminar</param>
        /// <param name="pCodCuenta">Codigo de cuenta maestra.</param>
        /// <returns></returns>
        public bool EliminarElemento(int pCodElemento, int pCodCuenta)
        {
            bool Correcto = false;
            string sql = "DELETE FROM DetalleCuenta WHERE cuenta=@pCuenta AND codElemento=@pCodElemento ";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCuenta", pCodCuenta));
                            cmd.Parameters.Add(new SqlParameter("@pCodElemento", pCodElemento));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                logRegistro Log = new logRegistro(User.getUser(), $"SE ELIMINA ELEMENTO DE CUENTA {pCodCuenta}", "DETALLECUENTA", pCodElemento.ToString(), "", "ELIMINAR");
                                Log.Log();
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return Correcto;
        }

        /// <summary>
        /// Elimina todos los elementos de una cuenta.
        /// </summary>
        /// <param name="pCodCuenta"></param>
        /// <returns></returns>
        public bool EliminarTodos(int pCodCuenta, int pCodEs)
        {
            bool Correcto = false;
            string sql = "DELETE FROM DetalleCuenta WHERE cuenta=@pCuenta AND codes=@pCodEs";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCuenta", pCodCuenta));
                            cmd.Parameters.Add(new SqlParameter("@pCodEs", pCodEs));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                logRegistro Log = new logRegistro(User.getUser(), $"SE ELIMINAN TODOS LOS EMENTOS DE CUENTA {pCodCuenta}", "DETALLECUENTA", pCodCuenta.ToString(), "", "ELIMINAR");
                                Log.Log();
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return Correcto;
        }

        /// <summary>
        /// Elimina todo el detalle de un esquema para todas las cuentas contables asociadas.
        /// </summary>
        /// <returns></returns>
        public bool EliminaTodosEsquema(int pCodEs)
        {
            bool Correcto = false;
            string sql = "DELETE FROM DetalleCuenta WHERE codes=@pCodEs";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCodEs", pCodEs));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                logRegistro Log = new logRegistro(User.getUser(), $"SE ELIMINAN TODOS LOS DETALLES DE ESQUEMA {pCodEs}", "DETALLECUENTA", pCodEs.ToString(), "", "ELIMINAR");
                                Log.Log();
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return Correcto;
        }

        /// <summary>
        /// Indica si existe o no un elemento dentro de una cuenta maestra
        /// </summary>
        /// <param name="pCodElemento"></param>
        /// <param name="pCuenta"></param>
        /// <returns></returns>
        public bool ExisteElemento(int pCodElemento, int pCuenta)
        {
            bool existe = false;
            string sql = "SELECT count(*) FROM detallecuenta WHERE codElemento=@pCodElemento AND " +
                        "cuenta=@pCuenta";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCodElemento", pCodElemento));
                            cmd.Parameters.Add(new SqlParameter("@pCuenta", pCuenta));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    existe = true;
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR..              
            }

            return existe;
        }

        /// <summary>
        /// Indica si existen elementos asociado a una cuenta.
        /// </summary>
        /// <param name="pCuenta"></param>
        /// <returns></returns>
        public bool ExistenElementos(int pCuenta)
        {
            bool existe = false;
            string sql = "SELECT count(*) FROM detallecuenta WHERE cuenta=@pCuenta";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCuenta", pCuenta));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    existe = true;
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR..              
            }

            return existe;
        }

        /// <summary>
        /// Retorna un datatable con toda la ínformación
        /// </summary>
        /// <returns></returns>
        public DataTable GetDataSource()
        {
            DataTable Tabla = new DataTable();
            string sql = "SELECT cuenta, codElemento, descElemento, valor FROM detalleCuenta " +
                         "ORDER BY cuenta, codElemento ";
            SqlCommand cmd;
            SqlConnection cn;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "data");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                Tabla = ds.Tables[0];
                            }
                            else
                            {
                                Tabla = null;
                            }

                            ds.Dispose();
                            ad.Dispose();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return Tabla;
        }        

        #region "LOG"
        private Hashtable Precarga(int pCuenta, int pCodElemento)
        {
            string sql = "SELECT cuenta, codElemento, descElemento, tipoSel, valorSel FROM detallecuenta " +
                        " WHERE cuenta=@pCuenta AND codElemento=@pCodElemento";
            SqlCommand cmd;
            SqlConnection cn;
            Hashtable Data = new Hashtable();
            SqlDataReader rd;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCuenta", pCuenta));
                            cmd.Parameters.Add(new SqlParameter("@pCodElemento", pCodElemento));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //LLENAMOS HASHTABLE
                                    Data.Add("descElemento", (string)rd["descElemento"]);
                                    Data.Add("valor", (string)rd["valor"]);
                                    Data.Add("cuenta", Convert.ToInt32(rd["cuenta"]));
                                    Data.Add("elemento", Convert.ToInt32(rd["elemento"]));
                                    Data.Add("tiposel", Convert.ToInt32(rd["tipoSel"]));
                                    Data.Add("valorsel", (string)rd["valorSel"]);
                                }
                            }

                            rd.Close();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }


            return Data;
        }

        private void WriteLog(Hashtable pTabla, string pDescElemento, int pTipoSel, string pValorSel)
        {
            if (pTabla.Count > 0)
            {
                if ((string)pTabla["descElemento"] != pDescElemento)
                {
                    logRegistro Log = new logRegistro(User.getUser(), $"SE MODIFICA CAMPO DESCELEMENTO PARA ELEMENTO {Convert.ToInt32(pTabla["elemento"])}", "DETALLECUENTA", pTabla["descElemento"].ToString(), pDescElemento, "MODIFICAR");
                    Log.Log();
                }
                if ((string)pTabla["valorsel"] != pValorSel)
                {
                    logRegistro Log = new logRegistro(User.getUser(), $"SE MODIFICA CAMPO VALORSEL PARA ELEMENTO {Convert.ToInt32(pTabla["elemento"])}", "DETALLECUENTA", pTabla["valorsel"].ToString(), pValorSel, "MODIFICAR");
                    Log.Log();
                }
                if (Convert.ToInt32(pTabla["tiposel"]) != pTipoSel)
                {
                    logRegistro Log = new logRegistro(User.getUser(), $"SE MODIFICA CAMPO TIPOSEL PARA ELEMENTO {Convert.ToInt32(pTabla["elemento"])}", "DETALLECUENTA", Convert.ToInt32(pTabla["tiposel"]) + "", pTipoSel.ToString(), "MODIFICAR");
                    Log.Log();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Representa a la tabla GrupoContable
    /// <para>Se indica como se comporta un item si es crédito o débito</para>
    /// </summary>
    class GrupoContable
    {
        /// <summary>
        /// Codigo de item asociado
        /// </summary>
        public string Item { get; set; }
        /// <summary>
        /// Es haber o Crédito
        /// </summary>
        public int Tipo { get; set; }
        /// <summary>
        /// Codigo de cuenta maestra que usa item.
        /// </summary>
        public int Cuenta { get; set; }
        /// <summary>
        /// Dato adicional
        /// </summary>
        public string Dato1 { get; set; }
        /// <summary>
        /// Dato adicional
        /// </summary>
        public string Dato2 { get; set; }
        /// <summary>
        /// Dato adicional.
        /// </summary>
        public string Dato3 { get; set; }
        /// <summary>
        /// Dato adicional
        /// </summary>
        public string Dato4 { get; set; }

        /// <summary>
        /// Codigo del esquema contable.
        /// </summary>
        public int CodEs { get; set; }

        /// <summary>
        /// Ingresa un nuevo item a un grupo contable.
        /// </summary>
        /// <param name="pItem"></param>
        /// <param name="pTipo"></param>
        /// <param name="pCuenta"></param>
        /// <param name="pD1"></param>
        /// <param name="pD2"></param>
        /// <param name="pD3"></param>
        /// <param name="pD4"></param>
        /// <returns></returns>
        public bool Ingresar(string pItem, int pTipo, int pCuenta, string pD1, string pD2, string pD3, string pD4)
        {
            string sql = "INSERT INTO GrupoContable(coditem, tipo, codCuenta, dato1, dato2, dato3, dato4) " +
                         "VALUES(@pCodItem, @pTipo, @pCodCuenta, @pDato1, @pDato2, @pDato3, @pDato4)";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool Correcto = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCodItem", pItem));
                            cmd.Parameters.Add(new SqlParameter("@pTipo", pTipo));
                            cmd.Parameters.Add(new SqlParameter("@pCodCuenta", pCuenta));
                            cmd.Parameters.Add(new SqlParameter("@pDato1", pD1));
                            cmd.Parameters.Add(new SqlParameter("@pDato2", pD2));
                            cmd.Parameters.Add(new SqlParameter("@pDato3", pD3));
                            cmd.Parameters.Add(new SqlParameter("@pDato4", pD4));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                logRegistro Log = new logRegistro(User.getUser(), $"SE INGRESA ITEM A GRUPOCONTABLE CON CODIGO {pItem} Y TIPO {pTipo}", "GRUPOCONTABLE", "", pItem, "INGRESAR");
                                Log.Log();
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return Correcto;
        }

        /// <summary>
        /// Permite modificar un item dentro de un grupo contable.
        /// </summary>
        /// <param name="pItem"></param>
        /// <param name="pTipo"></param>
        /// <param name="pCuenta"></param>
        /// <param name="pD1"></param>
        /// <param name="pD2"></param>
        /// <param name="pD3"></param>
        /// <param name="pD4"></param>
        /// <returns></returns>
        public bool Modificar(int pCodes, string pItem, int pTipo, int pCuenta, string pD1, string pD2, string pD3, string pD4)
        {
            string sql = "UPDATE GrupoContable SET odCuenta=@pCodCuenta, " +
                         "dato1=@pDato1, dato2=@pDato2, dato3=@pDato3, dato4=@pDato4 " +
                         "WHERE coditem=@pCodItem AND tipo=@pTipo";
                         
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool Correcto = false;
            Hashtable pTabla = new Hashtable();
            pTabla = Precarga(pItem, pTipo, pCodes);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCodItem", pItem));
                            cmd.Parameters.Add(new SqlParameter("@pTipo", pTipo));
                            cmd.Parameters.Add(new SqlParameter("@pCodCuenta", pCuenta));
                            cmd.Parameters.Add(new SqlParameter("@pDato1", pD1));
                            cmd.Parameters.Add(new SqlParameter("@pDato2", pD2));
                            cmd.Parameters.Add(new SqlParameter("@pDato3", pD3));
                            cmd.Parameters.Add(new SqlParameter("@pDato4", pD4));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                //Escribimos informacion en Log.
                                WriteLog(pTabla, pItem, pTipo, pCuenta, pD1, pD2, pD3, pD4, pCodes);

                            }
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return Correcto;
        }

        /// <summary>
        /// Permite eliminar un item de grupo contable
        /// </summary>
        /// <param name="pItem"></param>
        /// <returns></returns>
        public bool Eliminar(string pItem)
        {
            string sql = "DELETE FROM grupoContable WHERE coditem=@pItem";            
            SqlCommand cmd;
            SqlConnection cn;
            bool correcto = false;
            int count = 0;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            cmd.Parameters.Add(new SqlParameter("@pItem", pItem));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;
                                logRegistro Log = new logRegistro(User.getUser(), $"SE ELIMINA ITEM {pItem}", "GRUPOCONTABLE", pItem, "", "ELIMINAR");
                                Log.Log();
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
               //ERROR...
            }

            return correcto;
        }

        /// <summary>
        /// Obtenemos Informacion de item como debito y credito
        /// </summary>
        /// <param name="pCodItem"></param>
        public List<GrupoContable> GetinformationItem(string pCodItem)
        {
            string sql = "SELECT coditem, tipocon, codCuenta, dato1, dato2, dato3, dato4, codEs FROM grupocontable " +
                         "WHERE coditem = @pCodItem";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            List<GrupoContable> Grupos = new List<GrupoContable>();
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCoditem", pCodItem));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Grupos.Add(new GrupoContable() { CodEs = Convert.ToInt32(rd["codEs"]),
                                    Cuenta = Convert.ToInt32(rd["codCuenta"]), Tipo = Convert.ToInt32(rd["tipocon"]),
                                    Dato1 = (string)rd["dato1"], Dato2 = (string)rd["dato2"], Dato3 = (string)rd["dato3"],
                                    Dato4 = (string)rd["dato4"], Item = (string)rd["coditem"]});
                                }
                            }
                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return Grupos;
        }

        /// <summary>
        /// Indica el detalle de configuracion asociado a cada item.
        /// </summary>
        /// <returns></returns>
        public List<ConfiguracionItem> GetInfoCuentas()
        {
            string sql = "SELECT coditem, codElemento, tipoSel, subtipoSel, valorSel, tipocon, AgRut, subsubtiposel  from GrupoContable " +
                         "INNER JOIN DetalleCuenta ON DetalleCuenta.cuenta = GrupoContable.codCuenta  " +
                          "INNER JOIN cuenta ON cuenta.codCuenta = detallecuenta.cuenta " +
                          " ORDER BY coditem, tipocon, codElemento";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            List<ConfiguracionItem> Configuraciones = new List<ConfiguracionItem>();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Configuraciones.Add(new ConfiguracionItem()
                                    {
                                        ItemObservado = (string)rd["coditem"],
                                        CodDetalleCuenta = Convert.ToInt32(rd["codElemento"]),
                                        TipoSeleccionado = Convert.ToInt32(rd["tipoSel"]),
                                        SubtipoSeleccionado = (string)rd["subtipoSel"],
                                        ValorSeleccionado = (string)rd["valorSel"],
                                        Tipo = Convert.ToInt32(rd["tipocon"]),
                                        //1-> NO ; 2-> SI
                                        AgrupaRut = Convert.ToInt32(rd["AgRut"]) == 1 ? false: true                                        
                                    });
                                }
                            }
                            rd.Close();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return Configuraciones;
        }

        //QUE ESQUEMA CONTABLE SE ESTA USANDO?
        /// <summary>
        /// Retorna el codigo de esquema utilizado actualmente.
        /// </summary>
        /// <returns></returns>
        public int GetEsquemaUsado()
        {
            int cod = 0;
            string sql = "SELECT TOP 1 codEs from GrupoContable";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                cod = Convert.ToInt32(data);
                            }
                        }
                        cmd.Dispose();
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return cod;
        }

        #region "LOG"
        public Hashtable Precarga(string pItem, int pTipo, int pCodEs)
        {
            string sql = "SELECT codEs, coditem, tipo, codCuenta, dato1, dato2, dato3, dato4 FROM " +
                        "GRUPOCONTABLE where coditem=@pItem AND tipo=@pTipo AND codEs=@pCodEs";
            SqlCommand cmd;
            SqlConnection cn;
            Hashtable Tabla = new Hashtable();
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            cmd.Parameters.Add(new SqlParameter("@pItem", pItem));
                            cmd.Parameters.Add(new SqlParameter("@pTipo", pTipo));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Tabla.Add("coditem", (string)rd["coditem"]);
                                    Tabla.Add("tipo", Convert.ToInt32(rd["tipo"]));
                                    Tabla.Add("codCuenta", Convert.ToInt32(rd["codCuenta"]));
                                    Tabla.Add("dato1", (string)rd["dato1"]);
                                    Tabla.Add("dato2", (string)rd["dato2"]);
                                    Tabla.Add("dato3", (string)rd["dato3"]);
                                    Tabla.Add("dato4", (string)rd["dato4"]);
                                    Tabla.Add("codes", Convert.ToInt32(rd["codEs"]));
                                }
                            }
                            rd.Close();
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
              //ERROR...
            }

            return Tabla;
        }

        public void WriteLog(Hashtable pTabla, string pCoditem, int pTipo, int pCodCuenta, string pD1, 
            string pD2, string pD3, string pD4, int pCodEs)
        {
            if (pTabla.Count > 0)
            {
                if ((string)pTabla["dato1"] != pD1)
                {
                    logRegistro Log = new logRegistro(User.getUser(), "SE MODIFICA CAMPO DATO1", "GRUPOCONTABLE", (string)pTabla["dato1"], pD1, "MODIFICAR");
                    Log.Log();
                }
                if ((string)pTabla["dato2"] != pD2)
                {
                    logRegistro Log = new logRegistro(User.getUser(), "SE MODIFICA CAMPO DATO2", "GRUPOCONTABLE", (string)pTabla["dato2"], pD1, "MODIFICAR");
                    Log.Log();
                }
                if ((string)pTabla["dato3"] != pD3)
                {
                    logRegistro Log = new logRegistro(User.getUser(), "SE MODIFICA CAMPO DATO3", "GRUPOCONTABLE", (string)pTabla["dato3"], pD1, "MODIFICAR");
                    Log.Log();
                }
                if ((string)pTabla["dato4"] != pD4)
                {
                    logRegistro Log = new logRegistro(User.getUser(), "SE MODIFICA CAMPO DATO4", "GRUPOCONTABLE", (string)pTabla["dato4"], pD1, "MODIFICAR");
                    Log.Log();
                }
                if (Convert.ToInt32(pTabla["codCuenta"]) != pCodCuenta)
                {
                    logRegistro Log = new logRegistro(User.getUser(), "SE MODIFICA CAMPO CODCUENTA", "GRUPOCONTABLE", Convert.ToInt32(pTabla["codCuenta"]) + "", pCodCuenta.ToString(), "MODIFICAR");
                    Log.Log();
                }
                if (Convert.ToInt32(pTabla["codes"]) != pCodEs)
                {
                    logRegistro Log = new logRegistro(User.getUser(), "SE MODIFICA CAMPO CODES", "GRUPOCONTABLE", Convert.ToInt32(pTabla["codes"]) + "", pCodEs.ToString(), "MODIFICAR");
                    Log.Log();
                }
            }
        }
        #endregion


    }

    public class Esquema
    {
        /// <summary>
        /// Codigo esquema contable
        /// </summary>
        public int Cod { get; set; }
        /// <summary>
        /// Descripcion esquema contable
        /// </summary>
        public string Desc { get; set; }
        /// <summary>
        /// Numero de columnas que tendrá cada elemento del esquema contable.
        /// </summary>
        public int Col { get; set; }
        /// <summary>
        /// Formato que tendrá el esquema
        /// </summary>
        public int Formato { get; set; }
        /// <summary>
        /// Separador que usará el esquema
        /// </summary>
        public int Separador { get; set; }
        /// <summary>
        /// indica el separador en su represtacion (\t;.)
        /// </summary>
        public string SeparadorCad { get; set; }

        /// <summary>
        /// Ingresa un nuevo esquema contable.
        /// </summary>
        /// <param name="pCod">Codigo unico registro.</param>
        /// <param name="pDesc">Descripcion esquema contable.</param>
        /// <param name="pCol">Cantidad de columnas que tendrá esquema contable.</param>
        /// <returns></returns>
        public bool Ingresar(int pCod, string pDesc, int pCol, int pFormato, int pSeparador)
        {
            string sql = "INSERT INTO esquema(cod, descEsq, col, formato, separador) VALUES(@pCod, @pDesc, @pCol, @pFormato, @pSeparador)";
            SqlCommand cmd;
            SqlConnection cn;
            bool Correcto = false;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc));
                            cmd.Parameters.Add(new SqlParameter("@pCol", pCol));
                            cmd.Parameters.Add(new SqlParameter("@pFormato", pFormato));
                            cmd.Parameters.Add(new SqlParameter("@pSeparador", pSeparador));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                logRegistro log = new logRegistro(User.getUser(), $"SE INGRESA ESQUEMA CONTABLE {pDesc}", "ESQUEMA", "", pCod.ToString(), "INGRESAR");
                                log.Log();
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERRROR.
                Correcto = true;
            }

            return Correcto;
        }

        /// <summary>
        /// Permite modificar un esquema contable.
        /// </summary>
        /// <param name="pCod">Codigo registro</param>
        /// <param name="pDesc">Nueva descripcion </param>
        /// <param name="pCol">Nueva cantidad de columnas.</param>
        /// <returns></returns>
        public bool Modificar(int pCod, string pDesc, int pCol, int pFormato, int pSeparador)
        {
            string sql = "UPDATE esquema SET descEsq=@pDesc, col=@pCol, formato=@pFormato, separador=@pSeparador" +
                         " WHERE cod=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            bool Correcto = false;
            int count = 0;

            Hashtable pData = new Hashtable();
            pData = Precarga(pCod);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDesc));
                            cmd.Parameters.Add(new SqlParameter("@pCol", pCol));
                            cmd.Parameters.Add(new SqlParameter("@pFormato", pFormato));
                            cmd.Parameters.Add(new SqlParameter("@pSeparador", pSeparador));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                //Escribimos en Log.
                                WriteEvento(pData, pCod, pDesc, pFormato, pSeparador, pCol);                               
                            }
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERRROR.
                Correcto = true;
            }

            return Correcto;
        }

        /// <summary>
        /// Elimina de todas las tables.
        /// </summary>
        /// <param name="pCod"></param>
        /// <param name="pDesc"></param>
        /// <returns></returns>
        public bool Eliminar(int pCod, string pDesc)
        {
            string sql = "DELETE FROM ESQUEMA WHERE cod=@pCod";
            string sqlDelCuenta = "DELETE FROM CUENTA WHERE codEs=@pCod";
            string sqlDelDetalle = "DELETE FROM detallecuenta WHERE cuenta=@pCod";
            string sqlDel = "DELETE FROM grupocontable WHERE codCuenta=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            SqlTransaction tran;
            bool Correcto = false;
            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        tran = cn.BeginTransaction();
                        try
                        {
                            //ELIMINAR DE TABLE GRUPO CONTABLE
                            using (cmd = new SqlCommand(sqlDel, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                                cmd.Transaction = tran;

                                count = cmd.ExecuteNonQuery();
                                if (count > 0)
                                {
                                    logRegistro log = new logRegistro(User.getUser(), $"SE ELIMINA GRUPO CONTABLE CODIGO {pCod}", "GRUPOCONTABLE", pCod.ToString(), "", "ELIMINAR");
                                    log.Log();
                                }
                            }

                            //ELIMINAR DE TABLA DETALLE CUENTA
                            using (cmd = new SqlCommand(sqlDelDetalle, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                                cmd.Transaction = tran;

                                count = cmd.ExecuteNonQuery();
                                if (count > 0)
                                {
                                    logRegistro log = new logRegistro(User.getUser(), $"SE ELIMINA DETALLECUENTA ELEMENTOS CON CODIGO {pCod}", "DETALLECUENTA", pCod.ToString(), "", "ELIMINAR");
                                    log.Log();
                                }
                            }

                            //ELIMINAR DE TABLA CUENTA
                            using (cmd = new SqlCommand(sqlDelCuenta, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                                cmd.Transaction = tran;

                                count = cmd.ExecuteNonQuery();
                                if (count > 0)
                                {
                                    logRegistro log = new logRegistro(User.getUser(), $"SE ELIMINA DE DETALLE CUENTA TODOS LOS ELEMENTOS CON CODIGO {pCod}", "CUENTA", pCod.ToString(), "", "ELIMINAR");
                                    log.Log();
                                }
                            }

                            //ELIMINAR ESQUEMA
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                                cmd.Transaction = tran;

                                count = cmd.ExecuteNonQuery();
                                if (count > 0)
                                {
                                    logRegistro log = new logRegistro(User.getUser(), $"SE ELIMINA ESQUEMA {pDesc}", "ESQUEMA", pCod.ToString(), "", "ELIMINAR");
                                    log.Log();
                                }
                            }

                            tran.Commit();
                            Correcto = true;
                        }
                        catch (SqlException ex)
                        {
                            tran.Rollback();
                            Correcto = false;
                        }                        
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERRROR.
                Correcto = true;
            }
            return Correcto;
        }

        /// <summary>
        /// Insica si un esquema esta siendo usado o no.
        /// </summary>
        /// <param name="pCod"></param>
        /// <returns></returns>
        public bool Usado(int pCod)
        {
            bool usado = false;
            string sql = "SELECT count(*) FROM cuenta WHERE codEs=@pCod";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    usado = true;
                            }
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return usado;
        }

        /// <summary>
        /// Indica si existe un registro.
        /// </summary>
        /// <param name="pCod"></param>
        /// <returns></returns>
        public bool Existe(int pCod)
        {
            bool usado = false;
            string sql = "SELECT count(*) FROM esquema WHERE cod=@pCod";
            SqlCommand cmd;
            SqlConnection cn;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            object data = cmd.ExecuteScalar();
                            if (data != null)
                            {
                                if (Convert.ToInt32(data) > 0)
                                    usado = true;
                            }
                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return usado;
        }

        #region "LOG"
        public Hashtable Precarga(int pCod)
        {
            string sql = "SELECT cod, descEsq, col, formato, separador FROM esquema WHERE cod=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            Hashtable pTabla = new Hashtable();
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    pTabla.Add("desc", (string)rd["descEsq"]);
                                    pTabla.Add("col", Convert.ToInt32(rd["col"]));
                                    pTabla.Add("formato", Convert.ToInt32(rd["formato"]));
                                    pTabla.Add("separador", Convert.ToInt32(rd["separador"]));
                                }
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return pTabla;
        }

        /// <summary>
        /// Escribe informacion en log.
        /// </summary>
        /// <param name="pData"></param>
        /// <param name="pCod"></param>
        /// <param name="pDesc"></param>
        /// <param name="pFormato"></param>
        /// <param name="pSeparador"></param>
        public void WriteEvento(Hashtable pData, int pCod, string pDesc, int pFormato, int pSeparador, int pCol)
        {
            if (pData.Count > 0)
            {
                if ((string)pData["desc"] != pDesc)
                {
                    logRegistro log = new logRegistro(User.getUser(), $"SE MODIFICA CAMPO DESC DE TABLA ESQUEMA CON CODIGO {pCod}", "ESQUEMA", (string)pData["desc"], pDesc, "MODIFICAR");
                    log.Log();
                }
                if (Convert.ToInt32(pData["formato"]) != pFormato)
                {
                    logRegistro log = new logRegistro(User.getUser(), $"SE MODIFICA CAMPO FORMATO DE TABLA ESQUEMA CON CODIGO {pCod}", "ESQUEMA", Convert.ToInt32(pData["formato"]) + "", pFormato.ToString(), "MODIFICAR");
                    log.Log();
                }
                if (Convert.ToInt32(pData["separador"]) != pSeparador)
                {
                    logRegistro log = new logRegistro(User.getUser(), $"SE MODIFICA CAMPO SEPARADRO DE TABLA ESQUEMA CON CODIGO {pCod}", "ESQUEMA", Convert.ToInt32(pData["separador"]) + "", pSeparador.ToString(), "MODIFICAR");
                    log.Log();
                }
                if (Convert.ToInt32(pData["col"]) != pCol)
                {
                    logRegistro log = new logRegistro(User.getUser(), $"SE MODIFICA CAMPO COL DE TABLA ESQUEMA CON CODIGO {pCod}", "ESQUEMA", Convert.ToInt32(pData["col"]) + "", pCol.ToString(), "MODIFICAR");
                    log.Log();
                }
            }
        }
        #endregion

        /// <summary>
        /// Setea informacion de esquema.
        /// </summary>
        /// <param name="pEsquema"></param>
        public void SetInfo(int pEsquema)
        {
            string sql = "SELECT cod, descEsq, col, formato, separador FROM esquema WHERE cod=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pEsquema));
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Cod = Convert.ToInt32(rd["cod"]);
                                    Desc = (string)rd["descEsq"];
                                    Col = Convert.ToInt32(rd["col"]);
                                    Formato = Convert.ToInt32(rd["formato"]);
                                    Separador = Convert.ToInt32(rd["separador"]);
                                    if (Separador == 1)
                                        SeparadorCad = "\t";
                                    else if (Separador == 2)
                                        SeparadorCad = ";";
                                    else if (Separador == 3)
                                        SeparadorCad = ",";
                                    else
                                        SeparadorCad = "";
                                }
                            }

                            cmd.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR.
            }
        }

        /// <summary>
        /// Retorna el esquema configurado como principal o predeterminado
        /// </summary>
        public int GetPredeterminado()
        {
            string sql = "SELECT cod FROM esquema where predeterminado=1";
            SqlCommand cmd;
            SqlConnection cn;

            int cod = 0;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            object data = cmd.ExecuteScalar();
                            if (data !=DBNull.Value)
                            {
                                cod = Convert.ToInt32(data);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return cod;
        }

    }

    /// <summary>
    /// Solo para representar cada uno de los campos que son claves foraneas de una tabla x
    /// </summary>
    class Relacion
    {
        /// <summary>
        /// Representa la tabla de origen de la relacion
        /// </summary>
        public string TablaOrigen { get; set; }
        /// <summary>
        /// Representa la columna de la table de origen de la relacion
        /// </summary>
        public string ColumnaOrigen { get; set; }
        /// <summary>
        /// Representa la tabla de referencia (tabla de clave foranea)
        /// </summary>
        public string TablaRef { get; set; }
        /// <summary>
        /// Representa la columna de referencia (clave foranea)
        /// </summary>
        public string ColumnaRef { get; set; }

        /// <summary>
        /// Obtiene un listado con todos los campos que son claves foraneas (Vienen de otras tablas).
        /// </summary>
        /// <param name="pTableName"></param>
        /// <returns></returns>
        public List<Relacion> GetRelaciones(string pTableName)
        {
            #region "QUERY"
            string sql = "select tab.name as [table], " +
                     "col.name as TablaColumna, " +
                     "pk_tab.name as TablaRef, " +
                     "pk_col.name as pkColumna, " +
                     "fk_cols.constraint_column_id as no, " +
                     "fk.name as fk_constraint_name " +
                      "from sys.tables tab " +
                      "inner " +
                      "join sys.columns col " +
                      "on col.object_id = tab.object_id " +
                      "left outer join sys.foreign_key_columns fk_cols " +
                      "on fk_cols.parent_object_id = tab.object_id " +
                     "and fk_cols.parent_column_id = col.column_id " +
                     "left outer join sys.foreign_keys fk " +
                     "on fk.object_id = fk_cols.constraint_object_id " +
                     "left outer join sys.tables pk_tab " +
                     "on pk_tab.object_id = fk_cols.referenced_object_id " +
                     "left outer join sys.columns pk_col " +
                     "on pk_col.column_id = fk_cols.referenced_column_id " +
                     "and pk_col.object_id = fk_cols.referenced_object_id " +
                     "WHERE tab.name = @pTableName AND fk_cols.constraint_column_id > 0 " +
                     "order by schema_name(tab.schema_id) + '.' + tab.name, " +
                     "col.column_id";
            #endregion

            SqlCommand cmd;
            SqlConnection cn;
            List<Relacion> Listado = new List<Relacion>();
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //SI ES AUSENTISMO O VACACION AGREGAMOS FICTICIAMENTE UNA RELACION 
                            //CONTRATO DE TABLA TRABAJADOR Y CONTRATO DE TABLA AUSENTISMO
                            //CONTRATO DE TABLA TRABAJADOR Y CONTRATO DE TABLA VACACION

                            cmd.Parameters.Add(new SqlParameter("@pTableName", pTableName));
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Listado.Add(new Relacion() {TablaOrigen = (string)rd["table"] ,
                                    ColumnaOrigen = (string)rd["TablaColumna"], TablaRef = (string)rd["TablaRef"],
                                    ColumnaRef = (string)rd["pkColumna"]});                    
                                    
                                }
                            }
                            cmd.Dispose();
                            rd.Close();

                            if (pTableName.ToLower().Equals("ausentismo"))
                            {
                                Listado.Add(new Relacion()
                                {
                                    TablaOrigen = "ausentismo",
                                    ColumnaOrigen = "contrato",
                                    TablaRef = "trabajador",
                                    ColumnaRef = "contrato"
                                });
                            }

                            if (pTableName.ToLower().Equals("vacacion"))
                            {
                                Listado.Add(new Relacion()
                                {
                                    TablaOrigen = "vacacion",
                                    ColumnaOrigen = "contrato",
                                    TablaRef = "trabajador",
                                    ColumnaRef = "contrato"
                                });
                            }

                            //if (pTableName.ToLower().Equals("vacaciondetalle"))
                            //{
                            //    Listado.Add(new Relacion()
                            //    {
                            //        TablaOrigen = "vacacion",
                            //        ColumnaOrigen = "contrato",
                            //        TablaRef = "trabajador",
                            //        ColumnaRef = "contrato"
                            //    });
                            //}

                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return Listado;
        }

        /// <summary>
        /// Indica si un campo es clave foranea
        /// </summary>
        /// <param name="pListado"></param>
        /// <param name="pField"></param>
        public bool EsForaneo(List<Relacion> pListado, string pField)
        {
            bool Existe = false;
            if (pListado.Count > 0)
            {
                foreach (var item in pListado)
                {
                    //SON CAMPOS IGUALES???
                    if (item.ColumnaOrigen.ToLower() == pField.ToLower())
                    { Existe = true; break; }
                }
            }

            return Existe;
        }

        /// <summary>
        /// Retorna toda la informcion del objeto seleccionado.
        /// </summary>
        /// <param name="pListado"></param>
        /// <param name="pField"></param>
        /// <returns></returns>
        public Relacion GetInfo(List<Relacion> pListado, string pField)
        {
            Relacion Information = new Relacion();
            if (pListado.Count > 0)
            {
                foreach (var item in pListado)
                {
                    if (item.ColumnaOrigen.ToLower() == pField)
                    {
                        Information = item;
                        break;
                    }
                }
            }

            return Information;
        }

        public List<formula> GetColumnsTable(string pTableName)
        {
            string sql = "SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS " +
                         "WHERE table_name = @pTableName ORDER BY column_name";

            List<formula> fr = new List<formula>();
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            cmd.Parameters.Add(new SqlParameter("@pTableName", pTableName));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //LLENAMOS LISTADO
                                    fr.Add(new formula() { key = (string)rd["column_name"], desc = (string)rd["column_name"] });
                                }
                            }
                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return fr;

        }

        /// <summary>
        /// Solo para item y grupodetalle e itemtrabajador
        /// </summary>
        /// <param name="pTableName"></param>
        /// <param name="pTableName2"></param>
        /// <returns></returns>
        public List<formula> GetColumns(string pTableName, string pTableName2, string pTableName3)
        {
            string sql = "SELECT (table_name + '.' + column_name) as column_name FROM INFORMATION_SCHEMA.COLUMNS " +
                         "WHERE table_name = @pTableName OR table_name=@pTable2 OR table_name=@pTable3 " +
                         "ORDER BY table_name, column_name";

            List<formula> fr = new List<formula>();
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            cmd.Parameters.Add(new SqlParameter("@pTableName", pTableName));
                            cmd.Parameters.Add(new SqlParameter("@pTable2", pTableName2));
                            cmd.Parameters.Add(new SqlParameter("@pTable3", pTableName3));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //LLENAMOS LISTADO
                                    fr.Add(new formula() { key = (string)rd["column_name"], desc = (string)rd["column_name"] });
                                }
                            }
                            cmd.Dispose();
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return fr;

        }

        /// <summary>
        /// Verifica si existe una columna dentro de una tabla, de acuerdo a listado de columnas de tabla.
        /// </summary>
        /// <param name="pColumnName">Nombre de columna</param>
        /// <param name="pColumnas">Listado de columnas de tabla.</param>
        /// <returns></returns>
        public bool ExisteColumna(string pColumnName, List<formula> pColumnas)
        {
            bool existe = false;
            formula formula = new formula() { desc = pColumnName, key = pColumnName };
            //int last = pColumnas.LastIndexOf(formula);
            //formula f = pColumnas.Find(x => x.desc == pColumnName);

            if (pColumnas.Count > 0)
            {
                foreach (var item in pColumnas)
                {
                    if (item.desc.ToLower() == pColumnName.ToLower())
                    { existe = true; break; }
                }
            }

            return existe;
        }
    }

    /// <summary>
    /// Representa la relacion entre la tabla grupodetalle y detallecuenta
    /// </summary>
    class ConfiguracionItem
    {
        /// <summary>
        /// item que tiene asociado el detallecuenta.
        /// </summary>
        public string ItemObservado { get; set; }
        /// <summary>
        /// Codigo item detalle cuenta.
        /// </summary>
        public int CodDetalleCuenta { get; set; }
        /// <summary>
        /// Tipo de seleccion de primer nivel.
        /// </summary>
        public int TipoSeleccionado { get; set; }
        /// <summary>
        /// Tipo de seleccion de segundo nivel.
        /// </summary>
        public string SubtipoSeleccionado { get; set; }
        /// <summary>
        /// Valor o campo a utilizar.
        /// </summary>
        public string ValorSeleccionado { get; set; }

        /// <summary>
        /// Haber o Debito
        /// </summary>
        public int Tipo { get; set; }

        /// <summary>
        /// Agrupa por rut??
        /// </summary>
        public bool AgrupaRut { get; set; }
    }

    /// <summary>
    /// Representa a la tabla observacion (Hoja de vida del trabajador)
    /// </summary>
    class Observacion
    {
        /// <summary>
        /// Codigo de uso interno.
        /// </summary>
        public int Cod { get; set; }
        /// <summary>
        /// Rut de la persona a la cual está asociada el registro
        /// </summary>
        public int RutPersona { get; set; }
        /// <summary>
        /// Fecha en que se realiza el registro
        /// </summary>
        public DateTime FechaReg { get; set; }
        /// <summary>
        /// Calificacion (1 a 7)
        /// </summary>
        public string Calificacion { get; set; }
        /// <summary>
        /// Descripcion o  detalle de la observacion
        /// </summary>
        public string Descripcion { get; set; }

        /// <summary>
        /// Agrega una nueva observacion
        /// </summary>
        public bool Add(string pRutTrab, string pCalificacion, DateTime pFechaReg, string pDescripcion)
        {
            string sql = "INSERT INTO observacion(cod, RutTrab, Descripcion, calificacion, Fecha) VALUES" +
                        "(@pCod, @pRutTrab, @pDesc, @pCalifi, @pFecha)";
            SqlConnection cn;
            SqlCommand cmd;

            int count = 0;
            bool correcto = false;

            int pCod = 0;
            //Obtenemos el ultimo code disponible
            pCod = GetLastCod(pRutTrab);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                            cmd.Parameters.Add(new SqlParameter("@pRutTrab", pRutTrab));
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDescripcion));
                            cmd.Parameters.Add(new SqlParameter("@pCalifi", pCalificacion));
                            cmd.Parameters.Add(new SqlParameter("@pFecha", pFechaReg));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;
                                logRegistro log = new logRegistro(User.getUser(), "SE AGREGA NUEVA OBSERVACION PARA EMPLEADO RUT N° "+ pRutTrab, "OBSERVACION", "", pCod.ToString(), "INGRESAR");
                                log.Log();
                            }
                                
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return correcto;
        }

        /// <summary>
        /// Permite modificar una observacion
        /// </summary>
        /// <param name="pCod"></param>
        /// <param name="pRutTrab"></param>
        /// <param name="pCalificacion"></param>
        /// <param name="pFechaReg"></param>
        /// <param name="pDescripcion"></param>
        /// <returns></returns>
        public bool Update(int pCod, string pRutTrab, string pCalificacion, string pDescripcion)
        {
            string sql = "UPDATE observacion SET Descripcion=@pDesc, calificacion=@pCalifi " +
                         "WHERE RutTrab=@pRutTrab AND cod=@pCod";

            SqlConnection cn;
            SqlCommand cmd;

            int count = 0;
            bool correcto = false;

            Hashtable data = new Hashtable();
            data = GetDataLog(pRutTrab, pCod);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                            cmd.Parameters.Add(new SqlParameter("@pRutTrab", pRutTrab));
                            cmd.Parameters.Add(new SqlParameter("@pDesc", pDescripcion));
                            cmd.Parameters.Add(new SqlParameter("@pCalifi", pCalificacion));               

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;
                                WriteLog(data, pDescripcion, pCalificacion);
                            }
                                
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return correcto;
        }

        /// <summary>
        /// Elimina una observacion
        /// </summary>
        public bool Delete(int pCod, string pRutTrab)
        {
            string sql = "DELETE from observacion WHERE RutTrab=@pRutTrab AND cod=@pCod";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool Correcto = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));
                            cmd.Parameters.Add(new SqlParameter("@pRutTrab", pRutTrab));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                Correcto = true;
                                logRegistro log = new logRegistro(User.getUser(), "SE ELIMINAR OBSERVACION PARA RUT: " + pRutTrab, "OBSERVACION", pCod.ToString(), "", "ELIMINAR");
                                log.Log();
                            }
                                
                           
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR..
            }

            return Correcto;

        }

        /// <summary>
        /// Entrega un datatable con todas las observaciones que tiene un trabajador.
        /// <para>Se necesita el numero de rut de la persona.</para>
        /// </summary>
        public DataTable GetDataSource(string pRutTrab)
        {
            string sql = "SELECT cod, RutTrab, descripcion, calificacion, fecha FROM observacion " +
                        "WHERE RutTrab=@pRutTrab " +
                        "ORDER BY cod";

            SqlCommand cmd;
            SqlConnection cn;
            SqlDataAdapter ad = new SqlDataAdapter();
            DataSet ds = new DataSet();
            DataTable tabla = new DataTable();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pRutTrab", pRutTrab));

                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "data");

                            if (ds.Tables.Count > 0)
                            {
                                tabla = ds.Tables[0];
                            }

                            ad.Dispose();
                            ds.Dispose();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return tabla;
        }

        /// <summary>
        /// Obtiene un codigo en base al ultimo codigo ingresado asociado a trabajador (pasra uso interno)
        /// </summary>
        private int GetLastCod(string pRutTrab)
        {
            string sql = "SELECT (ISNULL(MAX(cod), 0)) + 1 FROM observacion WHERE RutTrab=@pRutTrab";
            SqlCommand cmd;
            SqlConnection cn;

            int count = 0;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS    
                            cmd.Parameters.Add(new SqlParameter("@pRutTrab", pRutTrab));

                            count = Convert.ToInt32(cmd.ExecuteScalar());
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return count;
        }

        #region "LOG"
        /// <summary>
        /// Trae la informacion de un registro como hashtable
        /// </summary>
        /// <param name="pRutTrab"></param>
        /// <param name="pCod"></param>
        /// <returns></returns>
        private Hashtable GetDataLog(string pRutTrab, int pCod)
        {
            string sql = "SELECT RutTrab, cod, descripcion, fecha, calificacion FROM observacion WHERE cod=@pCod AND RutTrab=@pRutTrab " ;
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            Hashtable data = new Hashtable();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pRutTrab", pRutTrab));
                            cmd.Parameters.Add(new SqlParameter("@pCod", pCod));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    data.Add("descripcion", (string)rd["descripcion"]);
                                    data.Add("fecha", Convert.ToDateTime(rd["fecha"]));
                                    data.Add("calificacion", (string)rd["calificacion"]);
                                    data.Add("RutTrab", (string)rd["RutTrab"]);
                                    data.Add("cod", Convert.ToInt32(rd["cod"]));
                                }
                            }

                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return data;
        }

        /// <summary>
        /// Escribe registro en log
        /// </summary>
        private void WriteLog(Hashtable pData, string pnewDesc, string pNewCalifi)
        {
            if (pData.Count > 0)
            {
                if ((string)pData["descricion"] != pnewDesc)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE CAMBIA DESCRIPCION PARA OBSERVACION CODIGO " + pData["cod"] + ", Rut:" + pData["RutTrab"], "OBSERVACION", (string)pData["descripcion"], pnewDesc, "MODIFICAR");
                    log.Log();
                }
                if ((string)pData["calificacion"] != pNewCalifi)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE CAMBIA CALIFICACION PARA OBSERVACION CODIGO " + pData["cod"] + ", Rut:" + pData["RutTrab"], "OBSERVACION", (string)pData["calificacion"], pNewCalifi, "MODIFICAR");
                    log.Log();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Nos permite configurar el reporte que se generará para contabilidad
    /// </summary>
    class ReporteContable
    {

        public string c1 { get; set; }
        public string c2 { get; set; }
        public string c3 { get; set; }
        public string c4 { get; set; }
        public string c5 { get; set; }
        public string c6 { get; set; }
        public string c7 { get; set; }
        public string c8 { get; set; }
        public string n1 { get; set; }
        public string n2 { get; set; }
        public string n3 { get; set; }
        public string n4 { get; set; }
        public string n5 { get; set; }
        public string n6 { get; set; }
        public string n7 { get; set; }
        public string n8 { get; set; }
        public string s1 { get; set; }
        public string s2 { get; set; }
        public string s3 { get; set; }
        public string s4 { get; set; }
        public string s5 { get; set; }
        public string s6 { get; set; }
        public string s7 { get; set; }
        public string s8 { get; set; }
        public int num1 { get; set; }
        public int num2 { get; set; }
        public int num3 { get; set; }
        public int num4 { get; set; }
        public int num5 { get; set; }
        public int num6 { get; set; }
        public int num7 { get; set; }
        public int num8 { get; set; }
        public int or1 { get; set; }
        public int or2 { get; set; }
        public int or3 { get; set; }
        public int or4 { get; set; }
        public int or5 { get; set; }
        public int or6 { get; set; }
        public int or7 { get; set; }
        public int or8 { get; set; }


        /// <summary>
        /// INGRESA LOS DATOS PARA CONFIGURACION DEL REPORTE CONTABLE
        /// </summary>
        /// <param name="c1"></param>
        /// <param name="c2"></param>
        /// <param name="c3"></param>
        /// <param name="c4"></param>
        /// <param name="c5"></param>
        /// <param name="c6"></param>
        /// <param name="c7"></param>
        /// <param name="c8"></param>
        /// <param name="n1"></param>
        /// <param name="n2"></param>
        /// <param name="n3"></param>
        /// <param name="n4"></param>
        /// <param name="n5"></param>
        /// <param name="n6"></param>
        /// <param name="n7"></param>
        /// <param name="n8"></param>
        /// <param name="s1"></param>
        /// <param name="s2"></param>
        /// <param name="s3"></param>
        /// <param name="s4"></param>
        /// <param name="s5"></param>
        /// <param name="s6"></param>
        /// <param name="s7"></param>
        /// <param name="s8"></param>
        public void Insert(string c1, string c2, string c3, string c4 ,string c5, string c6, 
            string c7, string c8, string n1, string n2, string n3, string n4, string n5,
             string n6, string n7, string n8, string s1, string s2, string s3, string s4, 
             string s5, string s6, string s7, string s8, int num1, int num2, int num3, 
             int num4, int num5, int num6, int num7, int num8, int or1, int or2, int or3, 
             int or4, int or5, int or6, int or7, int or8
            )
        {
            string sql = "INSERT INTO repcontable (c1, c2, c3, c4, c5, c6, c7, " +
                "c8, n1, n2, n3, n4, n5, n6, n7, n8, s1, s2, s3, s4, s5, s6, s7, s8, " +
                "num1, num2, num3, num4, num5, num6, num7, num8, " +
                "or1, or2, or3, or4, or5, or6, or7, or8) " +
                "VALUES(@c1, @c2, @c3, @c4, @c5, @c6, @c7, @c8, @n1, @n2, @n3, @n4, " +
                "@n5, @n6, @n7,@n8, @s1, @s2, @s3, @s4, @s5, @s6, @s7, @s8, " +
                "@num1, @num2, @num3, @num4, @num5, @num6, @num7, @num8," +
                "@or1, @or2, @or3, @or4, @or5, @or6, @or7, @or8)";

            string sqldel = "DELETE FROM repcontable";

            SqlConnection cn;
            SqlCommand cmd;
            SqlTransaction tr;
            int count = 0;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        tr = cn.BeginTransaction();
                        try
                        {
                            //Eliminar registros previos
                            using (cmd= new SqlCommand(sqldel, cn))
                            {
                                cmd.Transaction = tr;
                                cmd.ExecuteNonQuery();
                            }

                            //Ingresar nuevos registros
                            using (cmd = new SqlCommand(sql, cn))
                            {
                                //parametros
                                cmd.Parameters.Add(new SqlParameter("@c1", c1));
                                cmd.Parameters.Add(new SqlParameter("@c2", c2));
                                cmd.Parameters.Add(new SqlParameter("@c3", c3));
                                cmd.Parameters.Add(new SqlParameter("@c4", c4));
                                cmd.Parameters.Add(new SqlParameter("@c5", c5));
                                cmd.Parameters.Add(new SqlParameter("@c6", c6));
                                cmd.Parameters.Add(new SqlParameter("@c7", c7));
                                cmd.Parameters.Add(new SqlParameter("@c8", c8));
                                cmd.Parameters.Add(new SqlParameter("@n1", n1));
                                cmd.Parameters.Add(new SqlParameter("@n2", n2));
                                cmd.Parameters.Add(new SqlParameter("@n3", n3));
                                cmd.Parameters.Add(new SqlParameter("@n4", n4));
                                cmd.Parameters.Add(new SqlParameter("@n5", n5));
                                cmd.Parameters.Add(new SqlParameter("@n6", n6));
                                cmd.Parameters.Add(new SqlParameter("@n7", n7));
                                cmd.Parameters.Add(new SqlParameter("@n8", n8));
                                cmd.Parameters.Add(new SqlParameter("@s1", s1));
                                cmd.Parameters.Add(new SqlParameter("@s2", s2));
                                cmd.Parameters.Add(new SqlParameter("@s3", s3));
                                cmd.Parameters.Add(new SqlParameter("@s4", s4));
                                cmd.Parameters.Add(new SqlParameter("@s5", s5));
                                cmd.Parameters.Add(new SqlParameter("@s6", s6));
                                cmd.Parameters.Add(new SqlParameter("@s7", s7));
                                cmd.Parameters.Add(new SqlParameter("@s8", s8));
                                cmd.Parameters.Add(new SqlParameter("@num1", num1));
                                cmd.Parameters.Add(new SqlParameter("@num2", num2));
                                cmd.Parameters.Add(new SqlParameter("@num3", num3));
                                cmd.Parameters.Add(new SqlParameter("@num4", num4));
                                cmd.Parameters.Add(new SqlParameter("@num5", num5));
                                cmd.Parameters.Add(new SqlParameter("@num6", num6));
                                cmd.Parameters.Add(new SqlParameter("@num7", num7));
                                cmd.Parameters.Add(new SqlParameter("@num8", num8));
                                cmd.Parameters.Add(new SqlParameter("@or1", or1));
                                cmd.Parameters.Add(new SqlParameter("@or2", or2));
                                cmd.Parameters.Add(new SqlParameter("@or3", or3));
                                cmd.Parameters.Add(new SqlParameter("@or4", or4));
                                cmd.Parameters.Add(new SqlParameter("@or5", or5));
                                cmd.Parameters.Add(new SqlParameter("@or6", or6));
                                cmd.Parameters.Add(new SqlParameter("@or7", or7));
                                cmd.Parameters.Add(new SqlParameter("@or8", or8));

                                cmd.Transaction = tr;
                                count = cmd.ExecuteNonQuery();
                                if (count > 0)
                                {
                                    XtraMessageBox.Show("Datos guardados correctamente", "Información", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                                else
                                {
                                    XtraMessageBox.Show("No se pudieron guardar los datos", "Información", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                }
                            }

                            tr.Commit();
                        }
                        catch (Exception ex)
                        {
                            tr.Rollback();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //error...
                XtraMessageBox.Show("No se pudo realizar opeación", "Información", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }



        /// <summary>
        /// Trae la informacion almacenada en la base de datos
        /// </summary>
        public void SetInfo()
        {
            string sql = "SELECT * FROM repcontable";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {

                                    bool x = Convert.ToBoolean(rd["num1"]);
                                    c1 = Convert.ToString(rd["c1"]);
                                    c2 = Convert.ToString(rd["c2"]);
                                    c3 = Convert.ToString(rd["c3"]);
                                    c4 = Convert.ToString(rd["c4"]);
                                    c5 = Convert.ToString(rd["c5"]);
                                    c6 = Convert.ToString(rd["c6"]);
                                    c7 = Convert.ToString(rd["c7"]);
                                    c8 = Convert.ToString(rd["c8"]);
                                    n1 = Convert.ToString(rd["n1"]);
                                    n2 = Convert.ToString(rd["n2"]);
                                    n3 = Convert.ToString(rd["n3"]);
                                    n4 = Convert.ToString(rd["n4"]);
                                    n5 = Convert.ToString(rd["n5"]);
                                    n6 = Convert.ToString(rd["n6"]);
                                    n7 = Convert.ToString(rd["n7"]);
                                    n8 = Convert.ToString(rd["n8"]);
                                    s1 = Convert.ToString(rd["s1"]);
                                    s2 = Convert.ToString(rd["s2"]);
                                    s3 = Convert.ToString(rd["s3"]);
                                    s4 = Convert.ToString(rd["s4"]);
                                    s5 = Convert.ToString(rd["s5"]);
                                    s6 = Convert.ToString(rd["s6"]);
                                    s7 = Convert.ToString(rd["s7"]);
                                    s8 = Convert.ToString(rd["s8"]);
                                    num1 = Convert.ToInt32(rd["num1"]);
                                    num2 = Convert.ToInt32(rd["num2"]);
                                    num3 = Convert.ToInt32(rd["num3"]);
                                    num4 = Convert.ToInt32(rd["num4"]);
                                    num5 = Convert.ToInt32(rd["num5"]);
                                    num6 = Convert.ToInt32(rd["num6"]);
                                    num7 = Convert.ToInt32(rd["num7"]);
                                    num8 = Convert.ToInt32(rd["num8"]);
                                    or1 = Convert.ToInt32(rd["or1"]);
                                    or2 = Convert.ToInt32(rd["or2"]);
                                    or3 = Convert.ToInt32(rd["or3"]);
                                    or4 = Convert.ToInt32(rd["or4"]);
                                    or5 = Convert.ToInt32(rd["or5"]);
                                    or6 = Convert.ToInt32(rd["or6"]);
                                    or7 = Convert.ToInt32(rd["or7"]);
                                    or8 = Convert.ToInt32(rd["or8"]);
                                }
                            }

                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }
        }
    }


    class OrdenContable
    {
        public int Col { get; set; }
        public int NumOrden { get; set; }
    }

    /// <summary>
    /// Permite configurar el detalle del comprobante contable (reporte)
    /// </summary>
    class ReporteContableDetalle
    {
        /// <summary>
        /// Codigo del reporte
        /// </summary>
        public int codRepo { get; set; }
        /// <summary>
        /// Numero de columna
        /// </summary>
        public int Column { get; set; }
        /// <summary>
        /// Nombre de la columna (titulo columna en reporte)
        /// </summary>
        public string ColumnName { get; set; }
        /// <summary>
        /// Valor a buscar y remplazar en columna
        /// </summary>
        public string ColumnValue { get; set; }

        /// <summary>
        /// Indica la configuracion que tendrá un elemento del reporte contable
        /// </summary>
        /// <param name="pReporte"></param>
        /// <param name="Column"></param>
        /// <param name="pColumnName"></param>
        /// <param name="pColumnValue"></param>
        /// <returns></returns>
        public bool AddDetalleReporte(int pReporte, int Column, string pColumnName, string pColumnValue)
        {
            string sql = "INSERT INTO detrepocontable(repo, col, titulo, valor) VALUES(@pRepo, @pCol, @pCaption, @pValue)";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool correcto = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pRepo", pReporte));
                            cmd.Parameters.Add(new SqlParameter("@pCol", Column));
                            cmd.Parameters.Add(new SqlParameter("@pCaption", pColumnName));
                            cmd.Parameters.Add(new SqlParameter("@pValue", pColumnValue));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;

                                logRegistro log = new logRegistro(User.getUser(), "SE AGREGA CONFIGURACION DETALLE PARA REPORTE CONTABLE CODIGO " + pReporte, "REPCONTABLE", "", pColumnName, "INGRESAR");
                                log.Log();
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return correcto;
        }

        /// <summary>
        /// Permite modificar la informacion de un elemento del reporte contable
        /// </summary>
        /// <param name="pReporte"></param>
        /// <param name="Column"></param>
        /// <param name="pColumnName"></param>
        /// <param name="pColumnValue"></param>
        /// <returns></returns>
        public bool UpdateDetalleReporte(int pReporte, int Column, string pColumnName, string pColumnValue)
        {
            string sql = "UPDATE detrepocontable SET titulo=@pCaption, valor=@pValue" +
                         " WHERE repo=@pRepo AND col=@pCol";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool correcto = false;

            Hashtable data = new Hashtable();
            data = GetData(pReporte, Column);

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pRepo", pReporte));
                            cmd.Parameters.Add(new SqlParameter("@pCol", Column));
                            cmd.Parameters.Add(new SqlParameter("@pCaption", pColumnName));
                            cmd.Parameters.Add(new SqlParameter("@pValue", pColumnValue));

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;

                                //Escribe registro en log
                                WriteLog(data, pColumnValue, pColumnName);
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return correcto;
        }

        /// <summary>
        /// Permite eliminar un elemento del detalle reporte contable.
        /// </summary>
        /// <param name="pReporte"></param>
        /// <param name="Column"></param>
        /// <param name="pColumnName"></param>
        /// <returns></returns>
        public bool EliminaDetalleReporte(int pReporte, int Column, string pColumnName)
        {
            string sql = "DELETE FROM detrepocontable WHERE repo=@pRepo AND col=@pCol";
            SqlCommand cmd;
            SqlConnection cn;
            int count = 0;
            bool correcto = false;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pRepo", pReporte));
                            cmd.Parameters.Add(new SqlParameter("@pCol", Column));                                                 

                            count = cmd.ExecuteNonQuery();
                            if (count > 0)
                            {
                                correcto = true;

                                logRegistro log = new logRegistro(User.getUser(), "SE ELIMINAR ELEMENTO DETALLE REPORTE CONTABLE " + pColumnName, "DETREPOCONTABLE", pColumnName, "", "ELIMINAR");
                                log.Log();
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return correcto;
        }

        /// <summary>
        /// Entrega listado con todas las colummnas del reporte.
        /// </summary>
        /// <returns></returns>
        public List<ReporteContableDetalle> GetDetail()
        {
            string sql = "SELECT repo, col, titulo, valor FROM detrepocontable ORDER BY col asc";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            List<ReporteContableDetalle> Listado = new List<ReporteContableDetalle>();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    //LLENAMOS LISTADO DE OBJETOS
                                    Listado.Add(new ReporteContableDetalle() { codRepo = Convert.ToInt32(rd["repo"]),
                                    Column = Convert.ToInt32(rd["col"]), ColumnName = (string)rd["titulo"],
                                    ColumnValue = (string)rd["valor"]});
                                }
                            }
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return Listado;
        }

        #region "REPORTE"
        private Hashtable GetData(int pRepo, int pCol)
        {
            string sql = "SELECT repo, col, titulo, valor FROM detrepocontable WHERE repo=@pCod AND col=@pCol";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            Hashtable Data = new Hashtable();

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pCod", pRepo));
                            cmd.Parameters.Add(new SqlParameter("@pCol", pCol));

                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    Data.Add("titulo", (string)rd["titulo"]);
                                    Data.Add("valor", (string)rd["valor"]);                                    
                                }
                            }
                            rd.Close();
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
            }

            return Data;
        }

        private void WriteLog(Hashtable pData, string pNewValue, string pNewCaption)
        {
            if (pData.Count > 0)
            {
                if ((string)pData["titulo"] != pNewCaption)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA TITULO COLUMNA " + pData["titulo"], "DETREPOCONTABLE", pData["titulo"].ToString(), pNewCaption, "MODIFICAR");
                    log.Log();
                }

                if ((string)pData["valor"] != pNewValue)
                {
                    logRegistro log = new logRegistro(User.getUser(), "SE MODIFICA VALOR COLUMNA " + pData["titulo"], "DETREPOCONTABLE", pData["valor"].ToString(), pNewValue, "MODIFICAR");
                    log.Log();
                }
            }
        }

        
        #endregion
    }

    /// <summary>
    /// Para declaracion jurada de impuestos.
    /// </summary>
    class Declaracion
    {
        /// <summary>
        /// Codigo interno de la empresa (viene de tabla empresa)
        /// </summary>
        public int codEmpresa { get; set; }
        /// <summary>
        /// Rut del trabajador.
        /// </summary>
        public string rutTrabajador { get; set; }
        /// <summary>
        /// Periodo evaluado
        /// </summary>
        public int Periodo { get; set; }
        /// <summary>
        /// Remuneracion bruta
        /// </summary>
        public double RemBruta { get; set; }        
        /// <summary>
        /// Remuneracion imponible periodo observado
        /// </summary>
        public double RemImponible { get; set; }
        /// <summary>
        /// Cotizacion para un periodo especifico
        /// </summary>
        public int Cotiza { get; set; }
        /// <summary>
        /// Valor que paga por impuesto en un periodo especifico
        /// </summary>
        public int Impuesto { get; set; }
        public int Impuesto14 { get; set; }
        public int ppm { get; set; }
        /// <summary>
        /// Nombre completo del trabajador
        /// </summary>
        public int NombreTrabajador { get; set; }
        /// <summary>
        /// Relacion contractual
        /// </summary>
        public string RelCon { get; set; }
        /// <summary>
        /// Monto cotizacion Afp
        /// </summary>
        public double MontoAfp { get; set; }
        /// <summary>
        /// Rut entidad afp
        /// </summary>
        public string RutAfp { get; set; }
        /// <summary>
        /// Monto cotizacion salud
        /// </summary>
        public double MontoIsapre { get; set; }
        /// <summary>
        /// Rut entidad isapre o fonasa
        /// </summary>
        public string RutIsapre { get; set; }
        /// <summary>
        /// Codigo sence
        /// </summary>
        public string sence { get; set; }
        public double Impuesto29 { get; set; }
        public double Impuesto14a { get; set; }
        public double exento { get; set; }
        public double zonafa { get; set; }
        public double OtroExentos { get; set; }

        /// <summary>
        /// Retorna un datatable con toda la informacion encontrada dentro de año.
        /// </summary>
        /// <param name="pYear">Año que se desea consultar</param>
        /// <param name="pLimite95RutsParaPruebasSII">Para realizar pruebas con SII</param>
        /// <returns></returns>
        public DataTable GetInformationYear(int pYear, bool pLimite95RutsParaPruebasSII = false)
        {
            #region "SQL"
            string sql = "select rut, anomes as periodo, rentaneta, IIF(imponible > topeafp, topeafp, imponible) as imponible, impuesto, nombre, previsi, " +
                "rentanogravada, mayorrenta, rebajaextrema, rentaexenta, leyessociales " +
                "FROM( SELECT rut, anomes, SUM(rentaneta) as rentaneta, SUM(imponible) as imponible, SUM(impuesto) as impuesto, nombre, relcon, SUM(previsi)as previsi," +
                "SUM(rentanogravada) as rentanogravada, SUM(mayorrenta) mayorrenta, SUM(rebajaextrema) as rebajaextrema, SUM(rentaexenta) as rentaexenta, " +
                "(SELECT ROUND(topeafp * UF, 0) FROM valoresmes WHERE valoresmes.anomes = data.anomes) as topeafp, " +
                "SUM(SALUD + AFP + MUTUALI + SANNA + SEGINV + SCEMPLE + SCEMPRE) AS leyessociales " +
                "FROM(SELECT trabajador.rut, trabajador.contrato, calculomensual.anomes, systributo as RentaNeta, systimp as Imponible, " +
                "(SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'IMPUEST' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0) as Impuesto, " +
                "CONCAT(trabajador.apepaterno, ' ', trabajador.apematerno, ' ', trabajador.nombre) as Nombre,  'C' as relcon, " +
                "(SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND(coditem = 'PREVISI' OR coditem = 'SCEMPLE') " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0 ) as previsi, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SALUD' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SALUD, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'PREVISI' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as AFP, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'MUTUALI' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as MUTUALI, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SANNA' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SANNA, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SEGINV' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SEGINV, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SCEMPLE' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SCEMPLE, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SCEMPRE' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SCEMPRE, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0 AND(tipo = 2 OR tipo = 3)), 0) as rentanogravada, 0 as mayorrenta, " +
                "0 as rebajaextrema, 0 as rentaexenta, ROUND(systopeafp, 0) as topeafp " +
                "FROM calculomensual  INNER JOIN trabajador ON trabajador.contrato = calculomensual.contrato  AND trabajador.anomes = calculomensual.anomes  " +
                "WHERE(calculomensual.anomes >= @pInicio AND calculoMensual.anomes <= @pTermino)  AND trabajador.contrato = trabajador.contrato " +
                "AND status = 1) as data  GROUP BY rut, anomes, nombre, relcon) as data2  ORDER BY rut, anomes";

            if (pLimite95RutsParaPruebasSII) { 
                sql = "select rut, anomes as periodo, rentaneta, IIF(imponible > topeafp, topeafp, imponible) as imponible, impuesto, 0 as impuestoaccesoriasabril, nombre, previsi, " +
                "rentanogravada, mayorrenta, rebajaextrema, rentaexenta, leyessociales " +
                "FROM( SELECT rut, anomes, SUM(rentaneta) as rentaneta, SUM(imponible) as imponible, SUM(impuesto) as impuesto, nombre, relcon, SUM(previsi)as previsi," +
                "SUM(rentanogravada) as rentanogravada, SUM(mayorrenta) mayorrenta, SUM(rebajaextrema) as rebajaextrema, SUM(rentaexenta) as rentaexenta, " +
                "(SELECT ROUND(topeafp * UF, 0) FROM valoresmes WHERE valoresmes.anomes = data.anomes) as topeafp, " +
                "SUM(SALUD + AFP + MUTUALI + SANNA + SEGINV + SCEMPLE + SCEMPRE) AS leyessociales " +
                "FROM(SELECT trabajador.rut, trabajador.contrato, calculomensual.anomes, systributo as RentaNeta, systimp as Imponible, " +
                "(SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'IMPUEST' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0) as Impuesto, " +
                "CONCAT(trabajador.apepaterno, ' ', trabajador.apematerno, ' ', trabajador.nombre) as Nombre,  'C' as relcon, " +
                "(SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND(coditem = 'PREVISI' OR coditem = 'SCEMPLE') " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0 ) as previsi, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SALUD' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SALUD, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'PREVISI' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as AFP, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'MUTUALI' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as MUTUALI, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SANNA' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SANNA, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SEGINV' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SEGINV, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SCEMPLE' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SCEMPLE, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato AND coditem = 'SCEMPRE' " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0),0) as SCEMPRE, " +
                "ISNULL((SELECT SUM(valorcalculado) FROM itemtrabajador  WHERE itemtrabajador.contrato = trabajador.contrato " +
                "AND itemtrabajador.anomes = calculomensual.anomes AND itemtrabajador.suspendido = 0 AND(tipo = 2 OR tipo = 3)), 0) as rentanogravada, 0 as mayorrenta, " +
                "0 as rebajaextrema, 0 as rentaexenta, ROUND(systopeafp, 0) as topeafp " +
                "FROM calculomensual  INNER JOIN trabajador ON trabajador.contrato = calculomensual.contrato  AND trabajador.anomes = calculomensual.anomes  " +
                "WHERE(calculomensual.anomes >= @pInicio AND calculoMensual.anomes <= @pTermino)  AND trabajador.contrato = trabajador.contrato " +
                "AND status = 1" +
                //Límite de 95 ruts
                "AND trabajador.rut IN(SELECT distinct TOP 95 rut from trabajador)" +
                ") as data  GROUP BY rut, anomes, nombre, relcon) as data2  ORDER BY rut, anomes";
            }

            #endregion

            SqlConnection cn;
            SqlCommand cmd;
            DataSet ds = new DataSet();
            SqlDataAdapter ad = new SqlDataAdapter();
            DataTable tabla = new DataTable();

            if (fnSistema.IsNumeric(pYear.ToString()) == false)
                return null;

            string pInicio = "", pTermino = "";
            pInicio = pYear + "01";
            pTermino = pYear + "12";

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROS
                            cmd.Parameters.Add(new SqlParameter("@pInicio", pInicio));
                            cmd.Parameters.Add(new SqlParameter("@pTermino", pTermino));

                            ad.SelectCommand = cmd;
                            ad.Fill(ds, "data");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                tabla = ds.Tables[0];
                            }

                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //ERROR...
                tabla = null;
            }


            return tabla;

        }
    }


    /// <summary>
    /// Representa la primera seccion de la declaracion juarada
    /// Contiene datos generales de la declaracion, solo cuando es realizada por internet
    /// </summary>
    class Seccion0
    {
        /// <summary>
        /// 1 - Tipo de registro (Largo=1)
        /// </summary>
        public int Tipo { get; set; } = 0;
        /// <summary>
        /// 2-  Año tributario (Año de la declaración), Largo = 4
        /// </summary>
        public int Anio { get; set; }
        /// <summary>
        /// 3 - Numero formulario, Largo = 4
        /// </summary>
        public int NumFormulario { get; set; }
        /// <summary>
        /// 4 - Numero de rut declarante (Sin digito verificador), Largo = 8
        /// </summary>
        public string Rut { get; set; }
        /// <summary>
        /// 5 - Digito verificador, Largo=1
        /// </summary>
        public string Digito { get; set; }
        /// <summary>
        /// 6 - Total de registros a transmitir, Largo = 7
        /// </summary>
        public string Registros { get; set; }
        /// <summary>
        /// 7 - Código empresa (Autorizada por ssi), Largo = 2
        /// </summary>
        public string CodEmpresa { get; set; } = "51";
        /// <summary>
        /// 8 - Número de cliente, Largo = 4
        /// </summary>
        public string NumCliente { get; set; }
        /// <summary>
        /// 9 - Checksum declarante, Largo = 10
        /// </summary>
        public string CheckSum { get; set; }
        /// <summary>
        /// 10- CheckSum SII, Largo = 10
        /// </summary>
        public string ChemSumSii { get; set; }
        /// <summary>
        /// 11 - Código de presentacion, Largo = 1
        /// </summary>
        public string CodPresentacion { get; set; } = "I";
        /// <summary>
        /// 12 - Tipo de declaracion, Largo = 1
        /// O: Original, R: Rectificatoria
        /// </summary>
        public string TipoDeclaracion { get; set; }
        /// <summary>
        /// 13 - Numero de Folio, Largo = 7
        /// </summary>
        public string Folio { get; set; }
        /// <summary>
        /// 14 - Dia fecha de envío, Largo = 2
        /// </summary>
        public string DiaEnvio { get; set; }
        /// <summary>
        /// 15 - Mes fecha de envio, Largo = 2
        /// </summary>
        public string MesEnvio { get; set; }
        /// <summary>
        /// 16 - Año de envío, Largo = 4
        /// </summary>
        public string AnEnvio { get; set; }
        /// <summary>
        /// 17 - Hora envío, Largo = 2
        /// </summary>
        public string HoraEnvio { get; set; }
        /// <summary>
        /// 18 - Minuto de envío, Largo = 2
        /// </summary>
        public string MinEnvio { get; set; }
        /// <summary>
        /// 19 - Segundo de Envío, Largo = 4
        /// </summary>
        public string SegEnvio { get; set; }
        /// <summary>
        /// 20 - Numero de version, Largo = 2
        /// </summary>
        public string NVersion { get; set; }
        /// <summary>
        /// 21 - Numero de atencion, Largo = 8
        /// </summary>
        public string NAtencion { get; set; }
        /// <summary>
        /// Espacios en blanco, Largo = 42
        /// </summary>
        public string Blanco { get; set; } = new string(' ', 42);

        /// <summary>
        /// Permite configurar cada uno de los campos de la seccion 0 o tipo 0
        /// </summary>
        /// <param name="emp">Objeto de clase empresa</param>
        /// <param name="pYear">Año tributario</param>
        /// <param name="pNumFormulario">Numero de formulario que se desea declarar</param>
        /// <param name="pRegistros">Cantidad de registros que se quieren declarar</param>
        /// <param name="pNumFolio">Numero de folio correlativo</param>
        /// <param name="pTipoDeclaracion">Tipo de declaracion; Original o rectificatoria</param>
        public void SetSection(Empresa emp, int pYear, int pNumFormulario, string pRegistros, string pNumFolio, string pTipoDeclaracion, string pCodEmpresa, string pNumVersion)
        {
            Anio = pYear;
            NumFormulario = pNumFormulario;
            if (pNumFormulario == 1887)
                Registros = fnSistema.GetFormat(pRegistros, 7, 1);
            else if (pNumFormulario == 1879)
                Registros = fnSistema.GetFormat(pRegistros, 10, 1);

            Folio = pNumFolio;
            TipoDeclaracion = pTipoDeclaracion;
            CodEmpresa = pCodEmpresa;
            NumCliente = fnSistema.GetFormat("0", 4, 1);
            CheckSum = fnSistema.GetFormat("0", 10, 1);
            ChemSumSii = fnSistema.GetFormat("0", 10, 1);
            NVersion = fnSistema.GetFormat(pNumVersion, 2, 1);
            NAtencion = fnSistema.GetFormat("0", 8, 1);            

            //empresa
            Rut = fnSistema.GetRutsindv(emp.Rut);
            Digito = fnSistema.Getdigito(emp.Rut);

            //Fechas
            //DiaEnvio = DateTime.Now.Date.ToString("dd");
            //MesEnvio = DateTime.Now.Date.ToString("MM");
            //AnEnvio = DateTime.Now.Date.ToString("yyyy");
            //HoraEnvio = DateTime.Now.ToString("HH");
            //MinEnvio = DateTime.Now.ToString("mm");
            //SegEnvio = fnSistema.GetFormat(DateTime.Now.ToString("ss"), 4, 1);

            DiaEnvio = fnSistema.GetFormat("0", 2, 1);
            MesEnvio = fnSistema.GetFormat("0", 2, 1);
            AnEnvio = fnSistema.GetFormat("0", 4, 1);
            HoraEnvio = fnSistema.GetFormat("0", 2, 1);
            MinEnvio = fnSistema.GetFormat("0", 2, 1);
            SegEnvio = fnSistema.GetFormat("0", 4, 1);

        }

        public string GetLine()
        {
            StringBuilder str = new StringBuilder();

            str.Append(Tipo.ToString());
            str.Append(Anio.ToString());
            str.Append(NumFormulario.ToString());
            str.Append(Rut);
            str.Append(Digito);
            str.Append(Registros);
            str.Append(CodEmpresa);
            str.Append(NumCliente.ToString());
            str.Append(CheckSum.ToString());
            str.Append(ChemSumSii.ToString());
            str.Append(CodPresentacion);
            str.Append(TipoDeclaracion);
            str.Append(Folio.ToString());
            str.Append(DiaEnvio);
            str.Append(MesEnvio);
            str.Append(AnEnvio);
            str.Append(HoraEnvio);
            str.Append(MinEnvio);
            str.Append(SegEnvio);
            str.Append(NVersion.ToString());
            str.Append(NAtencion.ToString());
            if (NumFormulario == 1887)
                str.Append(new string(' ', 237));
            else if (NumFormulario == 1879)
                str.Append(new string(' ', 115));

            //Retorna linea completa
            //string d = str.ToString();
            return str.ToString();
        }
    }

    /// <summary>
    /// Representa a los datos de tipo 1, generalmente son datos del declarante o institucion
    /// y datos de la empresa
    /// </summary>
    class Seccion1
    {

        #region "1.1"
  
        /// <summary>
        /// Anio tributario, Largo=4
        /// </summary>
        public int Anio { get; set; }
        /// <summary>
        /// Numero de formulario
        /// </summary>
        public string Formulario{ get; set; } 
        /// <summary>
        /// Codigo de presentacion, Largo = 1
        /// </summary>        
        public string CodigoPresentacion { get; set; } = "I";
        /// <summary>
        /// Numero de folio, Largo = 7
        /// </summary>
        public string Folio { get; set; }
        /// <summary>
        /// Tipo de declaracion, puede ser Original o rectificatoria, Largo = 1
        /// </summary>
        public string TipoDeclaracion { get; set; }

        #region "SOLO EN CASO DE RECTIFICATORIA"
        /// <summary>
        /// Rut rectificatoria
        /// </summary>
        public string RutRec { get; set; }
        /// <summary>
        /// Digito verificador rectificatoria
        /// </summary>
        public string DigRec { get; set; }
        /// <summary>
        /// Codigo de presentacion rectificatoria
        /// </summary>
        public string CodPresentacionRec { get; set; }
        /// <summary>
        /// Numero de folio rectificatoria
        /// </summary>
        public string FolioRec { get; set; }
        #endregion

        public string Blaanco { get; set; } = new string(' ', 6);
        /// <summary>
        /// Rut declarante (Empresa)
        /// </summary>
        public string Rut { get; set; }
        /// <summary>
        /// Digito declarante (Empresa)
        /// </summary>
        public string digito { get; set; }
        /// <summary>
        /// Razon social o nombre 
        /// </summary>
        public string RazonSocial { get; set; }
        /// <summary>
        /// Espacios en blanco.
        /// </summary>
        public string Blanco { get; set; } = new string(' ', 42);
        #endregion

        #region "1.2"
        /// <summary>
        /// Direccion postal, Largo = 35
        /// </summary>

        public string DireccionPostal { get; set; }
        /// <summary>
        /// Comuna, Largo = 15
        /// </summary>
        public string Comuna { get; set; }
        /// <summary>
        /// Correo, Largo = 30
        /// </summary>

        public string Correo { get; set; }
        /// <summary>
        /// fax, Largo = 2
        /// </summary>
        public string FaxcdPais { get; set; }
        /// <summary>
        ///Codigo area ciudad, Largo = 2
        /// </summary>
        public string FaxAreaCiudad { get; set; }
        /// <summary>
        /// Telefono, Largo = 7
        /// </summary>
        public string FaxTelefono { get; set; }
        public string Blanco2 { get; set; } = new string(' ', 47);

        #endregion

        #region "1.3"
        /// <summary>
        /// Telefono codigo de pais, Largo = 2
        /// </summary>
        public string TelCodPais { get; set; }
        /// <summary>
        /// Telefono codigo area ciudad, Largo = 2
        /// </summary>
        public string TelCodCiudad { get; set; }
        /// <summary>
        /// Telefono, lARGO = 7
        /// </summary>
        public string Fono { get; set; }

        public string Blanco3 { get; set; } = new string(' ', 35);
        /// <summary>
        /// Codigo de empresa, Largo = 2
        /// </summary>
        public string CodEmpresa { get; set; }
        /// <summary>
        /// Numero de cliente, Largo = 4
        /// </summary>
        public string NCliente { get; set; }
        /// <summary>
        /// Unidad, Largo = 5
        /// </summary>
        public string Cunidad { get; set; }
        /// <summary>
        /// Numero de caja, Largo=3
        /// </summary>
        public string CNumCaja { get; set; }
        /// <summary>
        /// Numero de paquete, Largo = 5
        /// </summary>
        public string NumeroPaquete { get; set; }

        public string Blanco4 { get; set; } = new string(' ', 95);
        #endregion

        /// <summary>
        /// Para formulario 1887
        /// </summary>
        /// <param name="emp"></param>
        /// <param name="pAnio"></param>
        /// <param name="pNumFormulario"></param>
        /// <param name="pNumFolio"></param>
        /// <param name="pTipoDec"></param>
        /// <param name="pRutAnterior"></param>
        /// <param name="pDigAnterior"></param>
        /// <param name="pCodEmpresa"></param>
        /// <param name="pNumFolAnterior"></param>
        public void SetSections(Empresa emp, int pAnio, string pNumFormulario, string pNumFolio, string pTipoDec,
            string pRutAnterior, string pDigAnterior, string pCodEmpresa, string pNumFolAnterior)
        {
            //1.1
            Anio = pAnio;
            Formulario = pNumFormulario;
            Folio = pNumFolio;
            TipoDeclaracion = pTipoDec;

            //Si es original no aplica estos campos...
            if (pTipoDec.ToLower() == "o")
            {
                RutRec = fnSistema.GetFormat("0", 8, 1);
                DigRec = "0";
                CodPresentacionRec = " ";
                FolioRec = fnSistema.GetFormat("0", 7, 1);
            }
            else
            {
                RutRec = fnSistema.GetRutsindv(emp.Rut);
                DigRec = fnSistema.Getdigito(emp.Rut);
                CodPresentacionRec = "I";
                FolioRec = fnSistema.GetFormat(pNumFolAnterior, 7, 1);
            }

            Rut = fnSistema.GetRutsindv(emp.Rut);
            digito = fnSistema.Getdigito(emp.Rut);
            RazonSocial = fnSistema.GetFormat(emp.Razon, 30, 2);

            //1.2
            DireccionPostal = fnSistema.GetFormat(emp.Direccion, 35, 2);
            Comuna = fnSistema.GetFormat(emp.Comuna, 15, 2);
            Correo = fnSistema.GetFormat(emp.EmailEmp, 30, 2);
            FaxcdPais = fnSistema.GetFormat(emp.CodigoPais, 2, 1);
            FaxAreaCiudad = fnSistema.GetFormat(emp.CodigoArea, 2, 1);
            FaxTelefono = fnSistema.GetFormat(emp.Telefono, 7, 1);

            //1.3
            TelCodPais = fnSistema.GetFormat(emp.CodigoPais, 2, 1);
            TelCodCiudad = fnSistema.GetFormat(emp.CodigoArea, 2, 1);
            Fono = fnSistema.GetFormat(emp.Telefono, 7, 1);
            CodEmpresa = pCodEmpresa;
            NCliente = fnSistema.GetFormat("0", 4, 1);
            Cunidad = fnSistema.GetFormat("0", 5, 1);
            CNumCaja = fnSistema.GetFormat("0", 3, 1);
            NumeroPaquete = fnSistema.GetFormat("0", 5, 1);

        }

        public string GetLine()
        {
            StringBuilder str = new StringBuilder();

            //1.1
            str.Append("1");
            str.Append("1");
            str.Append(Anio);
            str.Append(Formulario);
            str.Append(CodigoPresentacion);
            str.Append(Folio);
            str.Append(TipoDeclaracion);
            str.Append(RutRec);
            str.Append(DigRec);
            str.Append(CodPresentacionRec);
            str.Append(FolioRec);
            str.Append(new string(' ', 6));
            str.Append(Rut);
            str.Append(digito);
            str.Append(RazonSocial);
            str.AppendLine(new string(' ', 242));
            //1.2
            str.Append("1");
            str.Append("2");
            str.Append(DireccionPostal);
            str.Append(Comuna);
            str.Append(Correo);
            str.Append(FaxcdPais);
            str.Append(FaxAreaCiudad);
            str.Append(FaxTelefono);
            str.AppendLine(new string(' ', 230));

            //1.3
            str.Append("1");
            str.Append("3");
            str.Append(TelCodPais);
            str.Append(TelCodCiudad);
            str.Append(Fono);
            str.Append(' ');
            str.Append(CodEmpresa);
            str.Append(NCliente);
            str.Append(Cunidad);
            str.Append(CNumCaja);
            str.Append(NumeroPaquete);
            str.Append(new string(' ', 290));            

            return str.ToString();
        }

        /// <summary>
        /// Para formulario 1879
        /// </summary>
        public string GetSections1879(Empresa emp, int pAnio, string pNumFormulario, string pNumFolio, string pTipoDec,
            string pCodEmpresa, string pNumFolAnterior)
        {
            StringBuilder str = new StringBuilder();

            str.Append("1");
            str.Append("1");
            str.Append(pAnio.ToString() + "00");
            str.Append(fnSistema.GetFormat(pNumFormulario, 4, 1));
            str.Append("I");
            str.Append(fnSistema.GetFormat(pNumFolio, 7, 1));
            str.Append(pTipoDec);
            //Datos para caso que sea original, dejamos en blanco
            if (pTipoDec.ToLower().Equals("o"))
            {
                //Rut anterior
                str.Append(fnSistema.GetFormat("0", 8, 1));
                //Digito verificador
                str.Append(fnSistema.GetFormat("0", 1, 1));
                //Codigo de presentacion
                str.Append(" ");
                //Folio anterior
                str.Append(fnSistema.GetFormat("0", 7, 1));
            }
            else if (pTipoDec.ToLower().Equals("a") || pTipoDec.ToLower().Equals("r"))
            {
                //Rut anterior
                str.Append(fnSistema.GetRutsindv(emp.Rut));
                //Digito verificador
                str.Append(fnSistema.Getdigito(emp.Rut));
                //Codigo de presentacion
                str.Append("I");
                //Folio anterior
                str.Append(pNumFolAnterior);
            }
            str.Append(new string(' ', 6));
            //Rut declarante
            str.Append(fnSistema.GetRutsindv(emp.Rut));
            str.Append(fnSistema.Getdigito(emp.Rut));
            //Razon social
            str.Append(fnSistema.GetFormat(emp.Razon, 30, 2));
            str.Append(fnSistema.GetFormat(emp.Direccion, 35, 2));
            str.Append(fnSistema.GetFormat(emp.Comuna, 15, 2));
            str.Append(fnSistema.GetFormat(emp.EmailEmp, 30, 2));
            //FAX Y TELEFONO
            str.Append(emp.CodigoPais);
            str.Append(emp.CodigoArea);
            str.Append(emp.Telefono);
            str.Append(emp.CodigoPais);
            str.Append(emp.CodigoArea);
            str.Append(emp.Telefono);
            //CODIGO CERTIFICACION
            str.Append(pCodEmpresa);
            str.Append(fnSistema.GetFormat("0", 4, 1));
            //LOCALIZACION DEL DOCUMENTO
            str.Append(fnSistema.GetFormat("0", 5, 1));
            str.Append(fnSistema.GetFormat("0", 3, 1));
            str.AppendLine(fnSistema.GetFormat("0", 5, 1));

            return str.ToString();

        }

    }

    /// <summary>
    /// Representa a los datos de tipo2, son los datos del trabajador propiamente tal (Declarados)
    /// </summary>
    class Seccion2
    {
        /// <summary>
        /// Tipo de registro, Largo = 1
        /// </summary>
        public int TipoRegistro { get; set; } = 2;
        /// <summary>
        /// Numero de formulario (1887 1979)
        /// </summary>
        public string NumeroFormulario { get; set; }
        /// <summary>
        /// Codigo de presentacion, Largo = 1
        /// </summary>
        public string CodigoPreentacion { get; set; } = "I";
        /// <summary>
        /// Numero de folio, Largo = 7
        /// </summary>
        public int Folio { get; set; }
        /// <summary>
        /// Tipo de declaracion (Original o rectificatoria), largo = 1
        /// </summary>
        public string TipoDeclaracion { get; set; }
        /// <summary>
        /// Rut declarante, no incluye digito verificacador, Largo = 8
        /// </summary>
        public string RutDeclarante { get; set; }
        /// <summary>
        /// Digito verificador declarante, Largo = 1
        /// </summary>
        public string DigitoDeclarante { get; set; }
        /// <summary>
        /// Rut sin digito verificador receptor de la renta, Largo = 8
        /// </summary>
        public string RutReceptor { get; set; }
        /// <summary>
        /// Digito verificador receptor de la renta, Largo = 1
        /// </summary>
        public string DigitoReceptor { get; set; }
        /// <summary>
        /// Renta total neta pagada, Largo = 12
        /// </summary>
        public double RentaNeta { get; set; }
        /// <summary>
        /// Impuesto único retenido, Largo = 12
        /// </summary>
        public double Impuesto { get; set; }
        /// <summary>
        /// Mayor retencion solicitada, Largo = 12
        /// </summary>
        public double MayorRetencion { get; set; }
        /// <summary>
        /// Renta total no Gravada, Largo = 12
        /// </summary>
        public double RentaTotalNoGravada { get; set; }
        /// <summary>
        /// Renta total exenta, Largo = 12
        /// </summary>
        public double RentaTotalExenta { get; set; }
        /// <summary>
        /// Rebaja Zona extrema, Largo = 12
        /// </summary>
        public double RebajaZonaExtrema { get; set; }
        /// <summary>
        /// Periodo al que pertenece la renta, Largo = 1
        /// Se debe completar con un caracter si aplica pago en ese mes, sino, dejar en blanco
        /// </summary>
        public string Periodo { get; set; }
        /// <summary>
        /// Numero de certificado, Largo = 7
        /// </summary>
        public string NumCertificado { get; set; }
        /// <summary>
        /// Espacios en blanco, Largo = 5
        /// </summary>
        public string Blancos { get; set; } = new string(' ', 5);

        /// <summary>
        /// Entrega la informacion de todos los trabajadores para el año tributario seleccionado
        /// </summary>
        /// <param name="pPeriodo"></param>
        public Hashtable GetInfoYear(int pPeriodo, string pNumFormulario, string pFolio, string pTipoDec, Empresa emp)
        {
            string Inicio = "", Termino = "", RutDec = "", DigDec = "", rentaNetaMensual = "";
            SqlConnection cn;
            SqlCommand cmd;
            SqlDataReader rdd;
            StringBuilder str = new StringBuilder();
            int Registros = 0, NumCert = 0, count = 0, rows = 0;
            Hashtable Data = new Hashtable();
            string rutTrab = "", rutInterno = "", digTrab = "";
            DataTable Tabla = new DataTable();
            double RentaTotalActualizada = 0, ImpuestoUnicoRetenidoReajus = 0, MayRentaSolAct = 0;
            double RentaTotalNoGrab = 0, RentaTotalExenta = 0, RebZonExt = 0;

            //Sumas globales
            double ImpuestoSinAjuste = 0, RentaGlobalSin = 0, ImpuestoAbrilSin = 0, RentaNoGravGlobalSin = 0;
            double RentaExentaGlobalSin = 0, ExtremaGlobalSin = 0, ImponibleGlobal = 0;
            //Con actualizar
            double RentaNetaActGlobal = 0, impuestoActGlobal = 0, MayorRetencionSolicitada = 0;
            double RentaNoGrabConGlobal = 0, RentaExentaConGlobal = 0, ZonaExtrConGlobal = 0;
                
            string[] meses = new string[] { " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " " };
            string periodo = "";

            #region "OLDquery"
            string sql = "SELECT  DISTINCT  trabajador.rut as rutcom, dbo.fngetrutsindig(trabajador.rut) as rut, dbo.fngetdigitorut(trabajador.rut) as digito, " +
                       "SUM(syspago) as rentaPagada, " +
                       "(SELECT SUM(valorcalculado) FROM itemtrabajador " +
                       "WHERE itemtrabajador.rut = trabajador.rut AND itemtrabajador.tipo = 1 AND itemtrabajador.suspendido = 0) as bruto, " +
                       "(SELECT SUM(valorcalculado) FROM itemtrabajador " +
                       "WHERE itemtrabajador.rut = trabajador.rut AND coditem = 'IMPUEST' AND itemtrabajador.suspendido = 0 ) as Impuesto, " +
                       "0 as MayRentSol, 0 as NoGrabada, 0 as Exenta, 0 as ZonExtrema, " +
                       "count(trabajador.anomes) as Meses, dbo.fnMesesJurados(trabajador.rut) as MesAlfa " +
                       "FROM trabajador " +
                       "INNER JOIN calculomensual " +
                       "ON calculomensual.contrato = trabajador.contrato AND calculomensual.anomes = trabajador.anomes " +
                       "WHERE(trabajador.anomes >= @pInicio AND trabajador.anomes <= @pTermino) AND status = 1 " +
                       "group by trabajador.rut " +
                       "order by trabajador.rut";
            #endregion


            string sql2 = "SELECT dbo.fnGetRutSinDig(trabajador.rut) as rut, dbo.fnGetDigitoRut(trabajador.rut) as digito, trabajador.anomes,  " +
                "	(IIF(SUM(systimp) > (SELECT uf * topeafp FROM valoresmes v WHERE v.anomes=trabajador.anomes), " +
                "   (SELECT uf * topeafp FROM valoresmes v WHERE v.anomes = trabajador.anomes), " +
                " SUM(systimp))) *(SELECT factorimp FROM valoresmes WHERE valoresMes.anomes = trabajador.anomes) as imponible, " +
	                     "SUM(systributo) as 'RentaNetaSin', " +
                        "(SELECT SUM(valorcalculado) FROM itemtrabajador WHERE coditem = 'IMPUEST' and suspendido = 0 AND rut = trabajador.rut AND itemtrabajador.anomes = trabajador.anomes) as 'ImpuestoUnicoSin', " +
                        "0 as MayorRenta,SUM(systexe) as RentaNoGravadaSin, 0 as RentaTotalExenta, 0 as RebajasZonaExtrema, "  + 
                        "dbo.fnValorIMpuesto(dbo.fntributableAjustable(rut, trabajador.anomes), trabajador.anomes) as 'ImpoReajustado',  " +
                        "0 as'MayorRetdelimpto', " +
					    "(SUM(systexe) * (SELECT factorimp FROM valoresmes WHERE valoresMes.anomes = trabajador.anomes)) as 'RentaTotalNoGravadaCon',  " +
						"0 as 'RentaTotalExentaConAct', 0 as 'RebajasExtrema', " +
					    "dbo.fntributableAjustable(rut, trabajador.anomes) as 'RentaNetaCon', " +
					    "(SELECT factorimp FROM valoresmes WHERE valoresMes.anomes = trabajador.anomes)	as FactorMes " +
                        "FROM trabajador " +
                        "INNER JOIN calculomensual ON calculomensual.contrato = trabajador.contrato AND calculomensual.anomes = trabajador.anomes " +
                        "WHERE status = 1 AND(trabajador.anomes >= @pInicio AND trabajador.anomes <= @pTermino) " +
                        "GROUP BY trabajador.rut, trabajador.anomes " +
                        "ORDER BY trabajador.rut, trabajador.anomes";

            if (pPeriodo > 0)
            {
                Inicio = pPeriodo.ToString() + "01";
                Termino = pPeriodo.ToString() + "12";

                RutDec = fnSistema.GetRutsindv(emp.Rut);
                DigDec = fnSistema.Getdigito(emp.Rut);

                try
                {
                    cn = fnSistema.OpenConnection();
                    if (cn != null)
                    {
                        using (cn)
                        {
                            using (cmd = new SqlCommand(sql2, cn))
                            {
                                //PARAMETROS
                                cmd.Parameters.Add(new SqlParameter("@pInicio", Inicio));
                                cmd.Parameters.Add(new SqlParameter("@pTermino", Termino));

                                rdd = cmd.ExecuteReader();
                                if (rdd.HasRows)
                                {
                                    Tabla.Load(rdd);
                                    rows = Tabla.Rows.Count;

                                    if (pTipoDec.ToLower().Equals("o") || pTipoDec.ToLower().Equals("r"))
                                    {
                                        foreach (DataRow rd in Tabla.Rows)
                                        {
                                            int d = 0;
                                            if (count == 53)
                                                d = 10;

                                            ///Son iguales
                                            if (rutTrab.Equals((string)rd["rut"]) && count > 0)
                                            {
                                                //Estamos viendo el mismo rut, no ha cambiado.
                                                //Montos Actualizados
                                                RentaTotalActualizada = RentaTotalActualizada + Convert.ToDouble(rd["RentaNetaCon"]);
                                                ImpuestoUnicoRetenidoReajus = ImpuestoUnicoRetenidoReajus + Convert.ToDouble(rd["ImpoReajustado"]);
                                                MayRentaSolAct = MayRentaSolAct + Convert.ToDouble(rd["MayorRenta"]);
                                                RentaTotalNoGrab = RentaTotalNoGrab + Convert.ToDouble(rd["RentaTotalNoGravadaCon"]);
                                                RentaTotalExenta = RentaTotalExenta + Convert.ToDouble(rd["RentaTotalExentaConAct"]);
                                                RebZonExt = RebZonExt + Convert.ToDouble(rd["RebajasZonaExtrema"]);

                                                periodo = Convert.ToInt32(rd["anomes"]) + "";
                                                periodo = fnSistema.fnRightString(periodo, 2);
                                                meses[Convert.ToInt32(periodo) - 1] = "C";
                                                rentaNetaMensual += fnSistema.GetFormat(Math.Round(Convert.ToDouble(rd["RentaNetaSin"])).ToString(), 12, 1);
                                                //str.Append(rentaNetaMensual);
                                                //Acá se deben agregar MONTO INGRESO MENSUAL (SIN ACTUALIZAR) por cada mes ( Debería ser el valor RentaNetaSin de la query)
                                                //Se transforma a double y después se redondea
                                                //rentaNetaMensual = fnSistema.GetFormat(Math.Round(Convert.ToDouble(rd["RentaNetaSin"])).ToString(), 12, 1);

                                                if (count == rows - 1)
                                                {
                                                    if (str.ToString().Contains((string)rd["rut"]) == false)
                                                    {
                                                        str.Append("2");
                                                        str.Append(pNumFormulario);
                                                        str.Append("I");
                                                        str.Append(pFolio);
                                                        str.Append(pTipoDec);
                                                        str.Append(RutDec);
                                                        str.Append(DigDec);
                                                        str.Append((string)rd["rut"]);
                                                        str.Append((string)rd["digito"]);
                                                        str.Append(fnSistema.GetFormat(Math.Round(RentaTotalActualizada) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(ImpuestoUnicoRetenidoReajus) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(MayRentaSolAct) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(RentaTotalNoGrab) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(RentaTotalExenta) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(RebZonExt) + "", 12, 1));
                                                        Registros++;
                                                        //MESES
                                                        str.Append(GetMonths(meses));
                                                        //NUMERO DE CERTIFICADO 
                                                        str.Append(fnSistema.GetFormat(Registros + "", 7, 1));
                                                        //Agrego renta mensual
                                                        //rentaNetaMensual += fnSistema.GetFormat(Math.Round(Convert.ToDouble(rd["RentaNetaSin"])).ToString(), 12, 1);
                                                        str.Append(rentaNetaMensual);
                                                        str.AppendLine(new string(' ', 56));

                                                        //LIMPIAR MESES
                                                        ResetMeses(meses);
                                                        rentaNetaMensual = "";
                                                    }

                                                }
                                            }
                                            else
                                            {
                                                //NO SON IGUALES (RESET DE ACUMULADORES)
                                                //GENERAR LINEA CON DATOS

                                                if (count > 0)
                                                {
                                                    if (str.ToString().Contains(rutTrab) == false)
                                                    {
                                                        string rr = (string)rd["rut"];
                                                        str.Append("2");
                                                        str.Append(pNumFormulario);
                                                        str.Append("I");
                                                        str.Append(pFolio);
                                                        str.Append(pTipoDec);
                                                        str.Append(RutDec);
                                                        str.Append(DigDec);
                                                        str.Append(rutTrab);
                                                        str.Append(digTrab);
                                                        str.Append(fnSistema.GetFormat(Math.Round(RentaTotalActualizada) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(ImpuestoUnicoRetenidoReajus) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(MayRentaSolAct) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(RentaTotalNoGrab) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(RentaTotalExenta) + "", 12, 1));
                                                        str.Append(fnSistema.GetFormat(Math.Round(RebZonExt) + "", 12, 1));
                                                        Registros++;
                                                        //MESES
                                                        str.Append(GetMonths(meses));
                                                        //NUMERO DE CERTIFICADO 
                                                        str.Append(fnSistema.GetFormat(Registros + "", 7, 1));
                                                        //Agrego renta mensual
                                                        //rentaNetaMensual += fnSistema.GetFormat(Math.Round(Convert.ToDouble(rd["RentaNetaSin"])).ToString(), 12, 1);
                                                        str.Append(rentaNetaMensual);
                                                        str.AppendLine(new string(' ', 56));

                                                        //LIMPIAR MESES
                                                        ResetMeses(meses);
                                                        rentaNetaMensual = "";
                                                        //Para subir al sitio de pruebas se tiene un máximo de 100 registros por declaración
                                                        if (Registros >= 95) {
                                                            break;
                                                        }
                                                    }

                                                }

                                                RentaTotalActualizada = 0;
                                                ImpuestoUnicoRetenidoReajus = 0;
                                                MayRentaSolAct = 0;
                                                RentaTotalNoGrab = 0;
                                                RentaTotalExenta = 0;
                                                RebZonExt = 0;

                                                //Ultima fila???

                                                RentaTotalActualizada = RentaTotalActualizada + Convert.ToDouble(rd["RentaNetaCon"]);
                                                ImpuestoUnicoRetenidoReajus = ImpuestoUnicoRetenidoReajus + Convert.ToDouble(rd["ImpoReajustado"]);
                                                MayRentaSolAct = MayRentaSolAct + Convert.ToDouble(rd["MayorRenta"]);
                                                RentaTotalNoGrab = RentaTotalNoGrab + Convert.ToDouble(rd["RentaTotalNoGravadaCon"]);
                                                RentaTotalExenta = RentaTotalExenta + Convert.ToDouble(rd["RentaTotalExenta"]);
                                                RebZonExt = RebZonExt + Convert.ToDouble(rd["RebajasZonaExtrema"]);

                                                periodo = Convert.ToInt32(rd["anomes"]) + "";
                                                periodo = fnSistema.fnRightString(periodo, 2);
                                                meses[Convert.ToInt32(periodo) - 1] = "C";
                                                rentaNetaMensual += fnSistema.GetFormat(Math.Round(Convert.ToDouble(rd["RentaNetaSin"])).ToString(), 12, 1);

                                            }

                                            string fdd = str.ToString();

                                            //Sumas globales
                                            //double data = Convert.ToDouble(rd["RentaNetaSin"]);
                                            //rentaNetaMensual += fnSistema.GetFormat(Math.Round(Convert.ToDouble(rd["RentaNetaSin"])).ToString(), 12, 1);

                                            ImpuestoSinAjuste = ImpuestoSinAjuste + Convert.ToDouble(rd["ImpuestoUnicoSin"]);
                                            RentaGlobalSin = RentaGlobalSin + Convert.ToDouble(rd["RentaNetaSin"]);
                                            //Impuesto Abril
                                            //if (Convert.ToDouble(rd["anomes"]) >= 201901 && Convert.ToDouble(rd["anomes"]) <= 201904)
                                            //    ImpuestoAbrilSin = ImpuestoAbrilSin + Convert.ToDouble(rd["ImpuestoUnico"]);

                                            RentaNoGravGlobalSin = RentaNoGravGlobalSin + Convert.ToDouble(rd["RentaNoGravadaSin"]);
                                            RentaExentaGlobalSin = RentaExentaGlobalSin + Convert.ToDouble(rd["RentaTotalExenta"]);
                                            ExtremaGlobalSin = ExtremaGlobalSin + Convert.ToDouble(rd["RebajasZonaExtrema"]);
                                            ImponibleGlobal = ImponibleGlobal + Convert.ToDouble(rd["imponible"]);
                                            RentaNetaActGlobal = RentaNetaActGlobal + Convert.ToDouble(rd["RentaNetaCon"]);
                                            impuestoActGlobal = impuestoActGlobal + Convert.ToDouble(rd["ImpoReajustado"]);
                                            MayorRetencionSolicitada = MayorRetencionSolicitada + Convert.ToDouble(rd["MayorRetdelimpto"]);
                                            RentaNoGrabConGlobal = RentaNoGrabConGlobal + Convert.ToDouble(rd["RentaTotalNoGravadaCon"]);
                                            RentaExentaConGlobal = RentaExentaConGlobal + Convert.ToDouble(rd["RentaTotalExentaConAct"]);
                                            ZonaExtrConGlobal = ZonaExtrConGlobal + Convert.ToDouble(rd["RebajasExtrema"]);


                                            rutTrab = (string)rd["rut"];
                                            digTrab = (string)rd["digito"];
                                            count++;
                                                                      
                                        }
                                    }
                                    else
                                    {
                                        //Solo para obterner una tabla con valores no repetidos.
                                        DataView view = new DataView(Tabla);
                                        DataTable t = view.ToTable(true, "rut");

                                        str.Append("2");
                                        str.Append(pNumFormulario);
                                        str.Append("I");
                                        str.Append(pFolio);
                                        str.Append(pTipoDec);
                                        str.Append(RutDec);
                                        str.Append(DigDec);
                                        str.Append(fnSistema.GetFormat("0", 8, 1));
                                        str.Append(fnSistema.GetFormat("0", 1, 1));
                                        str.Append(fnSistema.GetFormat("0", 12, 1));
                                        str.Append(fnSistema.GetFormat("0", 12, 1));
                                        str.Append(fnSistema.GetFormat("0", 12, 1));
                                        str.Append(fnSistema.GetFormat("0", 12, 1));
                                        str.Append(fnSistema.GetFormat("0", 12, 1));
                                        str.Append(fnSistema.GetFormat("0", 12, 1));
                                        str.Append(fnSistema.GetFormat("0", 12, 1));
                                        // NumCert++;
                                        str.Append(fnSistema.GetFormat("0", 7, 1));
                                        str.AppendLine(new string(' ', 56));
                                        Registros++;

                                        //foreach (DataRow d in t.Rows)
                                        //{
                                        //    str.Append("2");
                                        //    str.Append(pNumFormulario);
                                        //    str.Append("I");
                                        //    str.Append(pFolio);
                                        //    str.Append(pTipoDec);
                                        //    str.Append(RutDec);
                                        //    str.Append(DigDec);
                                        //    str.Append(fnSistema.GetFormat("0", 8, 1));
                                        //    str.Append(fnSistema.GetFormat("0", 1, 1));
                                        //    str.Append(fnSistema.GetFormat("0", 12, 1));
                                        //    str.Append(fnSistema.GetFormat("0", 12, 1));
                                        //    str.Append(fnSistema.GetFormat("0", 12, 1));
                                        //    str.Append(fnSistema.GetFormat("0", 12, 1));
                                        //    str.Append(fnSistema.GetFormat("0", 12, 1));
                                        //    str.Append(fnSistema.GetFormat("0", 12, 1));
                                        //    str.Append(fnSistema.GetFormat("0", 12, 1));
                                        //    // NumCert++;
                                        //    str.Append(fnSistema.GetFormat("0", 7, 1));
                                        //    str.AppendLine(fnSistema.GetFormat("0", 5, 1));
                                        //    Registros++;
                                        //}
                                    }             
                                }
                            }
                        }
                    }
                }
                catch (SqlException ex)
                {
                    //ERROR...
                }
            }

            
            Data.Add("section", str.ToString());            
            Data.Add("registros", Registros);

            //datos globales
            Data.Add("NetaTotalSin", Math.Round(RentaGlobalSin));
            Data.Add("ImpuestoAbril", Math.Round(ImpuestoAbrilSin));
            Data.Add("ImpuestoSin", Math.Round(ImpuestoSinAjuste));
            Data.Add("GrabadaSin", Math.Round(RentaNoGravGlobalSin));
            Data.Add("ExentaSin", Math.Round(RentaExentaGlobalSin));
            Data.Add("ExtremaSin", Math.Round(ExtremaGlobalSin));
            Data.Add("Imponible", Math.Round(ImponibleGlobal));
            Data.Add("NegaTotalCon", Math.Round(RentaNetaActGlobal));
            Data.Add("ImpuestoCon", Math.Round(impuestoActGlobal));
            Data.Add("MayorRetencion", Math.Round(MayorRetencionSolicitada));
            Data.Add("GrabadaCon", Math.Round(RentaNoGrabConGlobal));
            Data.Add("ExentaCon", Math.Round(RentaExentaConGlobal));
            Data.Add("ExtremaCon", Math.Round(ZonaExtrConGlobal));

            return Data;
        }

        /// <summary>
        /// Limpia el arreglo de los meses dejando todos los campos con un espacio en blanco.
        /// </summary>
        /// <param name="pMonths"></param>
        private void ResetMeses(string[] pMonths)
        {
            if (pMonths.Length > 0)
            {
                for (int i = 0; i < pMonths.Length; i++)
                {
                    pMonths[i] = " ";
                }
            }
        }

        /// <summary>
        /// Entrega la cantidad de meses en formato XXXX
        /// </summary>
        /// <param name="pMonths"></param>
        /// <returns></returns>
        private string GetMonths(string[] pMonths)
        {
            StringBuilder str = new StringBuilder();
            if (pMonths.Length > 0)
            {
                for (int i = 0; i < pMonths.Length; i++)
                {
                    str.Append(pMonths[i]);
                }
            }

            return str.ToString();
        }

        /// <summary>
        /// Entrega linea con informacion para formulario 1879
        /// </summary>
        public Hashtable GetData1879(DataTable pData, string pNumFormulario, string pFolio, Empresa emp, string pTipoDeclaracion)
        {
            StringBuilder str = new StringBuilder();
            string[] Months = new string[] {" ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " ", " "};
            string Meses = "", periodo = "";
            double SumBruto = 0, SumImpuesto10 = 0, SumImpuesto35 = 0;
            double Impuesto = 0, ImpuestoGlobal = 0;
            double SumBrutoGlobal = 0, SumImpuesto10Global = 0, SumImpuesto35Global = 0;
            int pos = 0, casos = 0;

            Hashtable resultado = new Hashtable();
            if (pData.Rows.Count > 0)
            {

                //Ordenar por rut y periodo
                //DataTable Ordenada = (from x in pData.AsEnumerable()                                      
                //                orderby x.Field<string>("rut"), x.Field<Int32>("periodo") ascending
                //                select x).CopyToDataTable();

                //Entrega un listado de rut sin repetir
                List<string> RutEncontratos = pData.AsEnumerable()
                                             .Select(row => row.Field<string>("rut")).Distinct().ToList();
                //RECORREMOS LOS RUT ENCONTRATOS
                if (RutEncontratos.Count > 0)
                {

                    if (pTipoDeclaracion.ToLower().Equals("o") || pTipoDeclaracion.ToLower().Equals("r"))
                    {
                        foreach (string Rut in RutEncontratos)
                        {

                            //Header
                            str.Append("2");
                            str.Append(pNumFormulario);
                            str.Append("I");
                            str.Append(fnSistema.GetFormat(pFolio, 7, 1));
                            str.Append(pTipoDeclaracion);
                            //RUT DECLARANTE
                            str.Append(fnSistema.GetRutsindv(emp.Rut));
                            str.Append(fnSistema.Getdigito(emp.Rut));

                            //Rut del receptor de la renta
                            str.Append(fnSistema.GetFormat(fnSistema.GetRutsindv(Rut), 8, 1));
                            str.Append(fnSistema.Getdigito(Rut));
                            
                                foreach (DataRow row in pData.Select($"rut='{Rut}'", "periodo ASC"))
                                {
                                    //Sumamos bruto e impuesto
                                    //SumBruto = SumBruto + Convert.ToDouble(row["bruto"]);
                                    Impuesto = Impuesto + Convert.ToDouble(row["impuesto"]);

                                    //Sabes si impuesto es renta10 o renta35
                                    //if (row["renta10"].ToString().Equals("1"))
                                    SumImpuesto10 = SumImpuesto10 + Convert.ToDouble(row["renta10"]);
                                    //else if (row["renta35"].ToString().Equals("1"))
                                    SumImpuesto35 = SumImpuesto35 + Convert.ToDouble(row["renta35"]);

                                    //Generamos x por cada periodo
                                    periodo = row["periodo"].ToString();
                                    periodo = fnSistema.fnRightString(periodo, 2);
                                    Months[Convert.ToInt32(periodo) - 1] = "X";

                                }

                                Meses = GetMonths(Months);
                                ResetMeses(Months);

                                //Datos meses
                                //Honorarios
                                str.Append(fnSistema.GetFormat(Math.Round(Impuesto, 0) + "", 12, 1));
                                //10% y 35%
                                str.Append(fnSistema.GetFormat(Math.Round(SumImpuesto10, 0) + "", 12, 1));
                                str.Append(fnSistema.GetFormat(Math.Round(SumImpuesto35, 0) + "", 12, 1));
                                str.Append(Meses);
                                casos++;
                                str.Append(fnSistema.GetFormat("0", 15, 1));
                                str.Append(fnSistema.GetFormat("0", 15, 1));
                                //Numero de certificado
                                str.Append(fnSistema.GetFormat(casos.ToString(), 7, 1));
                                str.AppendLine(new string(' ', 87));

                                //SumBrutoGlobal = SumBrutoGlobal + SumBruto;

                                ImpuestoGlobal = ImpuestoGlobal + Impuesto;
                                SumImpuesto10Global = SumImpuesto10Global + SumImpuesto10;
                                SumImpuesto35Global = SumImpuesto35Global + SumImpuesto35;
                                SumBruto = 0;
                                SumImpuesto10 = 0;
                                SumImpuesto35 = 0;
                                pos = 0;
                                Meses = "";
                                Impuesto = 0;
                        }
                    }
                    else
                    {

                        //Header
                        str.Append("2");
                        str.Append(pNumFormulario);
                        str.Append("I");
                        str.Append(fnSistema.GetFormat(pFolio, 7, 1));
                        str.Append(pTipoDeclaracion);
                        //RUT DECLARANTE
                        str.Append(fnSistema.GetRutsindv(emp.Rut));
                        str.Append(fnSistema.Getdigito(emp.Rut));
                        //RUT RECEPTOR
                        str.Append(fnSistema.GetFormat("0", 8, 1));
                        str.Append("0");
                        //Anulatoria
                        str.Append(fnSistema.GetFormat("0", 12, 1));
                        str.Append(fnSistema.GetFormat("0", 12, 1));
                        str.Append(fnSistema.GetFormat("0", 12, 1));
                        str.Append(fnSistema.GetFormat("0", 12, 1));
                        str.Append(fnSistema.GetFormat("0", 15, 1));
                        str.Append(fnSistema.GetFormat("0", 15, 1));
                        str.Append(fnSistema.GetFormat("0", 7, 1));
                        str.AppendLine(new string(' ', 87));

                        casos++;
                    }
               
                }

                resultado.Add("section", str.ToString());
                resultado.Add("casos", casos);
                resultado.Add("honorario", Math.Round(ImpuestoGlobal, 0));
                resultado.Add("impuesto10", Math.Round(SumImpuesto10Global, 0));
                resultado.Add("impuesto35", Math.Round(SumImpuesto35Global, 0));
            }

            return resultado;
        }

    

    }

    /// <summary>
    /// Corresponde a la seccion de resumen de ddjj
    /// </summary>
    class Seccion3
    {

        public int TipoRegistro { get; set; } = 3;
        public int Orden { get; set; }
        /// <summary>
        /// Numero de formulario (1887), Largo = 4
        /// </summary>
        public string NumeroFormulario { get; set; }
        /// <summary>
        /// Codigo de presentación
        /// </summary>
        public string CodigoPresentacion { get; set; } = "I";
        /// <summary>
        /// Numero de folio
        /// </summary>
        public string NumeroFolio { get; set; }
        #region "3.1"
        /// <summary>
        /// Rut sin digito verificador declarante, Largo = 8
        /// </summary>
        public string RutDeclarante { get; set; }
        /// <summary>
        /// Digito verificador declarante, Largo = 1
        /// </summary>
        public string DigitoDeclarante { get; set; }
        /// <summary>
        /// Renta total neta pagada, Largo = 15
        /// </summary>
        public double RentaTotalNeta { get; set; }
        /// <summary>
        /// Impuesto unico retenido por rentas pagadas durante el año, Largo = 15
        /// </summary>
        public double ImpUnicoRetAnio { get; set; }
        /// <summary>
        /// Impuesto unico retenido por rentas acc. pagadas Enero - Abril, Largo = 15
        /// </summary>
        public double ImpUnicoRetEnab { get; set; }
        /// <summary>
        /// Renta total no grabada, Largo = 15
        /// </summary>
        public double RentaTotalNoGrabada { get; set; }
        /// <summary>
        /// Renta total exenta, Largo = 15
        /// </summary>
        public double RentaTotalExenta { get; set; }
        /// <summary>
        /// Renta zona extrema, Largo = 15
        /// </summary>
        public double RentaZonaExtrema { get; set; }
        /// <summary>
        /// Total remuneracion imponible, Largo = 15
        /// </summary>
        public double TotalImponible { get; set; }
        #endregion

        #region "3.2"
        /// <summary>
        /// Renta total neta pagada, Largo = 15
        /// </summary>
        public double RentaTotalNetaPagada { get; set; }
        /// <summary>
        /// Impuesto unico retenido
        /// </summary>
        public double impUnicoRetenido { get; set; }
        /// <summary>
        /// Mayor retencion solicitada, Largo = 15
        /// </summary>
        public double MayorRetSolicitada { get; set; }
        /// <summary>
        /// Renta total no grabada, Largo = 15
        /// </summary>
        public double RenTotalNoGrab { get; set; }
        /// <summary>
        /// Renta total exenta, Largo = 15
        /// </summary>
        public double RentaTExenta { get; set; }
        /// <summary>
        /// Rebaja zona extrema
        /// </summary>
        public double RebZonExtrema { get; set; }
        /// <summary>
        /// Total de casos informados, 7
        /// </summary>
        public int TotalInformados { get; set; }
        /// <summary>
        /// Fecha de presentacion, Largo = 9
        /// </summary>
        public string FechaPresentacion { get; set; } = "0000000";
        /// <summary>
        /// Rut de representante legal (Sin digito), Largo = 8
        /// </summary>
        public string RutRepLegal { get; set; }
        /// <summary>
        /// Digito verificador representante legal, Largo = 1
        /// </summary>
        public string DigRepLegal { get; set; }
        #endregion

        /// <summary>
        /// Obtiene resumen impuestos para año tributario seleccionado
        /// </summary>
        /// <param name="pPeriodo"></param>
        /// <param name="emp"></param>
        /// <param name="pNumFormulario"></param>
        /// <param name="pFolio"></param>
        /// <param name="pTotalReg"></param>
        /// <returns></returns>
        public string GetInfoYear(int pPeriodo, Empresa emp, string pNumFormulario, string pFolio, Hashtable pResumen)
        {
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;
            StringBuilder str = new StringBuilder();

            string RutDec = "", DigDec = "";

            RutDec = fnSistema.GetRutsindv(emp.Rut);
            DigDec = fnSistema.Getdigito(emp.Rut);
        

            if (pResumen.Count > 0)
            {
                //Seccion 3.1
                str.Append("3");
                str.Append("1");
                str.Append(pNumFormulario);
                str.Append("I");
                str.Append(pFolio);
                str.Append(RutDec);
                str.Append(DigDec);
                str.Append(fnSistema.GetFormat(Convert.ToDouble(pResumen["NetaTotalSin"]) + "", 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["ImpuestoSin"])).ToString(), 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["ImpuestoAbril"])).ToString(), 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["GrabadaSin"])).ToString(), 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["ExentaSin"])).ToString(), 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["ExtremaSin"])).ToString(), 15, 1));
                //Acá falta campo de leyes sociales
                str.AppendLine(fnSistema.GetFormat((Convert.ToDouble(pResumen["Imponible"])).ToString(), 15, 1));
                //Falta incluir los meses con resultado de MONTO INGRESO MENSUAL (SIN ACTUALIZAR)
                //Seccion 3.2
                str.Append("3");
                str.Append("2");
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["NegaTotalCon"])).ToString(), 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["ImpuestoCon"])).ToString(), 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["MayorRetencion"])).ToString(), 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["GrabadaCon"])).ToString(), 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["ExentaCon"])).ToString(), 15, 1));
                str.Append(fnSistema.GetFormat((Convert.ToDouble(pResumen["ExtremaCon"])).ToString(), 15, 1));
                //Total registros informados
                str.Append(fnSistema.GetFormat(Convert.ToInt32(pResumen["registros"]) + "", 7, 1));
                //Fecha de presentación, No aplica si es por interneT (I)
                str.Append(fnSistema.GetFormat("0", 2, 1));
                //Meses
                str.Append(fnSistema.GetFormat("0", 3, 1));
                str.Append(fnSistema.GetFormat("0", 4, 1));
                str.Append(fnSistema.GetRutsindv(emp.RutRep));
                str.Append(fnSistema.Getdigito(emp.RutRep));
                str.Append(new string(' ', 11));
            }           

            return str.ToString();
        }

        /// <summary>
        /// Resumen para formulario 1879
        /// </summary>
        public string GetDetail1879(Hashtable pResumen, Empresa emp, string pNumFormulario, string pFolio)
        {
            StringBuilder str = new StringBuilder();

            if (pResumen.Count > 0)
            {
                str.Append("3");
                str.Append("1");
                str.Append(pNumFormulario);
                str.Append("I");
                str.Append(pFolio);
                //RUT DECLARANTE
                str.Append(fnSistema.GetRutsindv(emp.Rut));
                str.Append(fnSistema.Getdigito(emp.Rut));
                //MONTO ANUAL ACTUALIZADO
                str.Append(fnSistema.GetFormat(pResumen["honorario"].ToString(), 15, 1));
                //10% y 35%
                str.Append(fnSistema.GetFormat(pResumen["impuesto10"].ToString(), 15, 1));
                str.Append(fnSistema.GetFormat(pResumen["impuesto35"].ToString(), 15, 1));
                str.Append(fnSistema.GetFormat("0", 18, 1));
                str.Append(fnSistema.GetFormat("0", 18, 1));
                //CASOS INFORMADOS
                str.Append(fnSistema.GetFormat(pResumen["casos"].ToString(), 10, 1));
                //FECHAS
                str.Append(fnSistema.GetFormat("0", 2, 1));
                str.Append(fnSistema.GetFormat("0", 3, 1));
                str.Append(fnSistema.GetFormat("0", 4, 1));
                //RUT REPRESENTANTE LEGAL
                str.Append(fnSistema.GetRutsindv(emp.RutRep));
                str.Append(fnSistema.Getdigito(emp.RutRep));
                str.Append(new string(' ', 72));

            }

            return str.ToString();
        }

    }

    class Combos
    {
        public string key { get; set; }
        public string desc { get; set; }
    }

    public class formula
    {
        public string key { get; set; }
        public string desc { get; set; }

        /// <summary>
        /// Indica si existe una formula
        /// </summary>
        /// <param name="pCodItem"></param>
        /// <returns></returns>
        public static bool ExisteFormula(string pCodItem)
        {
            string sql = "SELECT count(*) FROM formula WHERE codformula=@pCodigo";
            SqlCommand cmd;
            SqlConnection cn;
            bool existe = false;
            try
            {
                cn = fnSistema.OpenConnection();
                if (cn !=null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //PARAMETROs
                            cmd.Parameters.Add(new SqlParameter("@pCodigo", pCodItem));
                            if (Convert.ToInt32(cmd.ExecuteScalar()) > 0)
                            {
                                existe = true;
                            }

                        }
                    }
                }
            }
            catch (SqlException ex)
            {
               //Error...
            }

            return existe;
        }
        
       
    }


    /// <summary>
    /// Representa a tabla cpCausaLegal
    /// </summary>
    class CausaLegal
    {
        public int Codigo { get; set; }
        public string Nombre { get; set; }
        public string Descripcion { get; set; }
        public string Detalle { get; set; }

        /// <summary>
        /// Setea las propiedades de un codigo de causal especifico
        /// </summary>
        /// <param name="pCodigo">Codigo que se desea buscar</param>
        public void SetInfo(int pCodigo)
        {
            string sql = "SELECT codigo, Descrip, causalContrato, detalleCausalContrato " +
                         "FROM cpCausasLegales WHERE codigo=@pCodigo" +
                         " ORDER BY codigo";
            SqlCommand cmd;
            SqlConnection cn;
            SqlDataReader rd;

            try
            {
                cn = fnSistema.OpenConnection();
                if (cn != null)
                {
                    using (cn)
                    {
                        using (cmd = new SqlCommand(sql, cn))
                        {
                            //Parametros
                            cmd.Parameters.Add(new SqlParameter("@pCodigo", pCodigo));
                            rd = cmd.ExecuteReader();
                            if (rd.HasRows)
                            {
                                while (rd.Read())
                                {
                                    this.Codigo = Convert.ToInt32(rd["codigo"]);
                                    this.Nombre = Convert.ToString(rd["Descrip"]);
                                    this.Descripcion = Convert.ToString(rd["causalContrato"]);
                                    this.Detalle = Convert.ToString(rd["detalleCausalContrato"]);
                                }
                            }
                        }
                    }
                }
            }
            catch (SqlException ex)
            {
                //error...
            }

        }
    }

}

